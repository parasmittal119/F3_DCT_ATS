# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\Main_window_final_master.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *

from Hardware import *
from User_login import *
from about_done import *
from add_customer import *
from commissioning import *
from communication_window_done import *
from custom_done import *
from pfc_window import *
from report_gui import *
from test_order_done import *
from test_script import Ui_Test
from screeninfo import get_monitors
global w, h, m

for m in get_monitors():
    print(m)

w = m.width
h = m.height


class Ui_MainWindow(QMainWindow):
    global w, h

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)
        MainWindow.resize(int(w*0.585), int(h*0.779))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}logo_1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mdiArea = QtWidgets.QMdiArea(self.centralwidget)
        self.mdiArea.setGeometry(QtCore.QRect(0, 0, int(w*1.406296), int(h*1.08)))
        self.mdiArea.setObjectName("mdiArea")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(int(w*0.387994), int(h*0.377604), int(w*0.212299), int(h*0.104167)))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}exicome logo.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 799, 21))
        self.menubar.setObjectName("menubar")
        self.menuUser = QtWidgets.QMenu(self.menubar)
        self.menuUser.setObjectName("menuUser")
        self.menuTest_Menu = QtWidgets.QMenu(self.menubar)
        self.menuTest_Menu.setObjectName("menuTest_Menu")
        self.menuManagement = QtWidgets.QMenu(self.menubar)
        self.menuManagement.setObjectName("menuManagement")
        self.menuReports = QtWidgets.QMenu(self.menubar)
        self.menuReports.setObjectName("menuReports")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuDebug = QtWidgets.QMenu(self.menubar)
        self.menuDebug.setObjectName("menuDebug")
        self.menuATS_Control = QtWidgets.QMenu(self.menubar)
        self.menuATS_Control.setObjectName("menuATS_Control")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.loginWindow = QtWidgets.QAction(MainWindow)
        self.loginWindow.setObjectName("loginWindow")
        # self.registerWindow = QtWidgets.QAction(MainWindow)
        # self.registerWindow.setObjectName("registerWindow")
        self.actionPP_Test_Script = QtWidgets.QAction(MainWindow)
        self.actionPP_Test_Script.setObjectName("actionPP_Test_Script")
        self.actionIMPS_Test_Script = QtWidgets.QAction(MainWindow)
        self.actionIMPS_Test_Script.setObjectName("actionIMPS_Test_Script")
        self.actionRJIL_Test_Script = QtWidgets.QAction(MainWindow)
        self.actionRJIL_Test_Script.setObjectName("actionRJIL_Test_Script")
        self.actionRJIL_M2000_Test_Script = QtWidgets.QAction(MainWindow)
        self.actionRJIL_M2000_Test_Script.setObjectName("actionRJIL_M2000_Test_Script")
        self.actionHardware_Management = QtWidgets.QAction(MainWindow)
        self.actionHardware_Management.setObjectName("actionHardware_Management")
        self.actionPP_Custom_Setting = QtWidgets.QAction(MainWindow)
        self.actionPP_Custom_Setting.setObjectName("actionPP_Custom_Setting")
        self.actionPP_Add_Customer = QtWidgets.QAction(MainWindow)
        self.actionPP_Add_Customer.setObjectName("actionPP_Add_Customer")
        self.actionTest_Reports = QtWidgets.QAction(MainWindow)
        self.actionTest_Reports.setObjectName("actionTest_Reports")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        if not gui_global.commissioning_bit:
            self.actionCommissioning = QtWidgets.QAction(MainWindow)
            self.actionCommissioning.setObjectName("actionCommissioning")
        self.actionPFC_Control = QtWidgets.QAction(MainWindow)
        self.actionPFC_Control.setObjectName("actionPFC_Control")
        self.actionCommunication_Window = QtWidgets.QAction(MainWindow)
        self.actionCommunication_Window.setObjectName("actionCommunication_Window")
        self.actionTest_Order_Preference = QtWidgets.QAction(MainWindow)
        self.actionTest_Order_Preference.setObjectName("actionTest_Order_Preference")
        self.actionLogs = QtWidgets.QAction(MainWindow)
        self.actionLogs.setObjectName("actionLogs")
        # self.menuUser.addAction(self.loginWindow)
        # self.menuUser.addAction(self.registerWindow)
        self.menuUser.addAction(self.actionExit)
        self.menuTest_Menu.addAction(self.actionPP_Test_Script)
        self.menuTest_Menu.addSeparator()
        self.menuTest_Menu.addAction(self.actionIMPS_Test_Script)
        self.menuTest_Menu.addSeparator()
        self.menuTest_Menu.addAction(self.actionRJIL_Test_Script)
        self.menuTest_Menu.addSeparator()
        self.menuTest_Menu.addAction(self.actionRJIL_M2000_Test_Script)
        self.menuManagement.addAction(self.actionHardware_Management)
        self.menuManagement.addSeparator()
        self.menuManagement.addAction(self.actionPP_Custom_Setting)
        self.menuManagement.addSeparator()
        self.menuManagement.addAction(self.actionPP_Add_Customer)
        self.menuReports.addAction(self.actionTest_Reports)
        self.menuReports.addSeparator()
        self.menuReports.addAction(self.actionLogs)
        self.menuHelp.addAction(self.actionAbout)
        if not gui_global.commissioning_bit:
            self.menuHelp.addAction(self.actionCommissioning)
        self.menuDebug.addAction(self.actionTest_Order_Preference)
        self.menuDebug.addSeparator()
        self.menuDebug.addAction(self.actionCommunication_Window)
        self.menuATS_Control.addAction(self.actionPFC_Control)
        self.menubar.addAction(self.menuUser.menuAction())
        self.menubar.addAction(self.menuTest_Menu.menuAction())
        self.menubar.addAction(self.menuManagement.menuAction())
        self.menubar.addAction(self.menuReports.menuAction())
        self.menubar.addAction(self.menuDebug.menuAction())
        self.menubar.addAction(self.menuATS_Control.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #
        # # WINDOWS LOGIN
        # self.loginWindow.triggered.connect(self.handle_login_window)
        #
        # # WINDOWS REGISTER
        # self.registerWindow.triggered.connect(self.handle_register_window)
        # # self.registerWindow.triggered.connect(QtWidgets.QApplication.exit)

        # WINDOWS Exit
        self.actionExit.triggered.connect(QtWidgets.QApplication.exit)

        # About
        self.actionAbout.triggered.connect(self.about)

        # Commissioning
        if not gui_global.commissioning_bit:
            self.actionCommissioning.triggered.connect(self.commission)

        # Test order preference
        self.actionTest_Order_Preference.triggered.connect(self.testing_order)

        # PFC Control
        self.actionPFC_Control.triggered.connect(self.pfc_control)

        # PP Script
        self.actionPP_Test_Script.triggered.connect(self.pp_script)

        # IMPS Script
        self.actionIMPS_Test_Script.triggered.connect(self.imps_script)

        # RJIL Script
        self.actionRJIL_Test_Script.triggered.connect(self.rjil_script)

        # RJIL M2000 Script
        self.actionRJIL_M2000_Test_Script.triggered.connect(self.rjil_2000_script)

        # Hardware Management
        self.actionHardware_Management.triggered.connect(self.hardware_management)

        # Custom Setting
        self.actionPP_Custom_Setting.triggered.connect(self.custom_setting)

        # Customer addition
        self.actionPP_Add_Customer.triggered.connect(self.add_customer)

        # Test Report
        self.actionTest_Reports.triggered.connect(self.test_report)

        # Devices Communication Window
        self.actionCommunication_Window.triggered.connect(self.communication_dialog)

        # LOGS
        self.actionLogs.triggered.connect(self.log_folder)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", f"{gui_global.ate_name}"))
        self.menuUser.setTitle(_translate("MainWindow", "User"))
        self.menuTest_Menu.setTitle(_translate("MainWindow", "Test Menu"))
        self.menuManagement.setTitle(_translate("MainWindow", "Management"))
        self.menuReports.setTitle(_translate("MainWindow", "Reports"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuDebug.setTitle(_translate("MainWindow", "Debug"))
        self.menuATS_Control.setTitle(_translate("MainWindow", "ATS Control"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.loginWindow.setText(_translate("MainWindow", "Login Window"))
        # self.registerWindow.setText(_translate("MainWindow", "Register Window"))
        self.actionPP_Test_Script.setText(_translate("MainWindow", "PP Test Script"))
        self.actionIMPS_Test_Script.setText(_translate("MainWindow", "IMPS Test Script"))
        self.actionRJIL_Test_Script.setText(_translate("MainWindow", "RJIL Test Script"))
        self.actionRJIL_M2000_Test_Script.setText(_translate("MainWindow", "RJIL M2000 Test Script"))
        self.actionHardware_Management.setText(_translate("MainWindow", "Hardware Management"))
        self.actionPP_Custom_Setting.setText(_translate("MainWindow", "PP Custom Setting"))
        self.actionPP_Add_Customer.setText(_translate("MainWindow", "PP Add Customer"))
        self.actionTest_Reports.setText(_translate("MainWindow", "Test Reports"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        if not gui_global.commissioning_bit:
            self.actionCommissioning.setText(_translate("MainWindow", "Commission"))
        self.actionPFC_Control.setText(_translate("MainWindow", "PFC Control"))
        self.actionCommunication_Window.setText(_translate("MainWindow", "Communication Window"))
        self.actionTest_Order_Preference.setText(_translate("MainWindow", "Test Order Preference"))
        self.actionLogs.setText(_translate("MainWindow", "Logs"))


    def closeEvent(self, event):
        result = self.confirmClose()
        if result:
            event.accept()
        else:
            event.ignore()

    def confirmClose(self):
        return True


    def about(self):
        """ABOUT DIALOG"""
        about_window = QtWidgets.QDialog()
        about_window.ui = Ui_About()
        about_window.ui.setupUi(about_window)
        about_window.exec_()
        about_window.show()

    def testing_order(self):
        """TEST ORDER SET/GET DIALOG"""
        test_order = QtWidgets.QDialog()
        test_order.ui = Ui_Form()
        test_order.ui.setupUi(test_order)
        test_order.exec_()
        test_order.show()

    def pfc_control(self):
        """PFC SET/GET DIALOG"""
        pfc = QtWidgets.QDialog()
        pfc.ui = Ui_PFC()
        pfc.ui.setupUi(pfc)
        pfc.exec_()
        pfc.show()

    def communication_dialog(self):
        """DEVICES COMMUNICATION CHECK DIALOG"""
        comm = QtWidgets.QDialog()
        comm.ui = Ui_load()
        comm.ui.setupUi(comm)
        comm.exec_()
        comm.show()

    def test_report(self):
        """TEST REPORT DIALOG"""
        report = QtWidgets.QDialog()
        report.ui = Ui_report()
        report.ui.setupUi(report)
        report.exec_()
        report.show()

    def hardware_management(self):
        """HARDWARE MANAGEMENT DIALOG"""
        hardware = QtWidgets.QDialog()
        hardware.ui = Ui_Hardware()
        hardware.ui.setupUi(hardware)
        hardware.exec_()
        hardware.show()

    def commission(self):
        """HARDWARE MANAGEMENT DIALOG"""
        hardware = QtWidgets.QDialog()
        hardware.ui = Ui_CommissioningWindow()
        hardware.ui.setupUi(hardware)
        hardware.exec_()
        hardware.show()

    def custom_setting(self):
        """CUSTOM SETTING DIALOG"""
        custom = QtWidgets.QDialog()
        custom.ui = Ui_custom()
        custom.ui.setupUi(custom)
        custom.exec_()
        custom.show()

    def add_customer(self):
        """ADDING CUSTOMER DIALOG"""
        customer = QtWidgets.QDialog()
        customer.ui = Ui_Customer()
        customer.ui.setupUi(customer)
        customer.exec_()
        customer.show()

    def pp_script(self):
        """PP TEST SCRIPT GUI"""
        self.window_2 = QtWidgets.QMainWindow()
        self.ui_2 = Ui_Test()
        self.ui_2.setupUi(self.window_2)
        self.mdiArea.addSubWindow(self.window_2)
        self.label.hide()
        self.window_2.showMaximized()

    def imps_script(self):
        """IMPS TEST SCRIPT GUI"""
        self.window_2 = QtWidgets.QMainWindow()
        self.ui_2 = Ui_Test()
        self.ui_2.setupUi(self.window_2)
        self.mdiArea.addSubWindow(self.window_2)
        self.label.hide()
        self.ui_2.heading.setText("IMPS Production ATS")
        self.window_2.showMaximized()

    def rjil_script(self):
        """RJIL TEST SCRIPT GUI"""
        self.window_2 = QtWidgets.QMainWindow()
        self.ui_2 = Ui_Test()
        self.ui_2.setupUi(self.window_2)
        self.mdiArea.addSubWindow(self.window_2)
        self.label.hide()
        self.ui_2.heading.setText("RJIL Production ATS")
        self.window_2.showMaximized()

    def rjil_2000_script(self):
        """RJIL M2000 TEST SCRIPT GUI"""
        self.window_2 = QtWidgets.QMainWindow()
        self.ui_2 = Ui_Test()
        self.ui_2.setupUi(self.window_2)
        self.mdiArea.addSubWindow(self.window_2)
        self.label.hide()
        self.ui_2.heading.setText("RJIL M2000 Production ATS")
        self.window_2.showMaximized()

    def log_folder(self):
        import webbrowser
        webbrowser.open(f"{gui_global.directory_location}logs")

    def handle_register_window(self):
        self.register = Register()
        self.register.show()
        #self.registerWindow.triggered.connect(QtWidgets.QApplication.exit)
        # self.close()
        # self.loginWindow.triggered.connect(QtWidgets.QApplication.exit)

    def handle_login_window(self):
        #self.loginWindow.triggered.connect(QtWidgets.QApplication.exit)
        login = QtWidgets.QDialog()
        login.ui = Login()
        login.ui.setupUi(customer)
        login.exec_()
        login.show()

    def closing_function(self):
        self.close()
        if self.loginWindow.isChecked():
            self.handle_login_window()
        if self.registerWindow.isChecked():
            self.handle_register_window()


# if __name__ == "__main__":
#     import sys
#
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.showMaximized()
#     sys.exit(app.exec_())
