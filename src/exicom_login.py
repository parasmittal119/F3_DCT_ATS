# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\type.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import re
import time

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPainter, QColor, QPen
import gui_global
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLineEdit
from prompts import Prompt

import Main_window_final
from Register_login import *
from config_done import ProfileReading
from running import systemSerial
import threading


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(473, 486)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.login_button = QtWidgets.QPushButton(self.centralwidget)
        self.login_button.setGeometry(QtCore.QRect(110, 340, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.login_button.setFont(font)
        self.login_button.setStyleSheet(
            "QPushButton{ background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(20, 47, 78, 219), stop:1 rgba(85, 98, 112, 226)); color:rgba(255, 255, 255, 210);border-radius:20px;}\n"
            "\n"
            "\n"
            "QPushButton::hover{background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(40, 67, 98, 219), stop:1 rgba(105, 118, 132, 226));border-radius:20px}\n"
            "\n"
            "QPushButton::pressed{padding-left:5px;padding-top:5px; background-color:rgba(105, 118, 132, 200)}")
        self.login_button.setObjectName("login_button")
        self.image = QtWidgets.QLabel(self.centralwidget)
        self.image.setGeometry(QtCore.QRect(190, 34, 100, 100))
        self.image.setMaximumSize(QtCore.QSize(16777210, 16777215))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.image.setFont(font)
        self.image.setStyleSheet("border-radius:50px;")
        # "background-color: qlineargradient(spread:pad, x1:0.517, y1:1, x2:0.5, y2:0, stop:0.431818 rgba(255, 255, 255, 255), stop:0.488636 rgba(255, 255, 255, 0));")
        self.image.setText("")
        self.image.setPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}logo_bk.png"))
        self.image.setScaledContents(True)
        self.image.setAlignment(QtCore.Qt.AlignCenter)
        self.image.setWordWrap(True)
        self.image.setObjectName("image")
        self.edit_password = QtWidgets.QLineEdit(MainWindow)
        self.edit_password.setGeometry(QtCore.QRect(130, 250, 230, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.edit_password.setFont(font)
        self.edit_password.setStyleSheet("background-color:rgba(0,0,0,0);\n"
                                         "border:none;\n"
                                         "border-bottom:2px solid rgba(255,255,255,255);\n"
                                         "color:rgba(255,255,255,255);\n"
                                         "padding-bottom:7px")
        self.edit_password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.edit_password.setObjectName("edit_password")

        self.close_button = QtWidgets.QPushButton(self.centralwidget)
        self.close_button.setGeometry(QtCore.QRect(350, 30, 50, 30))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.close_button.setFont(font)
        self.close_button.setStyleSheet(
            "QPushButton{background-color: qlineargradient(spread:pad, x1:0.142045, y1:0.148, x2:1, y2:1, stop:0 rgba(255, 0, 0, 255), stop:0.704545 rgba(144, 0, 0, 255));border-radius:15px;}\n"
            "\n"
            "\n"
            "QPushButton::hover{background-color: qlineargradient(spread:pad, x1:0.142045, y1:0.148, x2:1, y2:1, stop:0 rgba(255, 0, 0, 255), stop:0.704545 rgba(144, 0, 0, 255));border:rgba(170,0,250,255);border-radius:15px;}\n"
            "\n"
            "\n"
            "QPushButton::pressed{padding-top:10px;padding-up:5px;background-color: qlineargradient(spread:pad, x1:0.142045, y1:0.148, x2:1, y2:1, stop:0 rgba(255, 0, 0, 255), stop:0.704545 rgba(144, 0, 0, 255));}")
        self.close_button.setObjectName("close_button")
        self.close_button.clicked.connect(self.closeFunc)

        self.background = QtWidgets.QLabel(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(75, 85, 326, 326))
        self.background.setStyleSheet("border-radius:53px; ;\n"
                                      "background-color: rgba(85, 85, 255,130);")
        self.background.setText("")
        self.background.setObjectName("background")
        self.register_button = QtWidgets.QPushButton(self.centralwidget)
        self.register_button.setGeometry(QtCore.QRect(229, 340, 141, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.register_button.setFont(font)
        self.register_button.setStyleSheet(
            "QPushButton{ background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(20, 47, 78, 219), stop:1 rgba(85, 98, 112, 226)); color:rgba(255, 255, 255, 210);border-radius:20px;}\n"
            "\n"
            "\n"
            "QPushButton::hover{background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(40, 67, 98, 219), stop:1 rgba(105, 118, 132, 226));border-radius:20px}\n"
            "\n"
            "QPushButton::pressed{padding-left:5px;padding-top:5px; background-color:rgba(105, 118, 132, 200)}")
        self.register_button.setObjectName("register_button")
        self.edit_username = QtWidgets.QLineEdit(self.centralwidget)
        self.edit_username.setGeometry(QtCore.QRect(130, 160, 230, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        font.setBold(True)
        self.edit_username.setFont(font)
        self.edit_username.setStyleSheet("background-color:rgba(0,0,0,0);\n"
                                         "border:none;\n"
                                         "border-bottom:2px solid rgba(255,255,255,255);\n"
                                         "color:rgba(255,255,255,255);\n"
                                         "padding-bottom:7px")
        self.edit_username.setObjectName("edit_username")
        self.label = QtWidgets.QLabel(MainWindow)
        self.label.setGeometry(QtCore.QRect(90, 135, 301, 271))
        self.label.setStyleSheet("border-radius:50px; ;\n"
                                 "background-color: rgba(85, 85, 255,240);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(MainWindow)
        self.label_2.setGeometry(QtCore.QRect(43, 95, 381, 271))
        self.label_2.setStyleSheet("background-color:rgba(255,255,255,0);")
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}about.png"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")

        self.pushButton = QtWidgets.QPushButton(MainWindow)
        self.pushButton.setGeometry(QtCore.QRect(330, 250, 40, 40))
        self.pushButton.setStyleSheet("background-color: rgba(0, 0, 0, 0);")
        self.pushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}show.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(40, 30))
        self.pushButton.setObjectName("pushButton")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(120, 87, 250, 41))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color:rgba(0,0,0,0); border:none; color:rgba(255,255,255,200);")
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")

        self.pushButton.pressed.connect(self.press)

        self.pushButton.released.connect(self.release)

        self.label_2.lower()
        self.background.lower()
        self.label.lower()
        self.image.raise_()
        self.edit_password.raise_()
        self.edit_username.raise_()
        self.login_button.raise_()
        self.register_button.raise_()
        self.close_button.raise_()
        self.pushButton.raise_()
        self.lineEdit.raise_()
        self.edit_username.setFocus()
        self.login_button.setDefault(True)
        self.lineEdit.setReadOnly(True)

        try:
            thread_1 = threading.Thread(target=self.italic)
            thread_1.start()
        except RuntimeError:
            thread_2 = threading.Thread(target=self.italic)
            thread_2.start()

        self.login_button.clicked.connect(self.handle_login)
        self.register_button.clicked.connect(self.handle_register_window)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.edit_username, self.edit_password)
        MainWindow.setTabOrder(self.edit_password, self.login_button)
        MainWindow.setTabOrder(self.login_button, self.register_button)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.login_button.setText(_translate("MainWindow", "Login"))
        self.edit_password.setPlaceholderText(_translate("MainWindow", "Password"))
        self.register_button.setText(_translate("MainWindow", "Register Window"))
        self.edit_username.setPlaceholderText(_translate("MainWindow", "Username"))
        self.close_button.setText(_translate("MainWindow", "X"))
        self.lineEdit.setText(_translate("MainWindow", "Login Window"))


    def italic(self):
        self.italic_value = True
        while self.italic_value:
            font = QtGui.QFont()
            font.setPointSize(24)
            font.setItalic(True)
            self.lineEdit.setFont(font)
            time.sleep(1)
            font = QtGui.QFont()
            font.setPointSize(24)
            font.setItalic(False)
            self.lineEdit.setFont(font)
            time.sleep(1)



    def press(self):
        self.edit_password.setEchoMode(QtWidgets.QLineEdit.Normal)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}hide.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)


    def release(self):
        self.edit_password.setEchoMode(QtWidgets.QLineEdit.Password)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}show.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Enter or event.key() == Qt.Key_Return:
            self.login_button.click()

    def handle_login(self):
        global password, username, user_available, login, register
        user_available = True
        if self.login_button.pressed:
            login += 1
            try:
                if self.edit_username.text() == "COMMISSIONING" and self.edit_password.text() == "COMMISSIONING":
                    gui_global.commissioning_bit = False
                    # main_window.close()
                    self.super_master_login()

                elif self.login_button.text() == "Login" and self.register_button.text() == "Register Window":


                    """TO AVOID RESTARTING OF SETUP AFTER COMMISSIONING"""
                    systemSerialNumber = systemSerial()
                    stored_value = ProfileReading('COMMISSION')['serial']
                    gui_global.commissioning_status = (systemSerialNumber == stored_value)

                    try:
                        username = ProfileReading('USERNAME')[self.edit_username.text().lower()]
                        print(username)
                        print(self.edit_username.text())
                    except KeyError:
                        username = 1
                        Prompt.Message(Prompt, "ERROR", "Username is not registered")
                        user_available = False

                    if user_available:
                        try:
                            password = ProfileReading("PASSWORDS")[self.edit_password.text().lower()]
                            print(self.edit_password.text())
                            print(password)
                        except KeyError:
                            password = 1
                            Prompt.Message(Prompt, 'Error', 'Input Password is wrong')

                    if username == 1 or password == 1:
                        pass
                    else:

                        if password != self.edit_username.text():
                            Prompt.Message(Prompt, 'Error', "Input Password is wrong!")
                        elif username == "SUPERMASTER" and password == self.edit_username.text():
                            self.super_master_login()
                        elif username == "MASTER" and password == self.edit_username.text():
                            self.master_login()
                        elif username == "ADMIN" and password == self.edit_username.text():
                            self.admin_login()
                        elif username == "USER" and password == self.edit_username.text():
                            self.user_login()
                        else:
                            Prompt.Message(Prompt, 'Error',
                                           'Username is not registered or username/password is wrong')

                    login = 0
            except KeyError:
                Prompt.Message(Prompt, 'Error', 'Username is not registered \n\nor\n\n username/password is wrong')

        if self.login_button.text() == "Register" and register == 1:
            try:
                if self.register_button.text() == "Back to Login Window" and self.login_button.text() == "Register":


                    readingprofile = configparser.ConfigParser()
                    readingprofile.read(f"{gui_global.files_directory_location}profile.txt")

                    user = readingprofile["USERNAME"]
                    pwd = readingprofile['PASSWORDS']

                    username = self.edit_username.text()

                    password = self.edit_password.text()

                    if username == '' or password == '':
                        Prompt.Message(Prompt, 'Error', "Can't Register Blank")
                    elif username in user:
                        Prompt.Message(Prompt, 'Error', "Account with this USERNAME already exist!")
                    elif username != "" or password != "":
                        if 'supermaster' in username.lower():
                            user[username.lower().split("(")[0]] = "SUPERMASTER"
                            pwd[self.edit_password.text().lower()] = self.edit_username.text().split("(")[0]
                        elif 'admin' in username.lower():
                            user[username.lower().split("(")[0]] = "ADMIN"
                            pwd[self.edit_password.text().lower()] = self.edit_username.text().split("(")[0]
                        elif 'master' in username.lower():
                            user[username.lower().split("(")[0]] = "MASTER"
                            pwd[self.edit_password.text().lower()] = self.edit_username.text().split("(")[0]
                        else:
                            user[username.lower()] = "USER"
                            pwd[self.edit_password.text().lower()] = self.edit_username.text()

                        with open(f"{gui_global.files_directory_location}profile.txt", 'w') as confile:
                            readingprofile.write(confile)

                        Prompt.Message(Prompt, "Prompt", "User Registered!")
            except Exception as err:
                print(err)

    def handle_register_window(self):
        global login, register
        if self.register_button.pressed:
            register += 1

        if self.register_button.pressed and register == 1:
            self.register_button.setText("Back to Login Window")
            self.login_button.setText("Register")
            self.lineEdit.setText("Register Window")
            # self.setWindowTitle("ATS Register Window")
            # print("1. Login" + str(login), "register" + str(register))
        elif self.register_button.pressed and register == 2:
            self.register_button.setText("Register Window")
            self.login_button.setText("Login")
            self.lineEdit.setText("Login Window")
            # self.setWindowTitle("ATS Login Window")
            # print("2. Login" + str(login), "register" + str(register))

        if register == 2:
            register = 0

    def super_master_login(self):
        if not gui_global.commissioning_bit:
            print('master login')
            self.MainWindow_2 = QtWidgets.QMainWindow()
            self.ui = Main_window_final.Ui_MainWindow()
            self.ui.setupUi(self.MainWindow_2)
            self.MainWindow_2.showMaximized()

        elif gui_global.commissioning_status:
            print('master login')
            self.MainWindow_2 = QtWidgets.QMainWindow()
            self.ui = Main_window_final.Ui_MainWindow()
            self.ui.setupUi(self.MainWindow_2)
            self.MainWindow_2.showMaximized()
            # #self.ui.actionCommissioning.setDisabled(True)

        else:
            print('master login')
            self.MainWindow_2 = QtWidgets.QMainWindow()
            self.ui = Main_window_final.Ui_MainWindow()
            self.ui.setupUi(self.MainWindow_2)
            self.MainWindow_2.showMaximized()
            self.ui.menuUser.setDisabled(True)
            self.ui.menuTest_Menu.setDisabled(True)
            self.ui.menuManagement.setDisabled(True)
            self.ui.menuReports.setDisabled(True)
            self.ui.menuDebug.setDisabled(True)
            self.ui.menuATS_Control.setDisabled(True)
            # self.ui.actionCommissioning.setDisabled(True)
            Prompt.Message(Prompt, "Warning", "Setup is not commissioned with the system!")

    def master_login(self):
        if gui_global.commissioning_status:
            print('Admin login')
            self.MainWindow_2 = QtWidgets.QMainWindow()
            self.ui = Main_window_final.Ui_MainWindow()
            self.ui.setupUi(self.MainWindow_2)
            gui_global.admin_login = True
            # self.ui.actionCommissioning.setDisabled(True)
            self.MainWindow_2.showMaximized()
        else:
            print('master login')
            self.MainWindow_2 = QtWidgets.QMainWindow()
            self.ui = Main_window_final.Ui_MainWindow()
            self.ui.setupUi(self.MainWindow_2)
            self.MainWindow_2.showMaximized()
            self.ui.menuUser.setDisabled(True)
            self.ui.menuTest_Menu.setDisabled(True)
            self.ui.menuManagement.setDisabled(True)
            self.ui.menuReports.setDisabled(True)
            self.ui.menuDebug.setDisabled(True)
            self.ui.menuATS_Control.setDisabled(True)
            # self.ui.actionCommissioning.setDisabled(True)
            Prompt.Message(Prompt, "Warning", "Setup is not commissioned with the system!")

    def admin_login(self):
        if gui_global.commissioning_status:
            gui_global.admin_login = True
            print('Manager login')
            self.MainWindow_2 = QtWidgets.QMainWindow()
            self.ui = Main_window_final.Ui_MainWindow()
            self.ui.setupUi(self.MainWindow_2)
            self.ui.menuATS_Control.setDisabled(True)
            self.ui.menuDebug.setDisabled(True)
            # self.ui.actionCommissioning.setDisabled(True)
            self.MainWindow_2.showMaximized()
        else:
            print('master login')
            self.MainWindow_2 = QtWidgets.QMainWindow()
            self.ui = Main_window_final.Ui_MainWindow()
            self.ui.setupUi(self.MainWindow_2)
            self.MainWindow_2.showMaximized()
            self.ui.menuUser.setDisabled(True)
            self.ui.menuTest_Menu.setDisabled(True)
            self.ui.menuManagement.setDisabled(True)
            self.ui.menuReports.setDisabled(True)
            self.ui.menuDebug.setDisabled(True)
            self.ui.menuATS_Control.setDisabled(True)
            # self.ui.actionCommissioning.setDisabled(True)
            Prompt.Message(Prompt, "Warning", "Setup is not commissioned with the system!")

    def user_login(self):
        if gui_global.commissioning_status:
            print('Employee login')
            self.MainWindow_2 = QtWidgets.QMainWindow()
            self.ui = Main_window_final.Ui_MainWindow()
            self.ui.setupUi(self.MainWindow_2)
            self.ui.menuATS_Control.setDisabled(True)
            self.ui.menuDebug.setDisabled(True)
            self.ui.menuManagement.setDisabled(True)
            # self.ui.actionCommissioning.setDisabled(True)
            self.MainWindow_2.showMaximized()
        else:
            print('master login')
            self.MainWindow_2 = QtWidgets.QMainWindow()
            self.ui = Main_window_final.Ui_MainWindow()
            self.ui.setupUi(self.MainWindow_2)
            self.MainWindow_2.showMaximized()
            self.ui.menuUser.setDisabled(True)
            self.ui.menuTest_Menu.setDisabled(True)
            self.ui.menuManagement.setDisabled(True)
            self.ui.menuReports.setDisabled(True)
            self.ui.menuDebug.setDisabled(True)
            self.ui.menuATS_Control.setDisabled(True)
            # self.ui.actionCommissioning.setDisabled(True)
            Prompt.Message(Prompt, "Warning", "Setup is not commissioned with the system!")

    def closeFunc(self):
        self.state = False
        self.italic_value = False
        QtWidgets.QApplication.quit()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowFlags(Qt.FramelessWindowHint)
    MainWindow.setAttribute(Qt.WA_NoSystemBackground, True)
    MainWindow.setAttribute(Qt.WA_TranslucentBackground, True)
    MainWindow.show()
    sys.exit(app.exec_())
