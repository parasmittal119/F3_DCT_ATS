# -*- coding: utf-8 -*-

import pandas.errors
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QDate
from PyQt5.QtWidgets import QTableWidgetItem

from excel_automation import *
from prompts import Prompt

# Form implementation generated from reading ui file '.\report_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

global search_count, summary_count, report_count, parameters, start_date, end_date
search_count = 0
summary_count = 0
report_count = 0
from pdfCreation import Creation
import threading
import gui_global
import pandas as pd


class Ui_report(object):
    def __init__(self):
        self.Prompt = Prompt()

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(617, 535)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        Form.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}logo_1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        Form.setStyleSheet("")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(240, 20, 341, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("border: 6px solid white;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(20, 25, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.label_2.setFont(font)
        self.label_2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label_2.setStyleSheet("background-color:white")
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}exicome logo.png"))
        self.label_2.setScaledContents(True)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.scrollArea = QtWidgets.QScrollArea(Form)
        self.scrollArea.setGeometry(QtCore.QRect(20, 90, 571, 431))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 569, 429))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.startdateEdit = QtWidgets.QDateEdit(self.scrollAreaWidgetContents)
        self.startdateEdit.setGeometry(QtCore.QRect(110, 10, 110, 22))
        self.startdateEdit.setDateTime(QtCore.QDateTime(QtCore.QDate(2022, 12, 2), QtCore.QTime(0, 0, 0)))
        self.startdateEdit.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(2022, 12, 1), QtCore.QTime(0, 0, 0)))
        self.startdateEdit.setCalendarPopup(True)
        self.startdateEdit.setObjectName("startdateEdit")
        self.enddateEdit = QtWidgets.QDateEdit(self.scrollAreaWidgetContents)
        self.enddateEdit.setGeometry(QtCore.QRect(310, 10, 110, 22))
        self.enddateEdit.setDateTime(QtCore.QDateTime(QtCore.QDate(2022, 12, 3), QtCore.QTime(0, 0, 0)))
        self.enddateEdit.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(2022, 9, 14), QtCore.QTime(0, 0, 0)))
        self.enddateEdit.setCalendarPopup(True)
        self.enddateEdit.setTimeSpec(QtCore.Qt.TimeZone)
        self.enddateEdit.setObjectName("enddateEdit")
        self.labelStart = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.labelStart.setGeometry(QtCore.QRect(10, 10, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.labelStart.setFont(font)
        self.labelStart.setAlignment(QtCore.Qt.AlignCenter)
        self.labelStart.setObjectName("labelStart")
        self.labelEnd = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.labelEnd.setGeometry(QtCore.QRect(230, 10, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.labelEnd.setFont(font)
        self.labelEnd.setObjectName("labelEnd")
        self.lineEdit = QtWidgets.QLineEdit(self.scrollAreaWidgetContents)
        self.lineEdit.setGeometry(QtCore.QRect(110, 40, 91, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.scrollAreaWidgetContents)
        self.lineEdit_2.setGeometry(QtCore.QRect(310, 40, 111, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.partcheck = QtWidgets.QCheckBox(self.scrollAreaWidgetContents)
        self.partcheck.setGeometry(QtCore.QRect(10, 40, 101, 17))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.partcheck.setFont(font)
        self.partcheck.setObjectName("partcheck")
        self.serialcheck = QtWidgets.QCheckBox(self.scrollAreaWidgetContents)
        self.serialcheck.setGeometry(QtCore.QRect(210, 40, 101, 17))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.serialcheck.setFont(font)
        self.serialcheck.setObjectName("serialcheck")
        self.passcheck = QtWidgets.QCheckBox(self.scrollAreaWidgetContents)
        self.passcheck.setGeometry(QtCore.QRect(450, 10, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.passcheck.setFont(font)
        self.passcheck.setStyleSheet("color: rgb(0, 208, 0);")
        self.passcheck.setObjectName("passcheck")
        self.failcheck = QtWidgets.QCheckBox(self.scrollAreaWidgetContents)
        self.failcheck.setGeometry(QtCore.QRect(450, 40, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.failcheck.setFont(font)
        self.failcheck.setStyleSheet("color: rgb(255, 0, 0);")
        self.failcheck.setObjectName("failcheck")
        self.searchcheck = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.searchcheck.setGeometry(QtCore.QRect(440, 70, 91, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.searchcheck.setFont(font)
        self.searchcheck.setObjectName("searchcheck")
        self.searchcheck.clicked.connect(self.Search)
        self.report = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.report.setGeometry(QtCore.QRect(10, 70, 130, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.report.setFont(font)
        self.report.setObjectName("report")
        self.report.clicked.connect(self.generate_report)
        self.summary = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.summary.setGeometry(QtCore.QRect(320, 70, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.summary.setFont(font)
        self.summary.setObjectName("summary")
        self.summary.clicked.connect(self.summary_csv)
        self.tableWidget = QtWidgets.QTableWidget(self.scrollAreaWidgetContents)
        self.tableWidget.setGeometry(QtCore.QRect(10, 110, 551, 311))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.tableWidget.setFont(font)
        self.tableWidget.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.tableWidget.setAutoScrollMargin(16)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerItem)
        self.tableWidget.setGridStyle(QtCore.Qt.NoPen)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.tableWidget.horizontalHeader().setVisible(True)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(True)
        self.tableWidget.horizontalHeader().setHighlightSections(True)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(100)
        self.tableWidget.horizontalHeader().setSortIndicatorShown(True)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setVisible(True)
        self.tableWidget.verticalHeader().setCascadingSectionResizes(True)
        self.tableWidget.verticalHeader().setDefaultSectionSize(50)
        self.tableWidget.verticalHeader().setHighlightSections(True)
        self.tableWidget.verticalHeader().setSortIndicatorShown(True)
        self.tableWidget.verticalHeader().setStretchLastSection(True)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(155, 22, 91, 51))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}about.png"))
        self.label_3.setScaledContents(True)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "ATS Report"))
        self.label.setText(_translate("Form", "TYPE-2 ATS TEST REPORT"))
        self.labelStart.setText(_translate("Form", "Start Date :"))
        self.labelEnd.setText(_translate("Form", "End Date :"))
        self.partcheck.setText(_translate("Form", "Part No. :"))
        self.serialcheck.setText(_translate("Form", "Serial No.:"))
        self.passcheck.setText(_translate("Form", "PASS"))
        self.failcheck.setText(_translate("Form", "FAIL"))
        self.searchcheck.setText(_translate("Form", "Search"))
        self.report.setText(_translate("Form", "Generate Report"))
        self.summary.setText(_translate("Form", "Summary"))
        self.tableWidget.setSortingEnabled(True)
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Test ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Part Number"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Serial Number"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Result"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Date-Time"))

        desired_date = QDate(datetime.datetime.now().year, datetime.datetime.now().month, datetime.datetime.now().day)
        self.enddateEdit.setDate(desired_date)
        self.startdateEdit.setDate(desired_date)

    def Search(self):
        global start_date, end_date
        self.start_date = self.startdateEdit.date().toPyDate()
        self.end_date = self.enddateEdit.date().toPyDate()

        file = "active_" + str(SettingRead("STATION")["id"]) + ".csv"

        self.serial_number = self.lineEdit_2.text()
        self.part_number = self.lineEdit.text()

        global parameters, search_count
        search_count = 1

        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(5)

        # 0000
        if (self.passcheck.isChecked() == False) and (self.failcheck.isChecked() == False) and (
                self.partcheck.isChecked() == False) and (self.serialcheck.isChecked() == False):
            self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
        # 0001
        elif (self.passcheck.isChecked() == False) and (self.failcheck.isChecked() == False) and (
                self.partcheck.isChecked() == False) and (self.serialcheck.isChecked() == True):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all available system for particular serial number")
            if self.lineEdit_2.text() == "":
                self.Prompt.Message("Error!", "Kindly enter serial number to search!")
            else:
                parameters = self.Reading(file, "0001")
                self.tableUpdate(parameters)
        # 0010
        elif (self.passcheck.isChecked() == False) and (self.failcheck.isChecked() == False) and (
                self.partcheck.isChecked() == True) and (self.serialcheck.isChecked() == False):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all available system for particular part number")
            if self.lineEdit.text() == "":
                self.Prompt.Message("Error!", "Kindly enter part number to search!")
            else:
                parameters = self.Reading(file, "0010")
                self.tableUpdate(parameters)
        # 0011
        elif (self.passcheck.isChecked() == False) and (self.failcheck.isChecked() == False) and (
                self.partcheck.isChecked() == True) and (self.serialcheck.isChecked() == True):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all available system for particular serial number and part number")
            if self.lineEdit.text() == "" and self.lineEdit_2.text() == "":
                self.Prompt.Message("Error!", "Kindly enter part number and serial number to search!")
            else:
                parameters = self.Reading(file, "0011")
                self.tableUpdate(parameters)
        # 0100
        elif (self.passcheck.isChecked() == False) and (self.failcheck.isChecked() == True) and (
                self.partcheck.isChecked() == False) and (self.serialcheck.isChecked() == False):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all FAIL available system")
            parameters = self.Reading(file, '0100')
            self.tableUpdate(parameters)
        # 0101
        elif (self.passcheck.isChecked() == False) and (self.failcheck.isChecked() == True) and (
                self.partcheck.isChecked() == False) and (self.serialcheck.isChecked() == True):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all FAIL available system for particular serial number")
            parameters = self.Reading(file, '0101')
            self.tableUpdate(parameters)
        # 0110
        elif (self.passcheck.isChecked() == False) and (self.failcheck.isChecked() == True) and (
                self.partcheck.isChecked() == True) and (self.serialcheck.isChecked() == False):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all FAIL available system for particular part number")
            parameters = self.Reading(file, '0110')
            self.tableUpdate(parameters)
        # 0111
        elif (self.passcheck.isChecked() == False) and (self.failcheck.isChecked() == True) and (
                self.partcheck.isChecked() == True) and (self.serialcheck.isChecked() == True):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all FAIL available system for particular serial number and part number")
            parameters = self.Reading(file, '0111')
            self.tableUpdate(parameters)
        # 1000
        elif (self.passcheck.isChecked() == True) and (self.failcheck.isChecked() == False) and (
                self.partcheck.isChecked() == False) and (self.serialcheck.isChecked() == False):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all PASS available system")
            parameters = self.Reading(file, '1000')
            self.tableUpdate(parameters)
        # 1001
        elif (self.passcheck.isChecked() == True) and (self.failcheck.isChecked() == False) and (
                self.partcheck.isChecked() == False) and (self.serialcheck.isChecked() == True):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all Pass available system for particular serial number")
            parameters = self.Reading(file, '1001')
            self.tableUpdate(parameters)
        # 1010
        elif (self.passcheck.isChecked() == True) and (self.failcheck.isChecked() == False) and (
                self.partcheck.isChecked() == True) and (self.serialcheck.isChecked() == False):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all Pass available system for particular part number")
            parameters = self.Reading(file, '1010')
            self.tableUpdate(parameters)
        # 1011
        elif (self.passcheck.isChecked() == True) and (self.failcheck.isChecked() == False) and (
                self.partcheck.isChecked() == True) and (self.serialcheck.isChecked() == True):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all Pass available system for particular part number and serial number")
            parameters = self.Reading(file, '1011')
            self.tableUpdate(parameters)
        # 1100
        elif (self.passcheck.isChecked() == True) and (self.failcheck.isChecked() == True) and (
                self.partcheck.isChecked() == False) and (self.serialcheck.isChecked() == False):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all Pass/Fail available system")
            parameters = self.Reading(file, '1100')
            self.tableUpdate(parameters)
        # 1101
        elif (self.passcheck.isChecked() == True) and (self.failcheck.isChecked() == True) and (
                self.partcheck.isChecked() == False) and (self.serialcheck.isChecked() == True):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all Pass/Fail available system for particular serial number")
            parameters = self.Reading(file, '1101')
            self.tableUpdate(parameters)
        # 1110
        elif (self.passcheck.isChecked() == True) and (self.failcheck.isChecked() == True) and (
                self.partcheck.isChecked() == True) and (self.serialcheck.isChecked() == False):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all Pass/Fail available system for particular part number")
            parameters = self.Reading(file, '1110')
            self.tableUpdate(parameters)
        # 1111
        elif (self.passcheck.isChecked() == True) and (self.failcheck.isChecked() == True) and (
                self.partcheck.isChecked() == True) and (self.serialcheck.isChecked() == True):
            # self.Prompt.Message("Error", "Kindly fill/select required checkbox to search something")
            print("Showing all Pass/Fail available system for particular part number and serial Number")
            parameters = self.Reading(file, '1111')
            self.tableUpdate(parameters)

        Prompt.Message(Prompt, "Message", "Search is complete!")

    def summary_csv(self):
        global parameters, search_count
        if search_count == 1:
            file_name = self.Create_CSV()
            for i in range(self.tableWidget.rowCount()):
                self.Update_CSV_Test_Item(file_name, [parameters[i]])
        else:
            self.Prompt.Message("Error", "Kindly Search something first!")

    def generate_report(self):
        try:
            self.report.setDisabled(True)
            self.searchcheck.setDisabled(True)
            self.summary.setDisabled(True)
            self.thread = threading.Thread(target=self.generate)
            self.thread.start()
        except RuntimeError:
            self.report.setDisabled(True)
            self.searchcheck.setDisabled(True)
            self.summary.setDisabled(True)
            self.thread_2 = threading.Thread(target=self.generate)
            self.thread_2.start()
        # self.report.setDisabled(False)
        # self.searchcheck.setDisabled(False)
        # self.summary.setDisabled(False)

    # def multiprocessingProcess(self):
    #     try:
    #         self.process = Threading.Process(target=self.generate)
    #         self.process.run()
    #     except RuntimeError:
    #         self.thread_2 = multiprocessing.Process(target=self.generate)
    #         self.thread_2.run()
    #         pass

    def generate(self):
        test_var = True
        print(datetime.datetime.now())
        while test_var:
            global parameters
            for n in range(len(parameters)):
                Creation(parameters[n][2:])

            test_var = False
        print(datetime.datetime.now())
        # self.Prompt.Message("Done!", f"{len(parameters)} Report generation completed!")
        #
        self.report.setDisabled(False)
        self.searchcheck.setDisabled(False)
        self.summary.setDisabled(False)

        # try:
        #     self.prompt_thread = threading.Thread(target=self.Prompt.Message, args=["DONE!", "Report Generation Complete!"])
        #     # self.Prompt.Message("Done!", "Report Generation Complete!")
        #     self.prompt_thread.start()
        # except:
        #     self.prompt_thread = threading.Thread(target=self.Prompt.Message, args=["DONE!", "Report Generation Complete!"])
        #     # self.Prompt.Message("Done!", "Report Generation Complete!")
        #     self.prompt_thread.start()

    def Create_CSV(self):
        station_id = str(SettingRead("STATION")["id"])
        filename = "summary_" + str(station_id) + "_" + str(get_date()) + "_" + str(datetime.datetime.now().hour) + "_" + str(datetime.datetime.now().minute) + "_" + str(datetime.datetime.now().second) + ".csv"
        # print(filename)
        PARAMETERS = "SR NO,TEST ID,CUSTOMER NAME,PART NUMBER,SERIAL NUMBER,CONFIG VERSION,M1000 MAC ID,OPERATOR,TEST DATE,TEST TIME,PHYSICAL TEST,CONTROLLER TEST,COMMUNICATION TEST,TEMPERATURE TEST,OUTPUT/INPUT PFC,DC VOLTAGE TEST,DC VOLTAGE CALIBRATION,DC CURRENT TEST,DC CURRENT CALIBRATION,LVD TEST,SMR REGISTRATION TEST,AC PHASE ALLOCATION TEST,DC CURRENT SHARING/ BUS DROP TEST,RS-485 TEST,DEFAULT SETTING,FLOAT VOLTAGE (VDC),CHARGE VOLTAGE (VDC),BATTERY LVD SET(VDC)/RESTORE(VDC),LOAD LVD SET(VDC)/RESTORE(VDC),DC VOLTAGE LOW(VDC)/RESTORE(VDC),AC LOW CUT-OFF(VAC)/CUT-IN(VAC),AC HIGH CUT-OFF(VAC)/CUT-IN(VAC),SMR COUNT/ SOLAR CHARGER COUNT,VRLA: BATTERY CAPACITY/ FACTOR,LI-ON BATTERY/ FACTOR,RESULT"
        ARR = os.listdir(f"{gui_global.directory_location}summary/")
        for file in ARR:
            if file == filename:
                return filename
        detail_file = open(f"{gui_global.directory_location}summary/" + filename, 'a')
        sys.stdout.write(PARAMETERS)
        sys.stdout.write("\n")
        detail_file.write(PARAMETERS)
        detail_file.write('\n')
        detail_file.close()
        return filename

    def Update_CSV_Test_Item(self, filename, parameter_list=None):
        if parameter_list is None:
            parameter_list = []
        if parameter_list == []:
            return None
        new_rows = parameter_list
        # print(new_rows)
        with open("..\\summary\\" + filename, 'a', newline="") as file:
            writer = csv.writer(file)
            writer.writerows(new_rows)

    def Reading(self, filename, output_type: str = ""):
        try:
            csv_filename = f"{gui_global.directory_location}records/"+filename
            data = pd.read_csv(csv_filename)
            data['TEST DATE'] = pd.to_datetime(data['TEST DATE'])
            start_date = pd.to_datetime(self.start_date)
            end_date = pd.to_datetime(self.end_date)
            selected_data = data[(data['TEST DATE'] >= start_date) & (data['TEST DATE'] <= end_date)]

            # print(selected_data)

            df = pd.DataFrame(selected_data)
            df.to_csv(f"{gui_global.directory_location}records/sample.csv")

            with open(f"{gui_global.directory_location}records/sample.csv", 'r') as csv_file:
                readfile = csv.reader(csv_file)
                header = next(readfile, None)
                # print(header)
                parameter = []

                if output_type == "0001":
                    for row in readfile:
                        if self.serial_number == row[4]:
                            parameter.append(row)

                elif output_type == "0010":
                    for row in readfile:
                        print(row)
                        if self.part_number == row[3]:
                            parameter.append(row)

                elif output_type == "0011":
                    for row in readfile:
                        if self.part_number == row[3] and self.serial_number == row[4]:
                            parameter.append(row)

                elif output_type == "0100":
                    for row in readfile:
                        if "FAIL" == row[-1]:
                            parameter.append(row)

                elif output_type == "0101":
                    for row in readfile:
                        if "FAIL" == row[-1] and self.serial_number == row[4]:
                            parameter.append(row)

                elif output_type == "0110":
                    for row in readfile:
                        if "FAIL" == row[-1] and self.part_number == row[3]:
                            parameter.append(row)

                elif output_type == "0111":
                    for row in readfile:
                        if "FAIL" == row[-1] and self.serial_number == row[4] and self.serial_number == row[3]:
                            parameter.append(row)

                elif output_type == "1000":
                    for row in readfile:
                        if "PASS" == row[-1]:
                            parameter.append(row)

                elif output_type == "1001":
                    for row in readfile:
                        if "PASS" == row[-1] and self.serial_number == row[4]:
                            parameter.append(row)

                elif output_type == "1010":
                    for row in readfile:
                        if "PASS" == row[-1] and self.part_number == row[3]:
                            parameter.append(row)

                elif output_type == "1011":
                    for row in readfile:
                        if "PASS" == row[-1] and self.part_number == row[3] and self.serial_number == row[4]:
                            parameter.append(row)

                elif output_type == "1100":
                    for row in readfile:
                        if "PASS" == row[-1] or "FAIL" == row[-1]:
                            parameter.append(row)

                elif output_type == "1101":
                    for row in readfile:
                        if ("PASS" == row[-1] or "FAIL" == row[-1]) and self.serial_number == row[4]:
                            parameter.append(row)

                elif output_type == "1110":
                    for row in readfile:
                        if ("PASS" == row[-1] or "FAIL" == row[-1]) and self.part_number == row[3]:
                            parameter.append(row)

                elif output_type == "1111":
                    for row in readfile:
                        if ("PASS" == row[-1] or "FAIL" == row[-1]) and self.serial_number == row[4] and self.part_number == row[3]:
                            parameter.append(row)
            return parameter

        except pandas.errors.EmptyDataError as e:
            print(e)
            Prompt.Message(Prompt, "Warning", "File is empty!")

        except Exception as e:
            print(e)
            Prompt.Message(Prompt, "Warning", f"Following error Occurred {e}")



    def tableUpdate(self, parameters):
        if parameters is None:
            self.Prompt.Message("Warning", "File is empty!")
        elif parameters is not None:
            self.tableWidget.setRowCount(len(parameters))
            for i in range(len(parameters)):
                self.tableWidget.setItem(i, 0, QTableWidgetItem(parameters[i][1]))
                self.tableWidget.item(i, 0).setTextAlignment(Qt.AlignCenter)

            for i in range(len(parameters)):
                self.tableWidget.setItem(i, 1, QTableWidgetItem(parameters[i][3]))
                self.tableWidget.item(i, 1).setTextAlignment(Qt.AlignCenter)

            for i in range(len(parameters)):
                self.tableWidget.setItem(i, 2, QTableWidgetItem(parameters[i][4]))
                self.tableWidget.item(i, 2).setTextAlignment(Qt.AlignCenter)

            for i in range(len(parameters)):
                self.tableWidget.setItem(i, 3, QTableWidgetItem(parameters[i][-1]))
                self.tableWidget.item(i, 3).setTextAlignment(Qt.AlignCenter)

            for i in range(len(parameters)):
                self.tableWidget.setItem(i, 4, QTableWidgetItem(parameters[i][8] + " " + parameters[i][9]))
                self.tableWidget.item(i, 4).setTextAlignment(Qt.AlignCenter)



if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_report()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
