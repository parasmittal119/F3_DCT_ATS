# -*- coding: utf-8 -*-
import configparser

# Form implementation generated from reading ui file '.\Hardware Configuration.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from config_done import *
from prompts import Prompt

count = 0


class Ui_Hardware(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(878, 529)
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 851, 481))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.DBPass_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.DBPass_checkbox.setEnabled(True)
        self.DBPass_checkbox.setGeometry(QtCore.QRect(10, 170, 93, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DBPass_checkbox.setFont(font)
        self.DBPass_checkbox.setObjectName("DBPass_checkbox")
        self.CanDevice_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.CanDevice_checkbox.setEnabled(True)
        self.CanDevice_checkbox.setGeometry(QtCore.QRect(10, 200, 86, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CanDevice_checkbox.setFont(font)
        self.CanDevice_checkbox.setObjectName("CanDevice_checkbox")
        self.CanID_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.CanID_checkbox.setEnabled(True)
        self.CanID_checkbox.setGeometry(QtCore.QRect(10, 230, 102, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CanID_checkbox.setFont(font)
        self.CanID_checkbox.setObjectName("CanID_checkbox")
        self.CanBit_check = QtWidgets.QCheckBox(self.groupBox)
        self.CanBit_check.setEnabled(True)
        self.CanBit_check.setGeometry(QtCore.QRect(10, 260, 93, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CanBit_check.setFont(font)
        self.CanBit_check.setObjectName("CanBit_check")
        self.RSLower_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.RSLower_checkbox.setEnabled(True)
        self.RSLower_checkbox.setGeometry(QtCore.QRect(10, 290, 123, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.RSLower_checkbox.setFont(font)
        self.RSLower_checkbox.setObjectName("RSLower_checkbox")
        self.RSUpper_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.RSUpper_checkbox.setEnabled(True)
        self.RSUpper_checkbox.setGeometry(QtCore.QRect(10, 320, 122, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.RSUpper_checkbox.setFont(font)
        self.RSUpper_checkbox.setObjectName("RSUpper_checkbox")
        self.RSLowerPort_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.RSLowerPort_checkbox.setEnabled(True)
        self.RSLowerPort_checkbox.setGeometry(QtCore.QRect(10, 350, 92, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.RSLowerPort_checkbox.setFont(font)
        self.RSLowerPort_checkbox.setObjectName("RSLowerPort_checkbox")
        self.RSLowerBaud_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.RSLowerBaud_checkbox.setEnabled(True)
        self.RSLowerBaud_checkbox.setGeometry(QtCore.QRect(10, 380, 145, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.RSLowerBaud_checkbox.setFont(font)
        self.RSLowerBaud_checkbox.setObjectName("RSLowerBaud_checkbox")
        self.RSUpperPort_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.RSUpperPort_checkbox.setEnabled(True)
        self.RSUpperPort_checkbox.setGeometry(QtCore.QRect(10, 410, 92, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.RSUpperPort_checkbox.setFont(font)
        self.RSUpperPort_checkbox.setObjectName("RSUpperPort_checkbox")
        self.RSUpperBaud_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.RSUpperBaud_checkbox.setEnabled(True)
        self.RSUpperBaud_checkbox.setGeometry(QtCore.QRect(10, 440, 145, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.RSUpperBaud_checkbox.setFont(font)
        self.RSUpperBaud_checkbox.setObjectName("RSUpperBaud_checkbox")
        self.LoadComm_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.LoadComm_checkbox.setEnabled(True)
        self.LoadComm_checkbox.setGeometry(QtCore.QRect(420, 170, 119, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.LoadComm_checkbox.setFont(font)
        self.LoadComm_checkbox.setObjectName("LoadComm_checkbox")
        self.DCLoadGPIB_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.DCLoadGPIB_checkbox.setEnabled(True)
        self.DCLoadGPIB_checkbox.setGeometry(QtCore.QRect(420, 200, 98, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DCLoadGPIB_checkbox.setFont(font)
        self.DCLoadGPIB_checkbox.setObjectName("DCLoadGPIB_checkbox")
        self.BatteryLoadGPIB_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.BatteryLoadGPIB_checkbox.setEnabled(True)
        self.BatteryLoadGPIB_checkbox.setGeometry(QtCore.QRect(420, 230, 123, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.BatteryLoadGPIB_checkbox.setFont(font)
        self.BatteryLoadGPIB_checkbox.setObjectName("BatteryLoadGPIB_checkbox")
        self.DCLoadUSB_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.DCLoadUSB_checkbox.setEnabled(True)
        self.DCLoadUSB_checkbox.setGeometry(QtCore.QRect(420, 260, 94, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DCLoadUSB_checkbox.setFont(font)
        self.DCLoadUSB_checkbox.setObjectName("DCLoadUSB_checkbox")
        self.BatteryLoadUSB_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.BatteryLoadUSB_checkbox.setEnabled(True)
        self.BatteryLoadUSB_checkbox.setGeometry(QtCore.QRect(420, 290, 119, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.BatteryLoadUSB_checkbox.setFont(font)
        self.BatteryLoadUSB_checkbox.setObjectName("BatteryLoadUSB_checkbox")
        self.PowerMeterUSB_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.PowerMeterUSB_checkbox.setEnabled(True)
        self.PowerMeterUSB_checkbox.setGeometry(QtCore.QRect(420, 320, 136, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.PowerMeterUSB_checkbox.setFont(font)
        self.PowerMeterUSB_checkbox.setObjectName("PowerMeterUSB_checkbox")
        self.CROComm_Checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.CROComm_Checkbox.setEnabled(True)
        self.CROComm_Checkbox.setGeometry(QtCore.QRect(420, 350, 131, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CROComm_Checkbox.setFont(font)
        self.CROComm_Checkbox.setObjectName("CROComm_Checkbox")
        self.CROBaud_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.CROBaud_checkbox.setEnabled(True)
        self.CROBaud_checkbox.setGeometry(QtCore.QRect(420, 380, 151, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CROBaud_checkbox.setFont(font)
        self.CROBaud_checkbox.setObjectName("CROBaud_checkbox")
        self.BarCode_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.BarCode_checkbox.setEnabled(True)
        self.BarCode_checkbox.setGeometry(QtCore.QRect(420, 410, 115, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.BarCode_checkbox.setFont(font)
        self.BarCode_checkbox.setObjectName("BarCode_checkbox")
        self.ATSLoad_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.ATSLoad_checkbox.setEnabled(True)
        self.ATSLoad_checkbox.setGeometry(QtCore.QRect(420, 140, 113, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ATSLoad_checkbox.setFont(font)
        self.ATSLoad_checkbox.setObjectName("ATSLoad_checkbox")
        self.ACSourceCommType_chechbox = QtWidgets.QCheckBox(self.groupBox)
        self.ACSourceCommType_chechbox.setEnabled(True)
        self.ACSourceCommType_chechbox.setGeometry(QtCore.QRect(420, 50, 161, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ACSourceCommType_chechbox.setFont(font)
        self.ACSourceCommType_chechbox.setObjectName("ACSourceCommType_checkbox")
        self.ACSourceGPIB_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.ACSourceGPIB_checkbox.setEnabled(True)
        self.ACSourceGPIB_checkbox.setGeometry(QtCore.QRect(420, 80, 110, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ACSourceGPIB_checkbox.setFont(font)
        self.ACSourceGPIB_checkbox.setObjectName("ACSourceGPIB_checkbox")
        self.ACSourceUSB_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.ACSourceUSB_checkbox.setEnabled(True)
        self.ACSourceUSB_checkbox.setGeometry(QtCore.QRect(420, 110, 122, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ACSourceUSB_checkbox.setFont(font)
        self.ACSourceUSB_checkbox.setObjectName("ACSourceUSB_checkbox")
        self.DBUser_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.DBUser_checkbox.setEnabled(True)
        self.DBUser_checkbox.setGeometry(QtCore.QRect(10, 140, 65, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DBUser_checkbox.setFont(font)
        self.DBUser_checkbox.setObjectName("DBUser_checkbox")
        self.TelnetPassword_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.TelnetPassword_checkbox.setEnabled(True)
        self.TelnetPassword_checkbox.setGeometry(QtCore.QRect(10, 110, 114, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TelnetPassword_checkbox.setFont(font)
        self.TelnetPassword_checkbox.setObjectName("TelnetPassword_checkbox")
        self.TelnetUser_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.TelnetUser_checkbox.setEnabled(True)
        self.TelnetUser_checkbox.setGeometry(QtCore.QRect(10, 80, 87, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TelnetUser_checkbox.setFont(font)
        self.TelnetUser_checkbox.setObjectName("TelnetUser_checkbox")
        self.IP_checkbox = QtWidgets.QCheckBox(self.groupBox)
        self.IP_checkbox.setEnabled(True)
        self.IP_checkbox.setGeometry(QtCore.QRect(10, 50, 81, 18))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.IP_checkbox.setFont(font)
        self.IP_checkbox.setObjectName("IP_checkbox")
        self.CanDevice_combo = QtWidgets.QComboBox(self.groupBox)
        self.CanDevice_combo.setGeometry(QtCore.QRect(170, 200, 201, 22))
        self.CanDevice_combo.setObjectName("CanDevice_combo")
        self.CanDevice_combo.addItem("ixxat")
        self.RSLower_combo = QtWidgets.QComboBox(self.groupBox)
        self.RSLower_combo.setGeometry(QtCore.QRect(170, 290, 201, 22))
        self.RSLower_combo.setObjectName("RSLower_combo")
        self.RSUpper_combo = QtWidgets.QComboBox(self.groupBox)
        self.RSUpper_combo.setGeometry(QtCore.QRect(170, 320, 201, 22))
        self.RSUpper_combo.setObjectName("RSUpper_combo")
        self.RSLowerPort_combo = QtWidgets.QComboBox(self.groupBox)
        self.RSLowerPort_combo.setGeometry(QtCore.QRect(170, 350, 201, 22))
        self.RSLowerPort_combo.setObjectName("RSLowerPort_combo")
        self.RSUpperPort_combo = QtWidgets.QComboBox(self.groupBox)
        self.RSUpperPort_combo.setGeometry(QtCore.QRect(170, 410, 201, 22))
        self.RSUpperPort_combo.setObjectName("RSUpperPort_combo")
        self.ATSLoad_combo = QtWidgets.QComboBox(self.groupBox)
        self.ATSLoad_combo.setGeometry(QtCore.QRect(600, 140, 201, 22))
        self.ATSLoad_combo.setObjectName("ATSLoad_combo")
        self.ATSLoad_combo.addItem("1")
        self.ATSLoad_combo.addItem("2")
        self.ATSLoad_combo.addItem("3")
        self.ATSLoad_combo.addItem("4")
        self.ATSLoad_combo.addItem("5")
        self.LoadComm_combo = QtWidgets.QComboBox(self.groupBox)
        self.LoadComm_combo.setGeometry(QtCore.QRect(600, 170, 201, 22))
        self.LoadComm_combo.setObjectName("LoadComm_combo")
        self.LoadComm_combo.addItem("GPIB")
        self.LoadComm_combo.addItem("USB")
        self.LoadComm_combo.addItem("Ethernet")
        self.DCLoadUSB_combo = QtWidgets.QComboBox(self.groupBox)
        self.DCLoadUSB_combo.setGeometry(QtCore.QRect(600, 260, 201, 22))
        self.DCLoadUSB_combo.setObjectName("DCLoadUSB_combo")
        self.BatteryLoadUSB_combo = QtWidgets.QComboBox(self.groupBox)
        self.BatteryLoadUSB_combo.setGeometry(QtCore.QRect(600, 290, 201, 22))
        self.BatteryLoadUSB_combo.setObjectName("BatteryLoadUSB_combo")
        self.PowerMeterUSB_combo = QtWidgets.QComboBox(self.groupBox)
        self.PowerMeterUSB_combo.setGeometry(QtCore.QRect(600, 320, 201, 22))
        self.PowerMeterUSB_combo.setObjectName("PowerMeterUSB_combo")
        self.CROComm_combo = QtWidgets.QComboBox(self.groupBox)
        self.CROComm_combo.setGeometry(QtCore.QRect(600, 350, 201, 22))
        self.CROComm_combo.setObjectName("CROComm_combo")
        self.ACSourceCommType_combo = QtWidgets.QComboBox(self.groupBox)
        self.ACSourceCommType_combo.setGeometry(QtCore.QRect(600, 50, 201, 22))
        self.ACSourceCommType_combo.setObjectName("ACSourceCommType_combo")
        self.ACSourceCommType_combo.addItem("GPIB")
        self.ACSourceCommType_combo.addItem("USB")
        self.ACSourceCommType_combo.addItem("Ethernet")
        self.CanID_edit = QtWidgets.QLineEdit(self.groupBox)
        self.CanID_edit.setGeometry(QtCore.QRect(170, 230, 201, 21))
        self.CanID_edit.setObjectName("CanID_edit")
        self.CanBit_edit = QtWidgets.QLineEdit(self.groupBox)
        self.CanBit_edit.setGeometry(QtCore.QRect(170, 260, 201, 21))
        self.CanBit_edit.setObjectName("CanBit_edit")
        self.RSLowerBaud_edit = QtWidgets.QLineEdit(self.groupBox)
        self.RSLowerBaud_edit.setGeometry(QtCore.QRect(170, 380, 201, 21))
        self.RSLowerBaud_edit.setObjectName("RSLowerBaud_edit")
        self.RSUpperBaud_edit = QtWidgets.QLineEdit(self.groupBox)
        self.RSUpperBaud_edit.setGeometry(QtCore.QRect(170, 440, 201, 21))
        self.RSUpperBaud_edit.setObjectName("RSUpperBaud_edit")
        self.IP_edit = QtWidgets.QLineEdit(self.groupBox)
        self.IP_edit.setGeometry(QtCore.QRect(170, 50, 201, 21))
        self.IP_edit.setObjectName("IP_edit")
        self.DBPass_edit = QtWidgets.QLineEdit(self.groupBox)
        self.DBPass_edit.setGeometry(QtCore.QRect(170, 170, 201, 21))
        self.DBPass_edit.setObjectName("DBPass_edit")
        self.TelnetUser_edit = QtWidgets.QLineEdit(self.groupBox)
        self.TelnetUser_edit.setGeometry(QtCore.QRect(170, 80, 201, 21))
        self.TelnetUser_edit.setObjectName("TelnetUser_edit")
        self.DBUser_edit = QtWidgets.QLineEdit(self.groupBox)
        self.DBUser_edit.setGeometry(QtCore.QRect(170, 140, 201, 21))
        self.DBUser_edit.setObjectName("DBUser_edit")
        self.TelnetPass_edit = QtWidgets.QLineEdit(self.groupBox)
        self.TelnetPass_edit.setGeometry(QtCore.QRect(170, 110, 201, 21))
        self.TelnetPass_edit.setObjectName("TelnetPass_edit")
        self.CROBaud_edit = QtWidgets.QLineEdit(self.groupBox)
        self.CROBaud_edit.setGeometry(QtCore.QRect(600, 380, 201, 21))
        self.CROBaud_edit.setObjectName("CROBaud_edit")
        self.DCLoadGPIB_edit = QtWidgets.QLineEdit(self.groupBox)
        self.DCLoadGPIB_edit.setGeometry(QtCore.QRect(600, 200, 201, 21))
        self.DCLoadGPIB_edit.setObjectName("DCLoadGPIB_edit")
        self.ACSourceGPIB_edit = QtWidgets.QLineEdit(self.groupBox)
        self.ACSourceGPIB_edit.setGeometry(QtCore.QRect(600, 80, 201, 21))
        self.ACSourceGPIB_edit.setObjectName("ACSourceGPIB_edit")
        self.ACSourceUSB_edit = QtWidgets.QLineEdit(self.groupBox)
        self.ACSourceUSB_edit.setGeometry(QtCore.QRect(600, 110, 201, 21))
        self.ACSourceUSB_edit.setObjectName("ACSourceUSB_edit")
        self.BatteryLoadGPIB_edit = QtWidgets.QLineEdit(self.groupBox)
        self.BatteryLoadGPIB_edit.setGeometry(QtCore.QRect(600, 230, 201, 21))
        self.BatteryLoadGPIB_edit.setObjectName("BatteryLoadGPIB_edit")
        self.BarCode_edit = QtWidgets.QLineEdit(self.groupBox)
        self.BarCode_edit.setGeometry(QtCore.QRect(600, 410, 201, 21))
        self.BarCode_edit.setObjectName("BarCode_edit")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setGeometry(QtCore.QRect(710, 445, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(570, 445, 100, 30))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.WriteValues)
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(440, 445, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(430, 500, 411, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("border:2px solid red")
        self.label_4.setObjectName("label_4")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(20, 500, 301, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("border:2px solid green")
        self.label_2.setObjectName("label_2")

        self.pushButton.hide()
        self.pushButton_3.hide()

        font = QtGui.QFont()
        font.setPointSize(8)

        self.IP_checkbox.setFont(font)
        self.IP_edit.setFont(font)
        self.TelnetUser_checkbox.setFont(font)
        self.TelnetPassword_checkbox.setFont(font)
        self.TelnetPass_edit.setFont(font)
        self.TelnetUser_edit.setFont(font)
        self.DBUser_checkbox.setFont(font)
        self.DBUser_edit.setFont(font)
        self.DBPass_checkbox.setFont(font)
        self.DBPass_edit.setFont(font)
        self.CanDevice_checkbox.setFont(font)
        self.CanDevice_combo.setFont(font)
        self.CanID_checkbox.setFont(font)
        self.CanID_edit.setFont(font)
        self.CanBit_check.setFont(font)
        self.CanBit_edit.setFont(font)
        self.RSLower_checkbox.setFont(font)
        self.RSLowerPort_combo.setFont(font)
        self.RSLower_combo.setFont(font)
        self.RSLowerPort_checkbox.setFont(font)
        self.RSLowerBaud_checkbox.setFont(font)
        self.RSLowerBaud_edit.setFont(font)
        self.RSUpper_checkbox.setFont(font)
        self.RSUpper_combo.setFont(font)
        self.RSUpperPort_combo.setFont(font)
        self.RSUpperPort_checkbox.setFont(font)
        self.RSUpperBaud_checkbox.setFont(font)
        self.RSUpperBaud_edit.setFont(font)
        self.ACSourceCommType_chechbox.setFont(font)
        self.ACSourceCommType_combo.setFont(font)
        self.ACSourceGPIB_edit.setFont(font)
        self.ACSourceGPIB_checkbox.setFont(font)
        self.ACSourceUSB_checkbox.setFont(font)
        self.ACSourceUSB_edit.setFont(font)
        self.ATSLoad_checkbox.setFont(font)
        self.ATSLoad_combo.setFont(font)
        self.LoadComm_checkbox.setFont(font)
        self.LoadComm_combo.setFont(font)
        self.DCLoadGPIB_checkbox.setFont(font)
        self.DCLoadGPIB_edit.setFont(font)
        self.DCLoadUSB_checkbox.setFont(font)
        self.DCLoadUSB_combo.setFont(font)
        self.BatteryLoadUSB_checkbox.setFont(font)
        self.BatteryLoadGPIB_checkbox.setFont(font)
        self.BatteryLoadGPIB_edit.setFont(font)
        self.BatteryLoadUSB_combo.setFont(font)
        self.PowerMeterUSB_checkbox.setFont(font)
        self.PowerMeterUSB_combo.setFont(font)
        self.CROBaud_checkbox.setFont(font)
        self.CROBaud_edit.setFont(font)
        self.CROComm_combo.setFont(font)
        self.CROComm_Checkbox.setFont(font)
        self.BarCode_checkbox.setFont(font)
        self.BarCode_edit.setFont(font)

        Form.setTabOrder(self.IP_checkbox, self.IP_edit)
        Form.setTabOrder(self.IP_edit, self.TelnetUser_checkbox)
        Form.setTabOrder(self.TelnetUser_checkbox, self.TelnetUser_edit)
        Form.setTabOrder(self.TelnetUser_edit, self.TelnetPassword_checkbox)
        Form.setTabOrder(self.TelnetPassword_checkbox, self.TelnetPass_edit)
        Form.setTabOrder(self.TelnetPass_edit, self.DBUser_checkbox)
        Form.setTabOrder(self.DBUser_checkbox, self.DBUser_edit)
        Form.setTabOrder(self.DBUser_edit, self.DBPass_checkbox)
        Form.setTabOrder(self.DBPass_checkbox, self.DBPass_edit)
        Form.setTabOrder(self.DBPass_edit, self.CanDevice_checkbox)
        Form.setTabOrder(self.CanDevice_checkbox, self.CanDevice_combo)
        Form.setTabOrder(self.CanDevice_combo, self.CanID_checkbox)
        Form.setTabOrder(self.CanID_checkbox, self.CanID_edit)
        Form.setTabOrder(self.CanID_edit, self.CanBit_check)
        Form.setTabOrder(self.CanBit_check, self.CanBit_edit)
        Form.setTabOrder(self.CanBit_edit, self.RSLower_checkbox)
        Form.setTabOrder(self.RSLower_checkbox, self.RSLower_combo)
        Form.setTabOrder(self.RSLower_combo, self.RSUpper_checkbox)
        Form.setTabOrder(self.RSUpper_checkbox, self.RSUpper_combo)
        Form.setTabOrder(self.RSUpper_combo, self.RSLowerPort_checkbox)
        Form.setTabOrder(self.RSLowerPort_checkbox, self.RSLowerPort_combo)
        Form.setTabOrder(self.RSLowerPort_combo, self.RSLowerBaud_checkbox)
        Form.setTabOrder(self.RSLowerBaud_checkbox, self.RSLowerBaud_edit)
        Form.setTabOrder(self.RSLowerBaud_edit, self.RSUpperPort_checkbox)
        Form.setTabOrder(self.RSUpperPort_checkbox, self.RSUpperPort_combo)
        Form.setTabOrder(self.RSUpperPort_combo, self.RSUpperBaud_checkbox)
        Form.setTabOrder(self.RSUpperBaud_checkbox, self.RSUpperBaud_edit)
        Form.setTabOrder(self.RSUpperBaud_edit, self.ACSourceCommType_chechbox)
        Form.setTabOrder(self.ACSourceCommType_chechbox, self.ACSourceCommType_combo)
        Form.setTabOrder(self.ACSourceCommType_combo, self.ACSourceGPIB_checkbox)
        Form.setTabOrder(self.ACSourceGPIB_checkbox, self.ACSourceGPIB_edit)
        Form.setTabOrder(self.ACSourceGPIB_edit, self.ACSourceUSB_checkbox)
        Form.setTabOrder(self.ACSourceUSB_checkbox, self.ACSourceUSB_edit)
        Form.setTabOrder(self.ACSourceUSB_edit, self.ATSLoad_checkbox)
        Form.setTabOrder(self.ATSLoad_checkbox, self.ATSLoad_combo)
        Form.setTabOrder(self.ATSLoad_combo, self.LoadComm_checkbox)
        Form.setTabOrder(self.LoadComm_checkbox, self.LoadComm_combo)
        Form.setTabOrder(self.LoadComm_combo, self.DCLoadGPIB_checkbox)
        Form.setTabOrder(self.DCLoadGPIB_checkbox, self.DCLoadGPIB_edit)
        Form.setTabOrder(self.DCLoadGPIB_edit, self.BatteryLoadGPIB_checkbox)
        Form.setTabOrder(self.BatteryLoadGPIB_checkbox, self.BatteryLoadGPIB_edit)
        Form.setTabOrder(self.BatteryLoadGPIB_edit, self.DCLoadUSB_checkbox)
        Form.setTabOrder(self.DCLoadUSB_checkbox, self.DCLoadUSB_combo)
        Form.setTabOrder(self.DCLoadUSB_combo, self.BatteryLoadUSB_checkbox)
        Form.setTabOrder(self.BatteryLoadUSB_checkbox, self.BatteryLoadUSB_combo)
        Form.setTabOrder(self.BatteryLoadUSB_combo, self.PowerMeterUSB_checkbox)
        Form.setTabOrder(self.PowerMeterUSB_checkbox, self.PowerMeterUSB_combo)
        Form.setTabOrder(self.PowerMeterUSB_combo, self.CROComm_Checkbox)
        Form.setTabOrder(self.CROComm_Checkbox, self.CROComm_combo)
        Form.setTabOrder(self.CROComm_combo, self.CROBaud_checkbox)
        Form.setTabOrder(self.CROBaud_checkbox, self.CROBaud_edit)
        Form.setTabOrder(self.CROBaud_edit, self.BarCode_checkbox)
        Form.setTabOrder(self.BarCode_checkbox, self.BarCode_edit)
        Form.setTabOrder(self.BarCode_edit, self.pushButton_2)
        Form.setTabOrder(self.pushButton_2, self.IP_checkbox)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        import gui_global
        if gui_global.admin_login:
            self.pushButton_2.hide()

        self.FunctionState(self, False)

        self.ReadValues()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Hardware Configuration"))
        self.groupBox.setTitle(_translate("Form", "Hardware Configuration"))
        self.DBPass_checkbox.setText(_translate("Form", "DB Password"))
        self.CanDevice_checkbox.setText(_translate("Form", "CAN Device"))
        self.CanID_checkbox.setText(_translate("Form", "CAN Device ID"))
        self.CanBit_check.setText(_translate("Form", "CAN Bit Rate"))
        self.RSLower_checkbox.setText(_translate("Form", "RS485 Lower Port"))
        self.RSUpper_checkbox.setText(_translate("Form", "RS485 Upper Port"))
        self.RSLowerPort_checkbox.setText(_translate("Form", "Modbus Port1"))
        self.RSLowerBaud_checkbox.setText(_translate("Form", "Modbus Port1 Baudrate"))
        self.RSUpperPort_checkbox.setText(_translate("Form", "Modbus Port2"))
        self.RSUpperBaud_checkbox.setText(_translate("Form", "Modbus Port2 Baudrate"))
        self.LoadComm_checkbox.setText(_translate("Form", "Load Comm Type"))
        self.DCLoadGPIB_checkbox.setText(_translate("Form", "DC Load GPIB"))
        self.BatteryLoadGPIB_checkbox.setText(_translate("Form", "Battery Load GPIB"))
        self.DCLoadUSB_checkbox.setText(_translate("Form", "DC Load USB"))
        self.BatteryLoadUSB_checkbox.setText(_translate("Form", "Battery Load USB"))
        self.PowerMeterUSB_checkbox.setText(_translate("Form", "Power Meter USB ID"))
        self.CROComm_Checkbox.setText(_translate("Form", "CRO Comm Port"))
        self.CROBaud_checkbox.setText(_translate("Form", "CRO Comm Baudrate"))
        self.BarCode_checkbox.setText(_translate("Form", "Bar Code Length"))
        self.ATSLoad_checkbox.setText(_translate("Form", "ATS Load Count"))
        self.ACSourceCommType_chechbox.setText(_translate("Form", "AC Source Comm Type"))
        self.ACSourceGPIB_checkbox.setText(_translate("Form", "AC Source GPIB"))
        self.ACSourceUSB_checkbox.setText(_translate("Form", "AC Source USB ID"))
        self.DBUser_checkbox.setText(_translate("Form", "DB user"))
        self.TelnetPassword_checkbox.setText(_translate("Form", "Telnet Password"))
        self.TelnetUser_checkbox.setText(_translate("Form", "Telnet User"))
        self.IP_checkbox.setText(_translate("Form", "IP Address"))
        self.pushButton_3.setText(_translate("Form", "Cancel"))
        self.pushButton_2.setText(_translate("Form", "Change"))
        self.pushButton.setText(_translate("Form", "Change "))
        self.label_4.setText(_translate("Form", "WARNING: These values will over ride setting file values."))
        self.label_2.setText(_translate("Form", "NOTE: Leave check blank in case of no value"))

    def ReadValues(self):
        """

        SETTING CALLING

        """

        SectionCall = SettingRead('SETTING')

        ip_address = SectionCall['m1000_ip address']
        self.IP_edit.setText(ip_address)

        TelnetUser = SectionCall['m1000_user']
        self.TelnetUser_edit.setText(TelnetUser)

        TelnetPass = SectionCall['m1000_password']
        self.TelnetPass_edit.setText(TelnetPass)

        DBUser = SectionCall['db user']
        self.DBUser_edit.setText(DBUser)

        DBPass = SectionCall['db password']
        self.DBPass_edit.setText(DBPass)

        CAN_Device = SectionCall['can device name']
        check = 1
        for i in range(self.CanDevice_combo.count()):
            if CAN_Device in str(self.CanDevice_combo.itemText(i)):
                check = 0
                self.CanDevice_combo.setCurrentIndex(i)

        if check == 1:
            self.CanDevice_combo.setCurrentText("ixxat")

        CAN_ID = SectionCall['can device id']
        self.CanID_edit.setText(CAN_ID)

        CANBit = SectionCall['can device bitrate']
        self.CanBit_edit.setText(CANBit)

        RSLower = SectionCall['rs485 lower port']
        self.RSLower_combo.addItem(RSLower)

        RSUpper = SectionCall['rs485 upper port']
        self.RSUpper_combo.addItem(RSUpper)

        ModbusLower = SectionCall['modbus comm port']
        self.RSLowerPort_combo.addItem(ModbusLower)

        ModbusUpper = SectionCall['modbus comm port 2']
        self.RSUpperPort_combo.addItem(ModbusUpper)

        ModbusLowerBaudrate = SectionCall['modbus comm baudrate']
        self.RSLowerBaud_edit.setText(ModbusLowerBaudrate)

        ModbusUpperBaudrate = SectionCall['modbus comm baudrate 2']
        self.RSUpperBaud_edit.setText(ModbusUpperBaudrate)

        ACSourceType = SectionCall['ac source comm type']
        check = 1
        for i in range(self.ACSourceCommType_combo.count()):
            if ACSourceType in str(self.ACSourceCommType_combo.itemText(i)):
                check = 0
                self.ACSourceCommType_combo.setCurrentIndex(i)

        if check == 1:
            self.ACSourceCommType_combo.setCurrentText("GPIB")

        ACSourceGPIB = SectionCall['ac source gpib id']
        self.ACSourceGPIB_edit.setText(ACSourceGPIB)

        ACSourceUSB = SectionCall['ac source usb id']
        self.ACSourceUSB_edit.setText(ACSourceUSB)

        ATSLoad = SectionCall['ate load count']
        check = 1
        for i in range(self.ATSLoad_combo.count()):
            if ATSLoad in str(self.ATSLoad_combo.itemText(i)):
                check = 0
                self.ATSLoad_combo.setCurrentIndex(i)

        if check == 1:
            self.ATSLoad_combo.setCurrentText("1")

        LoadComm = SectionCall['ate load comm type']
        check = 1
        for i in range(self.LoadComm_combo.count()):
            if LoadComm in str(self.LoadComm_combo.itemText(i)):
                check = 0
                self.LoadComm_combo.setCurrentIndex(i)

        if check == 1:
            self.LoadComm_combo.setCurrentText("GPIB")

        DCLoadGPIB = SectionCall['dc load gpib id']
        self.DCLoadGPIB_edit.setText(DCLoadGPIB)

        BatteryLoadGPIB = SectionCall['battery load gpib id']
        self.BatteryLoadGPIB_edit.setText(BatteryLoadGPIB)

        DCLoadUSB = SectionCall['dc load usb id']
        self.DCLoadUSB_combo.addItem(DCLoadUSB)

        BatteryLoadUSB = SectionCall['battery load usb id']
        self.BatteryLoadUSB_combo.addItem(BatteryLoadUSB)

        PowerMeter = SectionCall['power meter usb id']
        self.PowerMeterUSB_combo.addItem(PowerMeter)

        CROCommPort = SectionCall['cro port']
        self.CROComm_combo.addItem(CROCommPort)

        CROBaud = SectionCall['cro baudrate']
        self.CROBaud_edit.setText(CROBaud)

        Barcode_length = SectionCall['2d matrix code']
        self.BarCode_edit.setText(Barcode_length)

        '''
        
        STATE CALLING
        
        '''

        SectionCall = SettingRead("SETTING STATE")

        ip_address = SectionCall['m1000_ip address']
        if ip_address == "YES":
            self.IP_checkbox.setChecked(True)
        else:
            self.IP_checkbox.setChecked(False)

        TelnetUser = SectionCall['m1000_user']
        if TelnetUser == "YES":
            self.TelnetUser_checkbox.setChecked(True)
        else:
            self.TelnetUser_checkbox.setChecked(False)

        TelnetPass = SectionCall['m1000_password']
        if TelnetPass == "YES":
            self.TelnetPassword_checkbox.setChecked(True)
        else:
            self.TelnetPassword_checkbox.setChecked(False)

        DBUser = SectionCall['db user']
        if DBUser == "YES":
            self.DBUser_checkbox.setChecked(True)
        else:
            self.DBUser_checkbox.setChecked(False)

        DBPass = SectionCall['db password']
        if DBPass == "YES":
            self.DBPass_checkbox.setChecked(True)
        else:
            self.DBPass_checkbox.setChecked(False)

        CAN_Device = SectionCall['can device name']
        if CAN_Device == "YES":
            self.CanDevice_checkbox.setChecked(True)
        else:
            self.CanDevice_checkbox.setChecked(False)

        CAN_ID = SectionCall['can device id']
        if CAN_ID == "YES":
            self.CanID_checkbox.setChecked(True)
        else:
            self.CanID_checkbox.setChecked(False)

        CANBit = SectionCall['can device bitrate']
        if CANBit == "YES":
            self.CanBit_check.setChecked(True)
        else:
            self.CanBit_check.setChecked(False)

        RSLower = SectionCall['rs485 lower port']
        if RSLower == "YES":
            self.RSLower_checkbox.setChecked(True)
        else:
            self.RSLower_checkbox.setChecked(False)

        RSUpper = SectionCall['rs485 upper port']
        if RSUpper == "YES":
            self.RSUpper_checkbox.setChecked(True)
        else:
            self.RSUpper_checkbox.setChecked(False)

        ModbusLower = SectionCall['modbus comm port']
        if ModbusLower == "YES":
            self.RSLowerPort_checkbox.setChecked(True)
        else:
            self.RSLowerPort_checkbox.setChecked(False)

        ModbusUpper = SectionCall['modbus comm port 2']
        if ModbusUpper == "YES":
            self.RSUpperPort_checkbox.setChecked(True)
        else:
            self.RSUpperPort_checkbox.setChecked(False)

        ModbusLowerBaudrate = SectionCall['modbus comm baudrate']
        if ModbusLowerBaudrate == "YES":
            self.RSLowerBaud_checkbox.setChecked(True)
        else:
            self.RSLowerBaud_checkbox.setChecked(False)

        ModbusUpperBaudrate = SectionCall['modbus comm baudrate 2']
        if ModbusUpperBaudrate == "YES":
            self.RSUpperBaud_checkbox.setChecked(True)
        else:
            self.RSUpperBaud_checkbox.setChecked(False)

        ACSourceType = SectionCall['ac source comm type']
        if ACSourceType == "YES":
            self.ACSourceCommType_chechbox.setChecked(True)
        else:
            self.ACSourceCommType_chechbox.setChecked(False)

        ACSourceGPIB = SectionCall['ac source gpib id']
        if ACSourceGPIB == "YES":
            self.ACSourceGPIB_checkbox.setChecked(True)
        else:
            self.ACSourceGPIB_checkbox.setChecked(False)

        ACSourceUSB = SectionCall['ac source usb id']
        if ACSourceUSB == "YES":
            self.ACSourceUSB_checkbox.setChecked(True)
        else:
            self.ACSourceUSB_checkbox.setChecked(False)

        ATSLoad = SectionCall['ate load count']
        if ATSLoad == "YES":
            self.ATSLoad_checkbox.setChecked(True)
        else:
            self.ATSLoad_checkbox.setChecked(False)

        LoadComm = SectionCall['ate load comm type']
        if LoadComm == "YES":
            self.LoadComm_checkbox.setChecked(True)
        else:
            self.LoadComm_checkbox.setChecked(False)

        DCLoadGPIB = SectionCall['dc load gpib id']
        if DCLoadGPIB == "YES":
            self.DCLoadGPIB_checkbox.setChecked(True)
        else:
            self.DCLoadGPIB_checkbox.setChecked(False)

        BatteryLoadGPIB = SectionCall['battery load gpib id']
        if BatteryLoadGPIB == "YES":
            self.BatteryLoadGPIB_checkbox.setChecked(True)
        else:
            self.BatteryLoadGPIB_checkbox.setChecked(False)

        DCLoadUSB = SectionCall['dc load usb id']
        if DCLoadUSB == "YES":
            self.DCLoadUSB_checkbox.setChecked(True)
        else:
            self.DCLoadUSB_checkbox.setChecked(False)

        BatteryLoadUSB = SectionCall['battery load usb id']
        if BatteryLoadUSB == "YES":
            self.BatteryLoadUSB_checkbox.setChecked(True)
        else:
            self.BatteryLoadUSB_checkbox.setChecked(False)

        PowerMeter = SectionCall['power meter usb id']
        if PowerMeter == "YES":
            self.PowerMeterUSB_checkbox.setChecked(True)
        else:
            self.PowerMeterUSB_checkbox.setChecked(False)

        CROCommPort = SectionCall['cro port']
        if CROCommPort == "YES":
            self.CROComm_Checkbox.setChecked(True)
        else:
            self.CROComm_Checkbox.setChecked(False)

        CROBaud = SectionCall['cro baudrate']
        if CROBaud == "YES":
            self.CROBaud_checkbox.setChecked(True)
        else:
            self.CROBaud_checkbox.setChecked(False)

        Barcode_length = SectionCall['2d matrix code']
        if Barcode_length == "YES":
            self.BarCode_checkbox.setChecked(True)
        else:
            self.BarCode_checkbox.setChecked(False)

    def WriteValues(self):
        global count

        print(count)

        if self.pushButton_2.pressed:
            count += 1

        if self.pushButton_2.text() == "Change" and count == 1:
            self.pushButton_2.setText("Apply")
            self.FunctionState(self, True)

        if self.pushButton_2.text() == "Apply" and count == 2:
            self.FunctionState(self, False)

            if self.ACSourceUSB_edit.text() == self.ACSourceGPIB_edit.text():
                Prompt.Message(Prompt, "Warning", "AC Source address can't be same")
                self.pushButton_2.setText("Change")
            elif (self.IP_edit.text() or self.TelnetPass_edit.text() or self.TelnetUser_edit.text() or self.DBUser_edit.text() or self.DBPass_edit.text() or self.CanID_edit.text() or self.CanBit_edit.text()) == "":
                Prompt.Message(Prompt, "Warning", "Can't save blanks")
                self.pushButton_2.setText("Change")
            else:
                self.pushButton_2.setText("Change")

                settingread = configparser.ConfigParser()
                settingread.read(f"{gui_global.files_directory_location}setting.txt")

                SectionCall = settingread['SETTING']

                parameter_list = [self.IP_edit.text(), self.TelnetUser_edit.text(), self.TelnetPass_edit.text(),
                                  self.IP_edit.text(), self.TelnetUser_edit.text(), self.TelnetPass_edit.text(),
                                  self.DBUser_edit.text(),
                                  self.DBPass_edit.text(), self.CanDevice_combo.currentText(), self.CanID_edit.text(),
                                  self.CanBit_edit.text(), self.RSLower_combo.currentText(),
                                  self.RSUpper_combo.currentText(), self.RSLowerPort_combo.currentText(),
                                  self.RSLowerBaud_edit.text(), self.RSUpperPort_combo.currentText(),
                                  self.RSUpperBaud_edit.text(), self.ACSourceCommType_combo.currentText(),
                                  self.ACSourceGPIB_edit.text(), self.ACSourceUSB_edit.text(),
                                  self.ATSLoad_combo.currentText(), self.LoadComm_combo.currentText(),
                                  self.DCLoadGPIB_edit.text(), self.BatteryLoadGPIB_edit.text(),
                                  self.DCLoadUSB_combo.currentText(),
                                  self.BatteryLoadUSB_combo.currentText(), self.BarCode_edit.text(),
                                  self.PowerMeterUSB_combo.currentText(), self.CROComm_combo.currentText(),
                                  self.CROBaud_edit.text()]
                i = 0
                for option in SectionCall:
                    SectionCall[option] = parameter_list[i]
                    i += 1

                SectionCall = settingread['SETTING STATE']

                parameter_state_list = [self.IP_checkbox.isChecked(), self.TelnetUser_checkbox.isChecked(),
                                        self.TelnetPassword_checkbox.isChecked(),
                                        self.IP_checkbox.isChecked(), self.TelnetUser_checkbox.isChecked(),
                                        self.TelnetPassword_checkbox.isChecked(),
                                        self.DBUser_checkbox.isChecked(),
                                        self.DBPass_checkbox.isChecked(), self.CanDevice_checkbox.isChecked(),
                                        self.CanID_checkbox.isChecked(),
                                        self.CanBit_check.isChecked(), self.RSLower_checkbox.isChecked(),
                                        self.RSUpper_checkbox.isChecked(), self.RSLowerPort_checkbox.isChecked(),
                                        self.RSLowerBaud_checkbox.isChecked(), self.RSUpperPort_checkbox.isChecked(),
                                        self.RSUpperBaud_checkbox.isChecked(), self.ACSourceCommType_chechbox.isChecked(),
                                        self.ACSourceGPIB_checkbox.isChecked(), self.ACSourceUSB_checkbox.isChecked(),
                                        self.ATSLoad_checkbox.isChecked(), self.LoadComm_checkbox.isChecked(),
                                        self.DCLoadGPIB_checkbox.isChecked(), self.BatteryLoadGPIB_checkbox.isChecked(),
                                        self.DCLoadUSB_checkbox.isChecked(),
                                        self.BatteryLoadUSB_checkbox.isChecked(), self.BarCode_checkbox.isChecked(),
                                        self.PowerMeterUSB_checkbox.isChecked(), self.CROComm_Checkbox.isChecked(),
                                        self.CROBaud_checkbox.isChecked()]

                i = 0
                for option in SectionCall:
                    if parameter_state_list[i]:
                        SectionCall[option] = "YES"
                    else:
                        SectionCall[option] = "NO"
                    i += 1

                with open(f"{gui_global.files_directory_location}setting.txt", 'w') as configfile:
                    settingread.write(configfile)
                configfile.close()

        if count == 2:
            count = 0

    def CheckedState(self, State: bool):
        self.IP_checkbox.setEnabled(State)
        self.TelnetUser_checkbox.setEnabled(State)
        self.TelnetPassword_checkbox.setEnabled(State)
        # self.TelnetPass_edit.setEnabled(State)
        # self.TelnetUser_edit.setEnabled(State)
        self.DBUser_checkbox.setEnabled(State)
        # self.DBUser_edit.setEnabled(State)
        self.DBPass_checkbox.setEnabled(State)
        # self.DBPass_edit.setEnabled(State)
        self.CanDevice_checkbox.setEnabled(State)
        # self.CanDevice_combo.setEnabled(State)
        self.CanID_checkbox.setEnabled(State)
        # self.CanID_edit.setEnabled(State)
        self.CanBit_check.setEnabled(State)
        # self.CanBit_edit.setEnabled(State)
        self.RSLower_checkbox.setEnabled(State)
        # self.RSLowerPort_combo.setEnabled(State)
        # self.RSLower_combo.setEnabled(State)
        self.RSLowerPort_checkbox.setEnabled(State)
        self.RSLowerBaud_checkbox.setEnabled(State)
        # self.RSLowerBaud_edit.setEnabled(State)
        self.RSUpper_checkbox.setEnabled(State)
        # self.RSUpper_combo.setEnabled(State)
        # self.RSUpperPort_combo.setEnabled(State)
        self.RSUpperPort_checkbox.setEnabled(State)
        self.RSUpperBaud_checkbox.setEnabled(State)
        # self.RSUpperBaud_edit.setEnabled(State)
        self.ACSourceCommType_chechbox.setEnabled(State)
        # self.ACSourceCommType_combo.setEnabled(State)
        # self.ACSourceGPIB_edit.setEnabled(State)
        self.ACSourceGPIB_checkbox.setEnabled(State)
        self.ACSourceUSB_checkbox.setEnabled(State)
        # self.ACSourceUSB_edit.setEnabled(State)
        self.ATSLoad_checkbox.setEnabled(State)
        # self.ATSLoad_combo.setEnabled(State)
        self.LoadComm_checkbox.setEnabled(State)
        # self.LoadComm_combo.setEnabled(State)
        self.DCLoadGPIB_checkbox.setEnabled(State)
        # self.DCLoadGPIB_edit.setEnabled(State)
        self.DCLoadUSB_checkbox.setEnabled(State)
        # self.DCLoadUSB_combo.setEnabled(State)
        self.BatteryLoadUSB_checkbox.setEnabled(State)
        self.BatteryLoadGPIB_checkbox.setEnabled(State)
        # self.BatteryLoadGPIB_edit.setEnabled(State)
        # self.BatteryLoadUSB_combo.setEnabled(State)
        self.PowerMeterUSB_checkbox.setEnabled(State)
        # self.PowerMeterUSB_combo.setEnabled(State)
        self.CROBaud_checkbox.setEnabled(State)
        # self.CROBaud_edit.setEnabled(State)
        # self.CROComm_combo.setEnabled(State)
        self.CROComm_Checkbox.setEnabled(State)
        self.BarCode_checkbox.setEnabled(State)
        # self.BarCode_edit.setEnabled(State)


    @staticmethod
    def FunctionState(self, State: bool):
        self.IP_checkbox.setEnabled(State)
        self.IP_edit.setEnabled(State)
        self.TelnetUser_checkbox.setEnabled(State)
        self.TelnetPassword_checkbox.setEnabled(State)
        self.TelnetPass_edit.setEnabled(State)
        self.TelnetUser_edit.setEnabled(State)
        self.DBUser_checkbox.setEnabled(State)
        self.DBUser_edit.setEnabled(State)
        self.DBPass_checkbox.setEnabled(State)
        self.DBPass_edit.setEnabled(State)
        self.CanDevice_checkbox.setEnabled(State)
        self.CanDevice_combo.setEnabled(State)
        self.CanID_checkbox.setEnabled(State)
        self.CanID_edit.setEnabled(State)
        self.CanBit_check.setEnabled(State)
        self.CanBit_edit.setEnabled(State)
        self.RSLower_checkbox.setEnabled(State)
        self.RSLowerPort_combo.setEnabled(State)
        self.RSLower_combo.setEnabled(State)
        self.RSLowerPort_checkbox.setEnabled(State)
        self.RSLowerBaud_checkbox.setEnabled(State)
        self.RSLowerBaud_edit.setEnabled(State)
        self.RSUpper_checkbox.setEnabled(State)
        self.RSUpper_combo.setEnabled(State)
        self.RSUpperPort_combo.setEnabled(State)
        self.RSUpperPort_checkbox.setEnabled(State)
        self.RSUpperBaud_checkbox.setEnabled(State)
        self.RSUpperBaud_edit.setEnabled(State)
        self.ACSourceCommType_chechbox.setEnabled(State)
        self.ACSourceCommType_combo.setEnabled(State)
        self.ACSourceGPIB_edit.setEnabled(State)
        self.ACSourceGPIB_checkbox.setEnabled(State)
        self.ACSourceUSB_checkbox.setEnabled(State)
        self.ACSourceUSB_edit.setEnabled(State)
        self.ATSLoad_checkbox.setEnabled(State)
        self.ATSLoad_combo.setEnabled(State)
        self.LoadComm_checkbox.setEnabled(State)
        self.LoadComm_combo.setEnabled(State)
        self.DCLoadGPIB_checkbox.setEnabled(State)
        self.DCLoadGPIB_edit.setEnabled(State)
        self.DCLoadUSB_checkbox.setEnabled(State)
        self.DCLoadUSB_combo.setEnabled(State)
        self.BatteryLoadUSB_checkbox.setEnabled(State)
        self.BatteryLoadGPIB_checkbox.setEnabled(State)
        self.BatteryLoadGPIB_edit.setEnabled(State)
        self.BatteryLoadUSB_combo.setEnabled(State)
        self.PowerMeterUSB_checkbox.setEnabled(State)
        self.PowerMeterUSB_combo.setEnabled(State)
        self.CROBaud_checkbox.setEnabled(State)
        self.CROBaud_edit.setEnabled(State)
        self.CROComm_combo.setEnabled(State)
        self.CROComm_Checkbox.setEnabled(State)
        self.BarCode_checkbox.setEnabled(State)
        self.BarCode_edit.setEnabled(State)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Hardware()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
