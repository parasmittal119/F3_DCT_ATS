# -*- coding: utf-8 -*-
import datetime
import time
import CommandSetSmrBatteryCan
# Form implementation generated from reading ui file '.\Test_script.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, pyqtSignal
import test_order_done
import PFC_control_done
import CommandSetDcLoadUsb

test_order = test_order_done.Ui_Form.get_values(test_order_done.Ui_Form)
from config_done import *
import M1000Telnet
import M2000
from prompts import Prompt

if SettingRead("SETTING")['ate load comm type'] == "RS232C":
    from CommandDCLoad import *
if SettingRead("SETTING")['ate load comm type'] == "USB" or \
        SettingRead("SETTING")['ate load comm type'] == "GPIB":
    from CommandDCLoad import *

ATE_LOAD_COUNT = int(SettingRead("SETTING")['ate load count'])


def get_date_time(date=0, time=0):
    now = datetime.datetime.now()
    year = str(now.year)
    month = str(now.month)
    day = str(now.day)
    if len(month) == 1:
        month = '0' + month
    if len(day) == 1:
        day = "0" + day
    date_only = day + "-" + month + "-" + year
    hour = str(now.hour)
    if len(hour) == 1:
        hour = "0" + hour
    minute = str(now.minute)
    if len(minute) == 1:
        minute = "0" + minute
    second = str(now.second)
    if len(second) == 1:
        second = "0" + second
    time_only = hour + ":" + minute + ":" + second
    if time == 1 and date == 1:
        return date_only + " " + time_only
    elif date == 1:
        return date_only
    elif time == 1:
        return time_only


class Ui_Test(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1402, 778)
        font = QtGui.QFont()
        font.setPointSize(8)
        MainWindow.setFont(font)
        MainWindow.setWindowIcon(QtGui.QIcon(f"{gui_global.image_directory_location}logo_1.png"))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.heading_box = QtWidgets.QGroupBox(self.centralwidget)
        self.heading_box.setGeometry(QtCore.QRect(390, 40, 521, 51))
        self.heading_box.setTitle("")
        self.heading_box.setObjectName("heading_box")
        self.heading = QtWidgets.QLabel(self.heading_box)
        self.heading.setGeometry(QtCore.QRect(0, 0, 521, 51))
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.heading.setFont(font)
        self.heading.setAlignment(QtCore.Qt.AlignCenter)
        self.heading.setObjectName("heading")
        self.test_detail_box = QtWidgets.QGroupBox(self.centralwidget)
        self.test_detail_box.setEnabled(True)
        self.test_detail_box.setGeometry(QtCore.QRect(30, 150, 301, 461))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.test_detail_box.setFont(font)
        self.test_detail_box.setObjectName("test_detail_box")
        self.test_id = QtWidgets.QLabel(self.test_detail_box)
        self.test_id.setGeometry(QtCore.QRect(20, 60, 71, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.test_id.setFont(font)
        self.test_id.setObjectName("test_id")
        self.system_part_no = QtWidgets.QLabel(self.test_detail_box)
        self.system_part_no.setGeometry(QtCore.QRect(20, 90, 141, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.system_part_no.setFont(font)
        self.system_part_no.setObjectName("system_part_no")
        self.dut_serial_number = QtWidgets.QLabel(self.test_detail_box)
        self.dut_serial_number.setGeometry(QtCore.QRect(20, 120, 101, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.dut_serial_number.setFont(font)
        self.dut_serial_number.setObjectName("dut_serial_number")
        self.test_id_edit = QtWidgets.QLineEdit(self.test_detail_box)
        self.test_id_edit.setGeometry(QtCore.QRect(130, 60, 151, 20))
        self.test_id_edit.setObjectName("test_id_edit")
        self.test_id_edit.setReadOnly(True)
        self.system_part_no_edit = QtWidgets.QLineEdit(self.test_detail_box)
        self.system_part_no_edit.setGeometry(QtCore.QRect(130, 90, 151, 20))
        self.system_part_no_edit.setObjectName("system_part_no_edit")
        self.dut_serial_number_edit = QtWidgets.QLineEdit(self.test_detail_box)
        self.dut_serial_number_edit.setGeometry(QtCore.QRect(130, 120, 151, 20))
        self.dut_serial_number_edit.setObjectName("dut_serial_number_edit")
        self.customer_name = QtWidgets.QLabel(self.test_detail_box)
        self.customer_name.setGeometry(QtCore.QRect(20, 150, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.customer_name.setFont(font)
        self.customer_name.setObjectName("customer_name")
        self.associate_name = QtWidgets.QLabel(self.test_detail_box)
        self.associate_name.setGeometry(QtCore.QRect(20, 180, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.associate_name.setFont(font)
        self.associate_name.setObjectName("associate_name")
        self.associate_name_edit = QtWidgets.QLineEdit(self.test_detail_box)
        self.associate_name_edit.setGeometry(QtCore.QRect(130, 180, 151, 20))
        self.associate_name_edit.setObjectName("associate_name_edit")
        self.customer_name_edit = QtWidgets.QLineEdit(self.test_detail_box)
        self.customer_name_edit.setGeometry(QtCore.QRect(130, 150, 151, 20))
        self.customer_name_edit.setObjectName("customer_name_edit")
        self.customer_name_edit.setReadOnly(True)
        self.start_time_edit = QtWidgets.QLineEdit(self.test_detail_box)
        self.start_time_edit.setGeometry(QtCore.QRect(110, 220, 171, 20))
        self.start_time_edit.setObjectName("start_time_edit")
        self.start_time_edit.setReadOnly(True)
        self.end_time_edit = QtWidgets.QLineEdit(self.test_detail_box)
        self.end_time_edit.setGeometry(QtCore.QRect(110, 250, 171, 20))
        self.end_time_edit.setObjectName("end_time_edit")
        self.end_time_edit.setReadOnly(True)
        self.end_time = QtWidgets.QLabel(self.test_detail_box)
        self.end_time.setGeometry(QtCore.QRect(20, 250, 141, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.end_time.setFont(font)
        self.end_time.setObjectName("end_time")
        self.start_time = QtWidgets.QLabel(self.test_detail_box)
        self.start_time.setGeometry(QtCore.QRect(20, 220, 161, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.start_time.setFont(font)
        self.start_time.setObjectName("start_time")
        self.barcode_check = QtWidgets.QCheckBox(self.test_detail_box)
        self.barcode_check.setGeometry(QtCore.QRect(20, 30, 91, 17))
        self.barcode_check.setObjectName("barcode_check")
        self.custom_check = QtWidgets.QCheckBox(self.test_detail_box)
        self.custom_check.setGeometry(QtCore.QRect(20, 280, 141, 21))
        self.custom_check.setObjectName("custom_check")
        self.manual_checkbox = QtWidgets.QCheckBox(self.test_detail_box)
        self.manual_checkbox.setGeometry(QtCore.QRect(150, 280, 141, 21))
        self.manual_checkbox.setObjectName("manual_checkbox")
        self.start = QtWidgets.QPushButton(self.test_detail_box)
        self.start.setGeometry(QtCore.QRect(20, 350, 121, 61))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.start.setFont(font)
        self.start.setObjectName("start")
        self.start.clicked.connect(self.start_function)
        self.stop = QtWidgets.QPushButton(self.test_detail_box)
        self.stop.setGeometry(QtCore.QRect(160, 350, 121, 61))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.stop.setFont(font)
        self.stop.setObjectName("stop")
        self.stop.clicked.connect(self.stop_function)
        self.test_item_box = QtWidgets.QGroupBox(self.centralwidget)
        self.test_item_box.setGeometry(QtCore.QRect(390, 100, 521, 571))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.test_item_box.setFont(font)
        self.test_item_box.setObjectName("test_item_box")
        self.test_item_label = QtWidgets.QLabel(self.test_item_box)
        self.test_item_label.setGeometry(QtCore.QRect(70, 50, 101, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.test_item_label.setFont(font)
        self.test_item_label.setObjectName("test_item_label")
        self.status_label = QtWidgets.QLabel(self.test_item_box)
        self.status_label.setGeometry(QtCore.QRect(430, 50, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.status_label.setFont(font)
        self.status_label.setObjectName("status_label")
        self.serial_label = QtWidgets.QLabel(self.test_item_box)
        self.serial_label.setGeometry(QtCore.QRect(10, 50, 41, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.serial_label.setFont(font)
        self.serial_label.setObjectName("serial_label")
        self.serial1 = QtWidgets.QLabel(self.test_item_box)
        self.serial1.setGeometry(QtCore.QRect(20, 80, 21, 31))
        self.serial1.setObjectName("serial1")
        self.controller_health_label = QtWidgets.QLabel(self.test_item_box)
        self.controller_health_label.setGeometry(QtCore.QRect(70, 85, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.controller_health_label.setFont(font)
        self.controller_health_label.setObjectName("controller_health_label")
        self.controller_health_status = QtWidgets.QLabel(self.test_item_box)
        self.controller_health_status.setGeometry(QtCore.QRect(430, 80, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.controller_health_status.setFont(font)
        self.controller_health_status.setObjectName("controller_health_status")
        self.serial2 = QtWidgets.QLabel(self.test_item_box)
        self.serial2.setGeometry(QtCore.QRect(20, 110, 21, 31))
        self.serial2.setObjectName("serial2")
        self.serial3 = QtWidgets.QLabel(self.test_item_box)
        self.serial3.setGeometry(QtCore.QRect(20, 140, 21, 31))
        self.serial3.setObjectName("serial3")
        self.serial4 = QtWidgets.QLabel(self.test_item_box)
        self.serial4.setGeometry(QtCore.QRect(20, 170, 21, 31))
        self.serial4.setObjectName("serial4")
        self.serial5 = QtWidgets.QLabel(self.test_item_box)
        self.serial5.setGeometry(QtCore.QRect(20, 200, 21, 31))
        self.serial5.setObjectName("serial5")
        self.serial6 = QtWidgets.QLabel(self.test_item_box)
        self.serial6.setGeometry(QtCore.QRect(20, 230, 21, 31))
        self.serial6.setObjectName("serial6")
        self.serial7 = QtWidgets.QLabel(self.test_item_box)
        self.serial7.setGeometry(QtCore.QRect(20, 260, 21, 31))
        self.serial7.setObjectName("serial7")
        self.serial8 = QtWidgets.QLabel(self.test_item_box)
        self.serial8.setGeometry(QtCore.QRect(20, 290, 21, 31))
        self.serial8.setObjectName("serial8")
        self.serial9 = QtWidgets.QLabel(self.test_item_box)
        self.serial9.setGeometry(QtCore.QRect(20, 320, 31, 31))
        self.serial9.setObjectName("serial9")
        self.serial10 = QtWidgets.QLabel(self.test_item_box)
        self.serial10.setGeometry(QtCore.QRect(20, 350, 21, 31))
        self.serial10.setObjectName("serial10")
        self.serial11 = QtWidgets.QLabel(self.test_item_box)
        self.serial11.setGeometry(QtCore.QRect(20, 380, 21, 31))
        self.serial11.setObjectName("serial11")
        self.unit_comm_label = QtWidgets.QLabel(self.test_item_box)
        self.unit_comm_label.setGeometry(QtCore.QRect(70, 110, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.unit_comm_label.setFont(font)
        self.unit_comm_label.setObjectName("unit_comm_label")
        self.temp_label = QtWidgets.QLabel(self.test_item_box)
        self.temp_label.setGeometry(QtCore.QRect(70, 140, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.temp_label.setFont(font)
        self.temp_label.setObjectName("temp_label")
        self.output_pfc_label = QtWidgets.QLabel(self.test_item_box)
        self.output_pfc_label.setGeometry(QtCore.QRect(70, 170, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.output_pfc_label.setFont(font)
        self.output_pfc_label.setObjectName("output_pfc_label")
        self.input_pfc_label = QtWidgets.QLabel(self.test_item_box)
        self.input_pfc_label.setGeometry(QtCore.QRect(70, 200, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.input_pfc_label.setFont(font)
        self.input_pfc_label.setObjectName("input_pfc_label")
        self.dc_voltage_check_label = QtWidgets.QLabel(self.test_item_box)
        self.dc_voltage_check_label.setGeometry(QtCore.QRect(70, 230, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.dc_voltage_check_label.setFont(font)
        self.dc_voltage_check_label.setObjectName("dc_voltage_check_label")
        self.dc_voltage_calib_label = QtWidgets.QLabel(self.test_item_box)
        self.dc_voltage_calib_label.setGeometry(QtCore.QRect(70, 260, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.dc_voltage_calib_label.setFont(font)
        self.dc_voltage_calib_label.setObjectName("dc_voltage_calib_label")
        self.dc_current_check_discharge_label = QtWidgets.QLabel(self.test_item_box)
        self.dc_current_check_discharge_label.setGeometry(QtCore.QRect(70, 290, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.dc_current_check_discharge_label.setFont(font)
        self.dc_current_check_discharge_label.setObjectName("dc_current_check_discharge_label")
        self.smr_register_label = QtWidgets.QLabel(self.test_item_box)
        self.smr_register_label.setGeometry(QtCore.QRect(70, 320, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.smr_register_label.setFont(font)
        self.smr_register_label.setObjectName("smr_register_label")
        self.dc_current_check_charge_label = QtWidgets.QLabel(self.test_item_box)
        self.dc_current_check_charge_label.setGeometry(QtCore.QRect(70, 350, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.dc_current_check_charge_label.setFont(font)
        self.dc_current_check_charge_label.setObjectName("dc_current_check_charge_label")
        self.dc_current_calib_label = QtWidgets.QLabel(self.test_item_box)
        self.dc_current_calib_label.setGeometry(QtCore.QRect(70, 380, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.dc_current_calib_label.setFont(font)
        self.dc_current_calib_label.setObjectName("dc_current_calib_label")
        self.lvd_label = QtWidgets.QLabel(self.test_item_box)
        self.lvd_label.setGeometry(QtCore.QRect(70, 410, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.lvd_label.setFont(font)
        self.lvd_label.setObjectName("lvd_label")
        self.ac_phase_label = QtWidgets.QLabel(self.test_item_box)
        self.ac_phase_label.setGeometry(QtCore.QRect(70, 440, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.ac_phase_label.setFont(font)
        self.ac_phase_label.setObjectName("ac_phase_label")
        self.current_sharing_label = QtWidgets.QLabel(self.test_item_box)
        self.current_sharing_label.setGeometry(QtCore.QRect(70, 470, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.current_sharing_label.setFont(font)
        self.current_sharing_label.setObjectName("current_sharing_label")
        self.rs485_label = QtWidgets.QLabel(self.test_item_box)
        self.rs485_label.setGeometry(QtCore.QRect(70, 500, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.rs485_label.setFont(font)
        self.rs485_label.setObjectName("rs485_label")
        self.default_label = QtWidgets.QLabel(self.test_item_box)
        self.default_label.setGeometry(QtCore.QRect(70, 530, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.default_label.setFont(font)
        self.default_label.setObjectName("default_label")
        self.serial12 = QtWidgets.QLabel(self.test_item_box)
        self.serial12.setGeometry(QtCore.QRect(20, 410, 21, 31))
        self.serial12.setObjectName("serial12")
        self.serial13 = QtWidgets.QLabel(self.test_item_box)
        self.serial13.setGeometry(QtCore.QRect(20, 440, 21, 31))
        self.serial13.setObjectName("serial13")
        self.serial14 = QtWidgets.QLabel(self.test_item_box)
        self.serial14.setGeometry(QtCore.QRect(20, 470, 21, 31))
        self.serial14.setObjectName("serial14")
        self.serial15 = QtWidgets.QLabel(self.test_item_box)
        self.serial15.setGeometry(QtCore.QRect(20, 500, 21, 31))
        self.serial15.setObjectName("serial15")
        self.serial16 = QtWidgets.QLabel(self.test_item_box)
        self.serial16.setGeometry(QtCore.QRect(20, 530, 21, 31))
        self.serial16.setObjectName("serial16")
        self.unit_comm_status = QtWidgets.QLabel(self.test_item_box)
        self.unit_comm_status.setGeometry(QtCore.QRect(430, 110, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.unit_comm_status.setFont(font)
        self.unit_comm_status.setObjectName("unit_comm_status")
        self.temp_status = QtWidgets.QLabel(self.test_item_box)
        self.temp_status.setGeometry(QtCore.QRect(430, 140, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.temp_status.setFont(font)
        self.temp_status.setObjectName("temp_status")
        self.output_pfc_status = QtWidgets.QLabel(self.test_item_box)
        self.output_pfc_status.setGeometry(QtCore.QRect(430, 170, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.output_pfc_status.setFont(font)
        self.output_pfc_status.setObjectName("output_pfc_status")
        self.input_pfc_status = QtWidgets.QLabel(self.test_item_box)
        self.input_pfc_status.setGeometry(QtCore.QRect(430, 200, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.input_pfc_status.setFont(font)
        self.input_pfc_status.setObjectName("input_pfc_status")
        self.dc_voltage_check_status = QtWidgets.QLabel(self.test_item_box)
        self.dc_voltage_check_status.setGeometry(QtCore.QRect(430, 230, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.dc_voltage_check_status.setFont(font)
        self.dc_voltage_check_status.setObjectName("dc_voltage_check_status")
        self.dc_voltage_calib_status = QtWidgets.QLabel(self.test_item_box)
        self.dc_voltage_calib_status.setGeometry(QtCore.QRect(430, 260, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.dc_voltage_calib_status.setFont(font)
        self.dc_voltage_calib_status.setObjectName("dc_voltage_calib_status")
        self.dc_current_check_discharge_status = QtWidgets.QLabel(self.test_item_box)
        self.dc_current_check_discharge_status.setGeometry(QtCore.QRect(430, 290, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.dc_current_check_discharge_status.setFont(font)
        self.dc_current_check_discharge_status.setObjectName("dc_current_check_discharge_status")
        self.smr_register_status = QtWidgets.QLabel(self.test_item_box)
        self.smr_register_status.setGeometry(QtCore.QRect(430, 320, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.smr_register_status.setFont(font)
        self.smr_register_status.setObjectName("smr_register_status")
        self.dc_current_check_charge_status = QtWidgets.QLabel(self.test_item_box)
        self.dc_current_check_charge_status.setGeometry(QtCore.QRect(430, 350, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.dc_current_check_charge_status.setFont(font)
        self.dc_current_check_charge_status.setObjectName("dc_current_check_charge_status")
        self.dc_current_calib_status = QtWidgets.QLabel(self.test_item_box)
        self.dc_current_calib_status.setGeometry(QtCore.QRect(430, 380, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.dc_current_calib_status.setFont(font)
        self.dc_current_calib_status.setObjectName("dc_current_calib_status")
        self.lvd_status = QtWidgets.QLabel(self.test_item_box)
        self.lvd_status.setGeometry(QtCore.QRect(430, 410, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.lvd_status.setFont(font)
        self.lvd_status.setObjectName("lvd_status")
        self.ac_phase_status = QtWidgets.QLabel(self.test_item_box)
        self.ac_phase_status.setGeometry(QtCore.QRect(430, 440, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.ac_phase_status.setFont(font)
        self.ac_phase_status.setObjectName("ac_phase_status")
        self.current_sharing_status = QtWidgets.QLabel(self.test_item_box)
        self.current_sharing_status.setGeometry(QtCore.QRect(430, 470, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.current_sharing_status.setFont(font)
        self.current_sharing_status.setObjectName("current_sharing_status")
        self.default_status = QtWidgets.QLabel(self.test_item_box)
        self.default_status.setGeometry(QtCore.QRect(430, 530, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.default_status.setFont(font)
        self.default_status.setObjectName("default_status")
        self.rs485_status = QtWidgets.QLabel(self.test_item_box)
        self.rs485_status.setGeometry(QtCore.QRect(430, 500, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setUnderline(False)
        self.rs485_status.setFont(font)
        self.rs485_status.setObjectName("rs485_status")
        self.log_window = QtWidgets.QTextEdit(self.centralwidget)
        self.log_window.setGeometry(QtCore.QRect(980, 80, 341, 481))
        self.log_window.setObjectName("log_window")
        self.test_log = QtWidgets.QLabel(self.centralwidget)
        self.test_log.setGeometry(QtCore.QRect(980, 40, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.test_log.setFont(font)
        self.test_log.setObjectName("test_log")
        self.log_clear = QtWidgets.QPushButton(self.centralwidget)
        self.log_clear.setGeometry(QtCore.QRect(1240, 50, 75, 23))
        self.log_clear.setObjectName("log_clear")
        self.final_status_box = QtWidgets.QGroupBox(self.centralwidget)
        self.final_status_box.setGeometry(QtCore.QRect(980, 580, 341, 71))
        self.final_status_box.setTitle("")
        self.final_status_box.setObjectName("final_status_box")
        self.final_status = QtWidgets.QLabel(self.final_status_box)
        self.final_status.setGeometry(QtCore.QRect(6, 12, 331, 51))
        font = QtGui.QFont()
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.final_status.setFont(font)
        self.final_status.setScaledContents(True)
        self.final_status.setAlignment(QtCore.Qt.AlignCenter)
        self.final_status.setObjectName("final_status")
        self.ate_logo = QtWidgets.QLabel(self.centralwidget)
        self.ate_logo.setGeometry(QtCore.QRect(50, 50, 251, 71))
        self.ate_logo.setText("")
        self.ate_logo.setPixmap(QtGui.QPixmap(f"{gui_global.image_directory_location}exicome logo.png"))
        self.ate_logo.setScaledContents(True)
        self.ate_logo.setAlignment(QtCore.Qt.AlignCenter)
        self.ate_logo.setObjectName("ate_logo")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.heading.setText(_translate("MainWindow", "Power Plant Production ATS"))
        self.test_detail_box.setTitle(_translate("MainWindow", "Test Details"))
        self.test_id.setText(_translate("MainWindow", "Test ID"))
        self.system_part_no.setText(_translate("MainWindow", "System Part No."))
        self.dut_serial_number.setText(_translate("MainWindow", "DUT Serial No."))
        self.customer_name.setText(_translate("MainWindow", "Customer Name"))
        self.associate_name.setText(_translate("MainWindow", "Associate Name"))
        self.end_time.setText(_translate("MainWindow", "End Time"))
        self.start_time.setText(_translate("MainWindow", "Start Time"))
        self.barcode_check.setText(_translate("MainWindow", "Bar Code"))
        self.custom_check.setText(_translate("MainWindow", "Custom Settings"))
        self.manual_checkbox.setText(_translate("MainWindow", "Manual Resources"))
        self.start.setToolTip(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.start.setText(_translate("MainWindow", "START"))
        self.stop.setText(_translate("MainWindow", "STOP"))
        self.test_item_box.setTitle(_translate("MainWindow", "Test Program"))
        self.test_item_label.setText(_translate("MainWindow", "Test Item"))
        self.status_label.setText(_translate("MainWindow", "Status"))
        self.serial_label.setText(_translate("MainWindow", "S No."))
        self.serial1.setText(_translate("MainWindow", "1"))
        self.controller_health_label.setText(_translate("MainWindow", "Controller Health"))
        self.controller_health_status.setText(_translate("MainWindow", "Pending"))
        self.serial2.setText(_translate("MainWindow", "2"))
        self.serial3.setText(_translate("MainWindow", "3"))
        self.serial4.setText(_translate("MainWindow", "4"))
        self.serial5.setText(_translate("MainWindow", "5"))
        self.serial6.setText(_translate("MainWindow", "6"))
        self.serial7.setText(_translate("MainWindow", "7"))
        self.serial8.setText(_translate("MainWindow", "8"))
        self.serial9.setText(_translate("MainWindow", "9"))
        self.serial10.setText(_translate("MainWindow", "10"))
        self.serial11.setText(_translate("MainWindow", "11"))
        self.unit_comm_label.setText(_translate("MainWindow", "Unit Communication"))
        self.temp_label.setText(_translate("MainWindow", "Temperature Measurement"))
        self.output_pfc_label.setText(_translate("MainWindow", "Output PFC"))
        self.input_pfc_label.setText(_translate("MainWindow", "Input PFC"))
        self.dc_voltage_check_label.setText(_translate("MainWindow", "DC Voltage Measurement"))
        self.dc_voltage_calib_label.setText(_translate("MainWindow", "DC Voltage Calibration/Verification"))
        self.dc_current_check_discharge_label.setText(_translate("MainWindow", "DC Current Measurement (Discharge)"))
        self.smr_register_label.setText(_translate("MainWindow", "SMR Registration"))
        self.dc_current_check_charge_label.setText(_translate("MainWindow", "DC Current Measurement (Charge)"))
        self.dc_current_calib_label.setText(_translate("MainWindow", "DC Current Calibration/Verification"))
        self.lvd_label.setText(_translate("MainWindow", "LVD Contactor"))
        self.ac_phase_label.setText(_translate("MainWindow", "AC Phase Allocation"))
        self.current_sharing_label.setText(_translate("MainWindow", "Current Sharing / Bus Drop"))
        self.rs485_label.setText(_translate("MainWindow", "RS485"))
        self.default_label.setText(_translate("MainWindow", "Default"))
        self.serial12.setText(_translate("MainWindow", "12"))
        self.serial13.setText(_translate("MainWindow", "13"))
        self.serial14.setText(_translate("MainWindow", "14"))
        self.serial15.setText(_translate("MainWindow", "15"))
        self.serial16.setText(_translate("MainWindow", "16"))
        self.unit_comm_status.setText(_translate("MainWindow", "Pending"))
        self.temp_status.setText(_translate("MainWindow", "Pending"))
        self.output_pfc_status.setText(_translate("MainWindow", "Pending"))
        self.input_pfc_status.setText(_translate("MainWindow", "Pending"))
        self.dc_voltage_check_status.setText(_translate("MainWindow", "Pending"))
        self.dc_voltage_calib_status.setText(_translate("MainWindow", "Pending"))
        self.dc_current_check_discharge_status.setText(_translate("MainWindow", "Pending"))
        self.smr_register_status.setText(_translate("MainWindow", "Pending"))
        self.dc_current_check_charge_status.setText(_translate("MainWindow", "Pending"))
        self.dc_current_calib_status.setText(_translate("MainWindow", "Pending"))
        self.lvd_status.setText(_translate("MainWindow", "Pending"))
        self.ac_phase_status.setText(_translate("MainWindow", "Pending"))
        self.current_sharing_status.setText(_translate("MainWindow", "Pending"))
        self.default_status.setText(_translate("MainWindow", "Pending"))
        self.rs485_status.setText(_translate("MainWindow", "Pending"))
        self.test_log.setText(_translate("MainWindow", "Test Log"))
        self.log_clear.setText(_translate("MainWindow", "Log Clear"))
        self.final_status.setText(_translate("MainWindow", ""))

        self.prompt = Prompt()
        self.M2000 = M2000.M2000CommandSet()
        self.pfc = PFC_control_done.pfc_control()
        self.contact = PFC_control_done.pfc_control()

        self.dcload = CommandSetDcLoadUsb
        self.smrcan = CommandSetSmrBatteryCan

    def dut_serial_check(self):
        global customer_name
        self.associate_name_edit.setText(self.associate_name_edit.text().upper())
        self.system_part_no_edit.setText(self.system_part_no_edit.text().upper())
        self.dut_serial_number_edit.setText(self.dut_serial_number_edit.text().upper())
        self.associate_name = self.associate_name_edit.text()
        self.part_number = self.system_part_no_edit.text()
        self.serial_number = self.dut_serial_number_edit.text()
        name_check = False
        part_check = False
        serial_check = False
        if self.associate_name == "":
            self.prompt.Message("Error!", "Kindly enter NAME to proceed!")
        else:
            name_check = True
            if self.part_number == "":
                self.prompt.Message("Error!", "Kindly enter HE-Part Code")
            else:
                if len(self.part_number) == 8:
                    with open(f"{gui_global.files_directory_location}customer_detail.csv", 'r') as file:
                        lines = file.readlines()
                    not_found = True
                    self.config_version_list = []
                    for i in lines:
                        if self.part_number == i.split(",")[0]:
                            not_found = False
                            self.customer_name = i.split(",")[2]
                            self.config_version_list.append(float(i.split(",")[1]))
                            self.mcm_type = i.split(",")[3].split("\n")[0]
                            if self.mcm_type == "M1000":
                                self.mcm_type = 1
                            elif self.mcm_type == "M2000":
                                self.mcm_type = 2
                            print(self.mcm_type)
                    if not_found:
                        self.prompt.Message("Warning!", "HE Part Code not found in Database!")
                    else:
                        self.customer_name_edit.setText(str(self.customer_name))
                        part_check = True
                        if self.serial_number == "":
                            self.prompt.Message("Error!", "Kindly enter/ scan system serial number")
                        else:
                            if len(self.serial_number) == 15:
                                serial_check = True
                            else:
                                self.prompt.Message("Warning!", "Kindly enter correct length of Serial Number")
                else:
                    self.prompt.Message("Warning!", "Kindly enter correct length of Part Code")

        if name_check and serial_check and part_check:
            self.test_id_edit.setText(SettingRead("TEST ID")['count'])
            self.configversion = max(self.config_version_list)
            count = int(float(self.test_id_edit.text())) + 1
            config.read(f"{gui_global.files_directory_location}setting.txt")
            SectionCall = config['TEST ID']
            for option in SectionCall:
                SectionCall[option] = str(count)

            with open(f"{gui_global.files_directory_location}setting.txt", 'w') as configfile:
                config.write(configfile)

            self.start_time_edit.setText(str(datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")))
            return True
        else:
            return False

    def stop_function(self):
        self.end_time_edit.setText(str(datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")))

    def initials(self):
        self.final_status.setText("")
        self.final_status.setStyleSheet("")
        self.controller_health_status.setText("Pending")
        self.controller_health_status.setStyleSheet("")
        self.unit_comm_status.setText("Pending")
        self.unit_comm_status.setStyleSheet("")
        self.temp_status.setText("Pending")
        self.temp_status.setStyleSheet("")
        self.output_pfc_status.setText("Pending")
        self.output_pfc_status.setStyleSheet("")
        self.input_pfc_status.setText("Pending")
        self.input_pfc_status.setStyleSheet("")
        self.dc_voltage_check_status.setText("Pending")
        self.dc_voltage_calib_status.setText("Pending")
        self.dc_voltage_check_status.setStyleSheet("")
        self.dc_voltage_calib_status.setStyleSheet("")
        self.dc_current_check_discharge_status.setText("Pending")
        self.dc_current_check_discharge_status.setStyleSheet("")
        self.smr_register_status.setText("Pending")
        self.smr_register_status.setStyleSheet("")
        self.dc_current_check_charge_status.setText("Pending")
        self.dc_current_check_charge_status.setStyleSheet("")
        self.dc_current_calib_status.setText("Pending")
        self.dc_current_calib_status.setStyleSheet("")
        self.lvd_status.setText("Pending")
        self.lvd_status.setStyleSheet("")
        self.ac_phase_status.setText("Pending")
        self.ac_phase_status.setStyleSheet("")
        self.current_sharing_status.setText("Pending")
        self.current_sharing_status.setStyleSheet("")
        self.rs485_status.setText("Pending")
        self.rs485_status.setStyleSheet("")
        self.default_status.setText("Pending")
        self.default_status.setStyleSheet("")
        self.log_window.clear()

    def test_detail_clear(self):
        self.test_id_edit.clear()
        self.system_part_no_edit.clear()
        self.dut_serial_number_edit.clear()
        self.customer_name_edit.clear()
        self.associate_name_edit.clear()

    def start_function(self):

        """
        This function starts and handles the test script with final result status, Log and Report Creation

        final_output: list ==> shows test cases result, initially BLANK
        test_detail_flag: bool ==> Result of details in Test Details Box are correctly filled
        testing_flag: bool ==> signifies the status of IS TESTING ACTIVE, initially TRUE
        """
        self.start.setDisabled(True)
        global final_output
        testing_flag = True
        test_detail_flag = self.dut_serial_check()
        if test_detail_flag:
            '''Set the initials to default before starting the testing'''

            self.initials()
            self.physical_check(BYPASS=True)
            self.print_console(f'DUT PART NUMBER: {self.part_number}')
            self.print_console(f'DUT SERIAL NUMBER: {self.serial_number}')
            self.print_console(f'CUSTOMER NAME: {self.customer_name_edit.text()}')
            if self.part_number == "HE517553" or self.part_number == "HE517610":
                self.print_console(f"SOFTWARE VERSION: {self.configversion}")
            else:
                self.print_console(f"CONFIGURATION FILE VERSION: {self.configversion}")
            self.print_console(f"TEST START DATE TIME: {get_date_time(date=1, time=1)}")
            self.print_console(f"ASSOCIATE NAME: {self.associate_name_edit.text()}")
            self.print_console("s")

            print(f"Test detail flag: {test_detail_flag}")  # Shows Boolean expression of test_detail_flag

            '''Starting testing'''

            while testing_flag:
                final_output = []
                for i in range(1, len(test_order) + 1):

                    function_status = self.run_test(i)  # Running test sequences

                    print(
                        f"Test Number {i} : {function_status}")  # Display the status of the last function block tested

                    '''Keeping/ Storing the status of last function block tested'''

                    if function_status:
                        final_output.append(function_status)

                    else:
                        user_response = self.prompt.User_prompt("Do you want to skip\nthis test and continue?")
                        if user_response:
                            testing_flag = True
                            final_output.append(function_status)
                        else:
                            final_output.append(function_status)
                            testing_flag = False
                            break  # terminating test loop if USER wishes not to continue the test

                    '''Terminating test loop when all tests are performed'''
                    if i == 16:
                        testing_flag = False
                        print(final_output)
                        break

            console_output_flag = True
            for results in final_output:
                if results == False:
                    console_output_flag = False

            if console_output_flag:
                self.final_status.setText("PASS")
                self.final_status.setFont(QtGui.QFont("Calibri", 50))
                self.final_status.setStyleSheet("color:GREEN")
            else:
                self.final_status.setText("FAIL")
                self.final_status.setFont(QtGui.QFont("Calibri", 50))
                self.final_status.setStyleSheet("color:RED")

            # self.log()
        else:
            self.prompt.Message("Error!", "Kindly complete Test Details")

        self.start.setDisabled(False)

    def run_test(self, test_number):
        if test_number == int(test_order[0]):
            controller_health_check_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if controller_health_check_variable:
                self.controller_health_status.setText("PASS")
                self.controller_health_status.setStyleSheet("color: GREEN")
            else:
                self.controller_health_status.setText("FAIL")
                self.controller_health_status.setStyleSheet("color: RED")
            return controller_health_check_variable
        elif test_number == int(test_order[1]):
            unit_comm_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if unit_comm_variable:
                self.unit_comm_status.setText('PASS')
                self.unit_comm_status.setStyleSheet('color:GREEN')
            else:
                self.unit_comm_status.setText('FAIL')
                self.unit_comm_status.setStyleSheet('color:RED')
            return unit_comm_variable
        elif test_number == int(test_order[2]):
            temp_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if temp_variable:
                self.temp_status.setText('PASS')
                self.temp_status.setStyleSheet('color:GREEN')
            else:
                self.temp_status.setText('FAIL')
                self.temp_status.setStyleSheet('color:RED')
            return temp_variable
        elif test_number == int(test_order[3]):
            out_pfc_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if out_pfc_variable:
                self.output_pfc_status.setText('PASS')
                self.output_pfc_status.setStyleSheet('color:GREEN')
            else:
                self.output_pfc_status.setText('FAIL')
                self.output_pfc_status.setStyleSheet('color:RED')
            return out_pfc_variable
        elif test_number == int(test_order[4]):
            input_pfc_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if input_pfc_variable:
                self.input_pfc_status.setText('PASS')
                self.input_pfc_status.setStyleSheet('color:GREEN')
            else:
                self.input_pfc_status.setText('FAIL')
                self.input_pfc_status.setStyleSheet('color:RED')
            return input_pfc_variable
        elif test_number == int(test_order[5]):
            dc_voltage_check = self.prompt.User_prompt("Do you want to pass this test and continue?")
            print(f"dc_voltage : {dc_voltage_check}")
            if dc_voltage_check:
                self.dc_voltage_check_status.setText('PASS')
                self.dc_voltage_check_status.setStyleSheet('color:GREEN')
            else:
                self.dc_voltage_check_status.setText('FAIL')
                self.dc_voltage_check_status.setStyleSheet('color:RED')
            return dc_voltage_check
        elif test_number == int(test_order[6]):
            dc_voltage_calib_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            print(f"dc_voltage_calib : {dc_voltage_calib_variable}")
            if dc_voltage_calib_variable:
                self.dc_voltage_calib_status.setText('PASS')
                self.dc_voltage_calib_status.setStyleSheet('color:GREEN')
            else:
                self.dc_voltage_calib_status.setText('FAIL')
                self.dc_voltage_calib_status.setStyleSheet('color:RED')
            return dc_voltage_calib_variable
        elif test_number == int(test_order[7]):
            dc_current_discharge_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if dc_current_discharge_variable:
                self.dc_current_check_discharge_status.setText('PASS')
                self.dc_current_check_discharge_status.setStyleSheet('color:GREEN')
            else:
                self.dc_current_check_discharge_status.setText('FAIL')
                self.dc_current_check_discharge_status.setStyleSheet('color:RED')
            return dc_current_discharge_variable
        elif test_number == int(test_order[8]):
            smr_registration_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if smr_registration_variable:
                self.smr_register_status.setText('PASS')
                self.smr_register_status.setStyleSheet('color:GREEN')
            else:
                self.smr_register_status.setText('FAIL')
                self.smr_register_status.setStyleSheet('color:RED')
            return smr_registration_variable
        elif test_number == int(test_order[9]):
            dc_current_charge_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if dc_current_charge_variable:
                self.dc_current_check_charge_status.setText('PASS')
                self.dc_current_check_charge_status.setStyleSheet('color:GREEN')
            else:
                self.dc_current_check_charge_status.setText('FAIL')
                self.dc_current_check_charge_status.setStyleSheet('color:RED')
            return dc_current_charge_variable
        elif test_number == int(test_order[10]):
            dc_current_calib_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if dc_current_calib_variable:
                self.dc_current_calib_status.setText('PASS')
                self.dc_current_calib_status.setStyleSheet('color:GREEN')
            else:
                self.dc_current_calib_status.setText('FAIL')
                self.dc_current_calib_status.setStyleSheet('color:RED')
            return dc_current_calib_variable
        elif test_number == int(test_order[11]):
            lvd_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if lvd_variable:
                self.lvd_status.setText('PASS')
                self.lvd_status.setStyleSheet('color:GREEN')
            else:
                self.lvd_status.setText('FAIL')
                self.lvd_status.setStyleSheet('color:RED')
            return lvd_variable
        elif test_number == int(test_order[12]):
            ac_phase_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if ac_phase_variable:
                self.ac_phase_status.setText('PASS')
                self.ac_phase_status.setStyleSheet('color:GREEN')
            else:
                self.ac_phase_status.setText('FAIL')
                self.ac_phase_status.setStyleSheet('color:RED')
            return ac_phase_variable
        elif test_number == int(test_order[13]):
            current_sharing_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if current_sharing_variable:
                self.current_sharing_status.setText('PASS')
                self.current_sharing_status.setStyleSheet('color:GREEN')
            else:
                self.current_sharing_status.setText('FAIL')
                self.current_sharing_status.setStyleSheet('color:RED')
            return current_sharing_variable
        elif test_number == int(test_order[14]):
            rs485_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if rs485_variable:
                self.rs485_status.setText('PASS')
                self.rs485_status.setStyleSheet('color:GREEN')
            else:
                self.rs485_status.setText('FAIL')
                self.rs485_status.setStyleSheet('color:RED')
            return rs485_variable
        elif test_number == int(test_order[15]):
            default_variable = self.prompt.User_prompt("Do you want to pass this test and continue?")
            if default_variable:
                self.default_status.setText('PASS')
                self.default_status.setStyleSheet('color:GREEN')
            else:
                self.default_status.setText('FAIL')
                self.default_status.setStyleSheet('color:RED')
            return default_variable
        else:
            return False

    def print_console(self, text="", color="BLUE"):
        if color == "RED":
            self.log_window.setTextColor(QtCore.Qt.red)
        elif color == "BLUE":
            self.log_window.setTextColor(QtCore.Qt.blue)
        elif color == "GREEN":
            self.log_window.setTextColor(QtCore.Qt.darkGreen)
        self.log_window.append(str(text))
        QtWidgets.qApp.processEvents()
        time.sleep(0.01)

    def physical_check(self, BYPASS=False):
        if BYPASS:
            return True
        else:
            self.CLEAR_JIG()
            self.CHECK_DEVICES()
            self.INITIALIZE_JIG()
            RESULT = []
            self.print_console("PHYSICAL CHECK TEST STARTED...")

            physical_state = self.prompt.User_prompt("Is all bus-bar/ screws tight?")
            if physical_state:
                RESULT_TEMP = True
            else:
                RESULT_TEMP = False
            RESULT.append(RESULT_TEMP)

            physical_state = self.prompt.User_prompt("Is AC/Battery/LOAD/PFC/RS-485(if any) connection tightly done?")
            if physical_state:
                RESULT_TEMP = True
            else:
                RESULT_TEMP = False
            RESULT.append(RESULT_TEMP)

            physical_state = self.prompt.User_prompt("Is connection to optional AC MCB is correct?")
            if physical_state:
                RESULT_TEMP = True
            else:
                RESULT_TEMP = False
            RESULT.append(RESULT_TEMP)

            self.print_console("PHYSICAL CHECK TEST FINISHED....")

            return CALCULATE_RESULT(RESULT)

    def controller_health_method(self):
        self.print_console("CONTROLLER HEALTH CHECK TEST STARTED...")
        if self.mcm_type == 1:
            SITE_ID = M1000Telnet.telnet_get_command(OIDRead("SYSTEM CONFIG")['site id'])
        elif self.mcm_type == 2:
            SITE_ID = M1000Telnet.telnet_get_command(OIDRead("SYSTEM CONFIG")['site id'])
        RESULT = []
        if SITE_ID is not None:
            self.print_console("Controller Healthy")
            RESULT_TEMP = True
            self.RTC_SET()
        else:
            self.print_console("Controller OFF")
            RESULT_TEMP = False

        M1000Telnet.telnet_get_command(OIDRead('SYSTEM COMMANDS')['ate test'], "TEST_M1000_ATE")

        test_id = self.test_id_edit.text()

        if test_id != "0":
            self.record_result.append(test_id)
        else:
            self.record_result.append(test_id)

        RESULT.append(RESULT_TEMP)

        self.print_console("CONTROLLER_HEALTH_CHECK TEST FINISHED.")

        return CALCULATE_RESULT(RESULT)

    def RTC_SET(self):
        self.print_console("RTC SET STARTED...")
        date_time = M1000Telnet.telnet_get_command(OIDRead("SYSTEM COMMANDS")['rtc date time'])
        print("SYSTEM Time and Date: " + str(date_time))
        now = get_date_time(date=1, time=1)
        M1000Telnet.telnet_set_command(OIDRead('SYSTEM COMMANDS')['rtc date time'], now)
        self.print_console("RTC SET COMPLETED...")

    def INITIALIZE_JIG(self):
        self.print_console("INITIALIZING JIG TEST STARTED...")
        self.M2000.SET_PFC(pfc=1, status=1, alarm_index=1)
        self.M2000.SET_PFC(pfc=1, status=1, alarm_index=1)
        time.sleep(5)
        self.print_console("INITIALIZING JIG TEST FINISHED....")

    def ConfigureATS(self):
        self.print_console("FACTORY RESTORE")
        self.print_console("WAITING FOR 20 SECONDS")
        if self.mcm_type == 1:
            M1000Telnet.telnet_set_command(OIDRead('SYSTEM COMMANDS')['factory restore'], 1)
            time.sleep(5)
            M1000Telnet.telnet_set_command(OIDRead('SYSTEM COMMANDS')['system reset'], 1)
            time.sleep(15)
            self.print_console("RESET DONE")
            M1000Telnet.telnet_set_command(OIDRead('SYSTEM COMMANDS')['ate test'], "TEST_M1000_ATE")
            self.print_console("CONFIGURING ATS...")
            config = configparser.ConfigParser()
            cfgfile = open(f"{gui_global.files_directory_location}config.ini", 'w')
            config.add_section("DUT CONFIGURATION")
            if self.custom_check.isChecked():
                if DefaultRead("DEFAULT SETTING STATE")['max smr count'] == "YES":
                    max_smr_count = int(DefaultRead('DEFAULT SETTING')["max smr count"])
                    M1000Telnet.telnet_set_command(OIDRead('SYSTEM CONFIG')['smr count'], max_smr_count)

            phase_type = int(M1000Telnet.telnet_get_command(OIDRead("SYSTEM CONFIG")['ac phases type']))
            if phase_type == 0:
                phase_type = 'SINGLE PHASE'
            elif phase_type == 1:
                phase_type = 'THREE PHASE'
            config.set("DUT CONFIGURATION", 'ac phases type', phase_type)

            battery_fuses_count = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['no. of battery fuses']))
            config.set('DUT CONFIGURATION', 'no. of battery fuses', battery_fuses_count)

            battery_lvd_count = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['no. of battery lvd']))
            config.set('DUT CONFIGURATION', 'no. of battery lvd', battery_lvd_count)

            load_lvd_count = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['no. of load lvd']))
            config.set('DUT CONFIGURATION', 'no. of load lvd', load_lvd_count)

            load_current_count = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['no. of load current']))
            config.set('DUT CONFIGURATION', 'no. of load current', load_current_count)

            load_current_sensor_state = int(
                M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['load current sensor']))
            if load_current_sensor_state == 0:
                load_current_sensor_state = 'DISABLE'
            elif load_current_sensor_state == 1:
                load_current_sensor_state = 'ENABLE'
            # PRINT_CONSOLE(self,load_current_sensor_state)
            config.set('DUT CONFIGURATION', 'load current sensor', load_current_sensor_state)

            dcif_card_state = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['dcif card']))
            if dcif_card_state == 0:
                dcif_card_state = 'DISABLE'
            elif dcif_card_state == 1:
                dcif_card_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'dcif card', dcif_card_state)

            dcif_type = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['dcif card type']))
            config.set('DUT CONFIGURATION', 'dcif card type number', dcif_type)
            if dcif_type == 0:
                dcif_type = 'HALL EFFECT'
                for count in range(1, load_current_count + 1):
                    load_hall_effect_value = int(M1000Telnet.telnet_get_command(
                        OIDRead('SYSTEM CONFIG')['load' + str(count) + ' hall effect value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' hall effect value',
                               load_hall_effect_value)
                for count in range(load_current_count + 1, load_current_count + battery_lvd_count + 1):
                    batt_hall_effect_value = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')[
                                                                                    'batt' + str(
                                                                                        count - load_current_count) + ' hall effect value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' hall effect value',
                               batt_hall_effect_value)

            elif dcif_type == 1:
                dcif_type = 'SHUNT'
                for count in range(1, load_current_count + 1):
                    load_hall_effect_value = int(
                        M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['load' + str(count) + ' shunt value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' shunt value', load_hall_effect_value)
                    load_hall_effect_value = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')[
                                                                                    'load' + str(
                                                                                        count) + ' shunt mv value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' shunt mv value', load_hall_effect_value)
                for count in range(load_current_count + 1, load_current_count + battery_lvd_count + 1):
                    batt_hall_effect_value = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')[
                                                                                    'batt' + str(
                                                                                        count - load_current_count) + ' shunt value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' shunt value', batt_hall_effect_value)
                    batt_hall_effect_value = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')[
                                                                                    'batt' + str(
                                                                                        count - load_current_count) + ' shunt mv value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' shunt mv value', batt_hall_effect_value)

            elif dcif_type == 2 or dcif_type == 3:  # added dcif type 3 to logic ,17/06/2019
                dcif_type = 'SHUNT SMALL'
                for count in range(1, load_current_count + 1):
                    load_hall_effect_value = int(
                        M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['load' + str(count) + ' shunt value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' shunt value', load_hall_effect_value)
                    load_hall_effect_value = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')[
                                                                                    'load' + str(
                                                                                        count) + ' shunt mv value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' shunt mv value', load_hall_effect_value)
                for count in range(load_current_count + 1, load_current_count + battery_lvd_count + 1):
                    batt_hall_effect_value = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')[
                                                                                    'batt' + str(
                                                                                        count - load_current_count) + ' shunt value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' shunt value', batt_hall_effect_value)
                    batt_hall_effect_value = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')[
                                                                                    'batt' + str(
                                                                                        count - load_current_count) + ' shunt mv value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' shunt mv value', batt_hall_effect_value)

            config.set('DUT CONFIGURATION', 'dcif card type', dcif_type)

            hvlv_card_state = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['hvlv card']))
            if hvlv_card_state == 0:
                hvlv_card_state = 'DISABLE'
            elif hvlv_card_state == 1:
                hvlv_card_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'hvlv card', hvlv_card_state)

            dcif_ip_card_state = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['dcif ip card']))
            if dcif_ip_card_state == 0:
                dcif_ip_card_state = 'DISABLE'
            elif dcif_ip_card_state == 1:
                dcif_ip_card_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'dcif ip card', dcif_ip_card_state)

            dcif_op_card_state = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['dcif op card']))
            if dcif_op_card_state == 0:
                dcif_op_card_state = 'DISABLE'
            elif dcif_op_card_state == 1:
                dcif_op_card_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'dcif op card', dcif_op_card_state)

            batt_temperature_state = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['temperature1']))
            if batt_temperature_state == 0:
                batt_temperature_state = 'DISABLE'
            elif batt_temperature_state == 1:
                batt_temperature_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'temperature1', batt_temperature_state)

            room_temperature1_state = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['temperature2']))
            if room_temperature1_state == 0:
                room_temperature1_state = 'DISABLE'
            elif room_temperature1_state == 1:
                room_temperature1_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'temperature2', room_temperature1_state)

            room_temperature2_state = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['temperature3']))
            if room_temperature2_state == 0:
                room_temperature2_state = 'DISABLE'
            elif room_temperature2_state == 1:
                room_temperature2_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'temperature3', room_temperature2_state)

            pfc_io_card_state = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['pfc io card']))
            if pfc_io_card_state == 0:
                pfc_io_card_state = 'DISABLE'
            elif pfc_io_card_state == 1:
                pfc_io_card_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'pfc io card', pfc_io_card_state)

            smr_count = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['smr count']))
            config.set('DUT CONFIGURATION', 'smr count', smr_count)

            smr_type = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['smr type']))
            if smr_type == 0:
                smr_type = '100A'
            elif smr_type == 1:
                smr_type = '3KW'
            elif smr_type == 2:
                smr_type = '25A'
            config.set('DUT CONFIGURATION', 'smr type', smr_type)

            battery_type = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['battery type']))
            if battery_type == 0:
                battery_type = 'VRLA'
            elif battery_type == 1:
                battery_type = 'VRLA+LION'
            elif battery_type == 2:
                battery_type = 'LION'
            config.set('DUT CONFIGURATION', 'battery type', battery_type)

            if battery_type == 'VRLA':
                battery_capacity = int(
                    M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['vrla battery capacity']))
                bcl_factor = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['vrla bcl factor']))
            if battery_type == 'LION' or battery_type == 'VRLA+LION':
                battery_capacity = int(
                    M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['lion battery capacity']))
                bcl_factor = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['lion bcl factor']))
                module_count = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['lion module count']))
                config.set('DUT CONFIGURATION', 'lion module count', module_count)
            config.set('DUT CONFIGURATION', 'battery capacity', battery_capacity)
            config.set('DUT CONFIGURATION', 'bcl factor', bcl_factor)

            ac_ip_voltage_source = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['ac ip voltage source']))
            if ac_ip_voltage_source == 1:
                ac_ip_voltage_source = 'ACIF '
            elif ac_ip_voltage_source == 2:
                ac_ip_voltage_source = 'HVLV PN'
            elif ac_ip_voltage_source == 3:
                ac_ip_voltage_source = 'HVLV PP'
            elif ac_ip_voltage_source == 4:
                ac_ip_voltage_source = 'SMR 1P'
            elif ac_ip_voltage_source == 5:
                ac_ip_voltage_source = 'SMR 3P'
            config.set('DUT CONFIGURATION', 'ac ip voltage source', ac_ip_voltage_source)

            ac_ip_current_source = int(M1000Telnet.telnet_get_command(OIDRead('SYSTEM CONFIG')['ac ip current source']))
            if ac_ip_current_source == 0:
                ac_ip_current_source = 'NO SENSING '
            elif ac_ip_current_source == 1:
                ac_ip_current_source = 'ACIF '
            elif ac_ip_current_source == 2:
                ac_ip_current_source = 'HVLV PN'
            elif ac_ip_current_source == 3:
                ac_ip_current_source = 'HVLV PP'
            elif ac_ip_current_source == 4:
                ac_ip_current_source = 'SMR 1P'
            elif ac_ip_current_source == 5:
                ac_ip_current_source = 'SMR 3P'
            config.set('DUT CONFIGURATION', 'ac ip current source', ac_ip_current_source)

            lower_port_baudrate = int(M1000Telnet.telnet_get_command(OIDRead('RS 485')['lower port baudrate']))
            config.set('DUT CONFIGURATION', 'lower port baudrate', lower_port_baudrate)

            upper_port_baudrate = int(M1000Telnet.telnet_get_command(OIDRead('RS 485')['upper port baudrate']))
            config.set('DUT CONFIGURATION', 'upper port baudrate', upper_port_baudrate)

            modbus_comm_port = int(M1000Telnet.telnet_get_command(OIDRead('RS 485')['modbus comm']))
            config.set('DUT CONFIGURATION', 'modbus comm', modbus_comm_port)

            lithium_ion_comm_port = int(M1000Telnet.telnet_get_command(OIDRead('RS 485')['lithium ion comm']))
            config.set('DUT CONFIGURATION', 'lithium ion comm', lithium_ion_comm_port)

            acem_comm_port = int(M1000Telnet.telnet_get_command(OIDRead('RS 485')['acem comm']))
            config.set('DUT CONFIGURATION', 'acem comm', acem_comm_port)

            dg_amf_comm_port = int(M1000Telnet.telnet_get_command(OIDRead('RS 485')['dg amf comm']))
            config.set('DUT CONFIGURATION', 'dg amf comm', dg_amf_comm_port)

            solar_hvlv_comm_port = int(M1000Telnet.telnet_get_command(OIDRead('RS 485')['solar hvlv comm']))
            config.set('DUT CONFIGURATION', 'solar hvlv comm', solar_hvlv_comm_port)

            ext_dcem_comm_port = int(M1000Telnet.telnet_get_command(OIDRead('RS 485')['ext dcem comm']))
            config.set('DUT CONFIGURATION', 'ext dcem comm', ext_dcem_comm_port)

            bnms_comm_port = int(M1000Telnet.telnet_get_command(OIDRead('RS 485')['bnms comm']))
            config.set('DUT CONFIGURATION', 'bnms comm', bnms_comm_port)

            config.write(cfgfile)
            cfgfile.close()
            self.print_console("ATS CONFIGURED...")
            return True

        elif self.mcm_type == 2:
            self.M2000.MCM_SET_COMMAND(M2000OIDRead("SYSTEM COMMANDS")['system reset'], 1)
            time.sleep(5)
            self.M2000.MCM_SET_COMMAND(M2000OIDRead('SYSTEM COMMANDS')['system reset'], 1)
            time.sleep(15)
            self.print_console("RESET DONE")
            self.print_console("CONFIGURING ATS....")
            config = configparser.ConfigParser()
            cfgfile = open(f"{gui_global.files_directory_location}config.ini", 'w')
            config.add_section("DUT CONFIGURATION")
            if self.custom_check.isChecked():
                if DefaultRead('DEFAULT SETTING STATE')['max smr count'] == "YES":
                    max_smr_count = int(DefaultRead("DEFAULT SETTING")['max smr count'])
                    self.M2000.MCM_SET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['smr count'], max_smr_count)

            phase_type = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['ac phases type']))
            if phase_type == 0:
                phase_type = 'SINGLE PHASE'
            elif phase_type == 1:
                phase_type = 'THREE PHASE'
            # PRINT_CONSOLE(self,phase_type)
            config.set('DUT CONFIGURATION', 'ac phases type', phase_type)

            battery_fuses_count = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['no. of battery fuses']))
            config.set('DUT CONFIGURATION', 'no. of battery fuses', battery_fuses_count)

            battery_lvd_count = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['no. of battery lvd']))
            config.set('DUT CONFIGURATION', 'no. of battery lvd', battery_lvd_count)

            load_lvd_count = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['no. of load lvd']))
            config.set('DUT CONFIGURATION', 'no. of load lvd', load_lvd_count)

            load_current_count = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['no. of load current']))
            config.set('DUT CONFIGURATION', 'no. of load current', load_current_count)

            load_current_sensor_state = int(
                self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['load current sensor']))
            if load_current_sensor_state == 0:
                load_current_sensor_state = 'DISABLE'
            elif load_current_sensor_state == 1:
                load_current_sensor_state = 'ENABLE'
            # PRINT_CONSOLE(self,load_current_sensor_state)
            config.set('DUT CONFIGURATION', 'load current sensor', load_current_sensor_state)

            dcif_card_state = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['dcif card']))
            if dcif_card_state == 0:
                dcif_card_state = 'DISABLE'
            elif dcif_card_state == 1:
                dcif_card_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'dcif card', dcif_card_state)

            dcif_type = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['dcif card type']))
            config.set('DUT CONFIGURATION', 'dcif card type number', dcif_type)
            if dcif_type == 0:
                dcif_type = 'HALL EFFECT'
                for count in range(1, load_current_count + 1):
                    load_hall_effect_value = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')[
                                                                                'load' + str(
                                                                                    count) + ' hall effect value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' hall effect value',
                               load_hall_effect_value)
                for count in range(load_current_count + 1, load_current_count + battery_lvd_count + 1):
                    batt_hall_effect_value = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')[
                                                                                'batt' + str(
                                                                                    count - load_current_count) + ' hall effect value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' hall effect value',
                               batt_hall_effect_value)

            elif dcif_type == 1:
                dcif_type = 'SHUNT'
                for count in range(1, load_current_count + 1):
                    load_hall_effect_value = int(
                        self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['load' + str(count) + ' shunt value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' shunt value', load_hall_effect_value)
                    load_hall_effect_value = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')[
                                                                                'load' + str(
                                                                                    count) + ' shunt mv value']))
                    config.set('DUT CONFIGURATION', 'channel ' + str(count) + ' shunt mv value', load_hall_effect_value)
                for count in range(load_current_count + 1, load_current_count + battery_lvd_count + 1):
                    batt_hall_effect_value = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')[
                                                                                'batt' + str(
                                                                                    count - load_current_count) + ' shunt value']))
                    config.set('DUT CONFIGURATION', 'channel' + str(count) + ' shunt value', batt_hall_effect_value)
                    batt_hall_effect_value = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')[
                                                                                'batt' + str(
                                                                                    count - load_current_count) + ' shunt mv value']))
                    config.set('DUT CONFIGURATION', 'channel' + str(count) + ' shunt mv value', batt_hall_effect_value)

            elif dcif_type == 2 or dcif_type == 3:  # added dcif type 3 to logic ,17/06/2019
                dcif_type = 'SHUNT SMALL'
                for count in range(1, load_current_count + 1):
                    load_hall_effect_value = int(
                        self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['load' + str(count) + ' shunt value']))
                    config.set('DUT CONFIGURATION', 'channel' + str(count) + ' shunt value', load_hall_effect_value)
                    load_hall_effect_value = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')[
                                                                                'load' + str(
                                                                                    count) + ' shunt mv value']))
                    config.set('DUT CONFIGURATION', 'channel' + str(count) + ' shunt mv value', load_hall_effect_value)
                for count in range(load_current_count + 1, load_current_count + battery_lvd_count + 1):
                    batt_hall_effect_value = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')[
                                                                                'batt' + str(
                                                                                    count - load_current_count) + ' shunt value']))
                    config.set('DUT CONFIGURATION', 'channel' + str(count) + ' shunt value', batt_hall_effect_value)
                    batt_hall_effect_value = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')[
                                                                                'batt' + str(
                                                                                    count - load_current_count) + ' shunt mv value']))
                    config.set('DUT CONFIGURATION', 'channel' + str(count) + ' shunt mv value', batt_hall_effect_value)

            config.set('DUT CONFIGURATION', 'dcif card type', dcif_type)

            hvlv_card_state = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['hvlv card']))
            if hvlv_card_state == 0:
                hvlv_card_state = 'DISABLE'
            elif hvlv_card_state == 1:
                hvlv_card_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'hvlv card', hvlv_card_state)

            dcif_ip_card_state = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['dcif ip card']))
            if dcif_ip_card_state == 0:
                dcif_ip_card_state = 'DISABLE'
            elif dcif_ip_card_state == 1:
                dcif_ip_card_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'dcif ip card', dcif_ip_card_state)

            dcif_op_card_state = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['dcif op card']))
            if dcif_op_card_state == 0:
                dcif_op_card_state = 'DISABLE'
            elif dcif_op_card_state == 1:
                dcif_op_card_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'dcif op card', dcif_op_card_state)

            batt_temperature_state = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['temperature1']))
            if batt_temperature_state == 1:
                batt_temperature_state = 'DISABLE'
            elif batt_temperature_state == 0:
                batt_temperature_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'temperature1', batt_temperature_state)

            room_temperature1_state = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['temperature2']))
            if room_temperature1_state == 0:
                room_temperature1_state = 'DISABLE'
            elif room_temperature1_state == 1:
                room_temperature1_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'temperature2', room_temperature1_state)

            room_temperature2_state = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['temperature3']))
            if room_temperature2_state == 0:
                room_temperature2_state = 'DISABLE'
            elif room_temperature2_state == 1:
                room_temperature2_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'temperature3', room_temperature2_state)

            pfc_io_card_state = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['pfc io card']))
            if pfc_io_card_state == 0:
                pfc_io_card_state = 'DISABLE'
            elif pfc_io_card_state == 1:
                pfc_io_card_state = 'PRESENT'
            config.set('DUT CONFIGURATION', 'pfc io card', pfc_io_card_state)

            smr_count = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['smr count']))
            config.set('DUT CONFIGURATION', 'smr count', smr_count)

            smr_type = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['smr type']))
            if smr_type == 0:
                smr_type = '100A'
            elif smr_type == 1:
                smr_type = '3KW'
            elif smr_type == 2:
                smr_type = '25A'
            elif smr_type == 3:
                smr_type = '25A'
            config.set('DUT CONFIGURATION', 'smr type', smr_type)

            battery_type = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['battery type']))
            if battery_type == 0:
                battery_type = 'VRLA'
            elif battery_type == 1:
                battery_type = 'VRLA+LION'
            elif battery_type == 2:
                battery_type = 'LION'
            config.set('DUT CONFIGURATION', 'battery type', battery_type)

            if battery_type == 'VRLA':
                battery_capacity = int(
                    self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['vrla battery capacity']))
                bcl_factor = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['vrla bcl factor']))
            if battery_type == 'LION' or battery_type == 'VRLA+LION':
                battery_capacity = int(
                    self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['lion battery capacity']))
                bcl_factor = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['lion bcl factor']))
                module_count = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['lion module count']))
                config.set('DUT CONFIGURATION', 'lion module count', module_count)
            config.set('DUT CONFIGURATION', 'battery capacity', battery_capacity)
            config.set('DUT CONFIGURATION', 'bcl factor', bcl_factor)

            ac_ip_voltage_source = int(
                self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['ac ip voltage source']))
            if ac_ip_voltage_source == 1:
                ac_ip_voltage_source = 'ACIF '
            elif ac_ip_voltage_source == 2:
                ac_ip_voltage_source = 'HVLV PN'
            elif ac_ip_voltage_source == 3:
                ac_ip_voltage_source = 'HVLV PP'
            elif ac_ip_voltage_source == 4:
                ac_ip_voltage_source = 'SMR 1P'
            elif ac_ip_voltage_source == 5:
                ac_ip_voltage_source = 'SMR 3P'
            config.set('DUT CONFIGURATION', 'ac ip voltage source', ac_ip_voltage_source)

            ac_ip_current_source = int(
                self.M2000.MCM_GET_COMMAND(M2000OIDRead('SYSTEM CONFIG')['ac ip current source']))
            if ac_ip_current_source == 0:
                ac_ip_current_source = 'NO SENSING '
            elif ac_ip_current_source == 1:
                ac_ip_current_source = 'ACIF '
            elif ac_ip_current_source == 2:
                ac_ip_current_source = 'HVLV PN'
            elif ac_ip_current_source == 3:
                ac_ip_current_source = 'HVLV PP'
            elif ac_ip_current_source == 4:
                ac_ip_current_source = 'SMR 1P'
            elif ac_ip_current_source == 5:
                ac_ip_current_source = 'SMR 3P'
            config.set('DUT CONFIGURATION', 'ac ip current source', ac_ip_current_source)

            lower_port_baudrate = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('RS 485')['lower port baudrate']))
            if lower_port_baudrate == 0:
                lower_port_baudrate = 9600
            elif lower_port_baudrate == 1:
                lower_port_baudrate = 19200
            elif lower_port_baudrate == 2:
                lower_port_baudrate = 115200
            config.set('DUT CONFIGURATION', 'lower port baudrate', lower_port_baudrate)

            upper_port_baudrate = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('RS 485')['upper port baudrate']))

            if upper_port_baudrate == 0:
                upper_port_baudrate = 9600
            elif upper_port_baudrate == 1:
                upper_port_baudrate = 19200
            elif upper_port_baudrate == 2:
                upper_port_baudrate = 115200
            config.set('DUT CONFIGURATION', 'upper port baudrate', upper_port_baudrate)
            modbus_comm_port = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('RS 485')['modbus comm']))
            config.set('DUT CONFIGURATION', 'modbus comm', modbus_comm_port)

            lithium_ion_comm_port = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('RS 485')['lithium ion comm']))
            config.set('DUT CONFIGURATION', 'lithium ion comm', lithium_ion_comm_port)

            acem_comm_port = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('RS 485')['acem comm']))
            config.set('DUT CONFIGURATION', 'acem comm', acem_comm_port)

            dg_amf_comm_port = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('RS 485')['dg amf comm']))
            config.set('DUT CONFIGURATION', 'dg amf comm', dg_amf_comm_port)

            solar_hvlv_comm_port = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('RS 485')['solar hvlv comm']))
            config.set('DUT CONFIGURATION', 'solar hvlv comm', solar_hvlv_comm_port)

            ext_dcem_comm_port = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('RS 485')['ext dcem comm']))
            config.set('DUT CONFIGURATION', 'ext dcem comm', ext_dcem_comm_port)

            bnms_comm_port = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('RS 485')['bnms comm']))
            config.set('DUT CONFIGURATION', 'bnms comm', bnms_comm_port)

            config.write(cfgfile)
            cfgfile.close()
            PRINT_CONSOLE(self, "ATS CONFIGURED...")
            return True

    def CARD_COMMUNICATION(self):
        self.print_console("CARD COMMUNICATION TEST STARTED....")
        RESULT = []
        hvlv_card_state = ConfigRead("DUT CONFIGURATION")['hvlv card']
        dcif_card_state = ConfigRead("DUT CONFIGURATION")['dcif card']
        pfcio_card_state = ConfigRead("DUT CONFIGURATION")['pfc op card']
        ac_phase_type = ConfigRead("DUT CONFIGURATION")['ac phases type']

        if self.mcm_type == 1:
            alarm_comm_fail = int(M1000Telnet.telnet_get_command(OIDRead('ALARM')['can comm fail']))
            if alarm_comm_fail == 0:
                RESULT_TEMP = True
                self.print_console("CAN COMM OK")
            else:
                RESULT_TEMP = False
                self.print_console("CAN COMM FAIL", "RED")
            RESULT.append(RESULT_TEMP)

            if hvlv_card_state == "PRESENT":
                if ac_phase_type == "SINGLE PHASE":
                    print("SINGLE PHASE VOLTAGE")  # add
                elif ac_phase_type == "THREE PHASE":
                    print("THREE PHASE VOLTAGE")  # add

                ## AC Contactor PFC need to be added

                time.sleep(10)
                self.print_console("HVLV CARD IS PRESENT ")
                alarm_comm_fail = int(M1000Telnet.telnet_get_command(OIDRead("ALARM")['hvlv comm fail']))
                if alarm_comm_fail == 0:
                    RESULT_TEMP = True
                    self.print_console("HVLV COMM OK")
                else:
                    RESULT_TEMP = False
                    self.print_console("HVLV COMM OK", "RED")

            else:
                self.print_console("HVLV CARD IS NOT PRESENT", 'RED')
                RESULT_TEMP = True
            RESULT.append(RESULT_TEMP)

            if dcif_card_state == "PRESENT":
                alarm_comm_fail = int(M1000Telnet.telnet_get_command(OIDRead('ALARM')['dcif comm fail']))
                if alarm_comm_fail == 0:
                    RESULT_TEMP = True
                    self.print_console("DCIF COMM OK")
                else:
                    RESULT_TEMP = False
                    self.print_console("DCIF COMM FAIL", "RED")
            else:
                RESULT_TEMP = True
            RESULT.append(RESULT_TEMP)

            if pfcio_card_state == "PRESENT":
                alarm_comm_fail = int(M1000Telnet.telnet_get_command(OIDRead('ALARM')['pfc1 comm fail']))
                if alarm_comm_fail == 0:
                    RESULT_TEMP = True
                    self.print_console("CAN PFC IO COMM OK")
                else:
                    RESULT_TEMP = False
                    self.print_console("CAN PFC IO COMM FAIL", "RED")
            else:
                RESULT_TEMP = True
            RESULT.append(RESULT_TEMP)

            self.print_console("CARD COMMUNICATION TEST FINISHED....")
            return CALCULATE_RESULT(RESULT)

            # return True
        elif self.mcm_type == 2:
            return True

    def TEMPERATURE_MEASUREMENT(self):
        global temperature_text
        RESULT = []
        self.print_console("TEMPERATURE MEASUREMENT TEST STARTED....")
        if self.mcm_type == 1:
            M1000Telnet.telnet_set_command(OIDRead('SYSTEM COMMANDS')['ate test'], "TEST_M1000_ATE")
            for temp in range(1, 4):
                if temp == 1:
                    temperature_text = "BATTERY TEMPERATURE"
                elif temp == 2:
                    temperature_text = "ROOM TEMPERATURE 1"
                elif temp == 3:
                    temperature_text = "ROOM TEMPERATURE 2"
                temperature_state = ConfigRead("DUT CONFIGURATION")['temperature' + str(temp)]
                if temperature_state == "DISABLE":
                    self.print_console(f"{temperature_text} sensor not applicable")
                    RESULT_TEMP = True
                    RESULT.append(RESULT_TEMP)
                else:
                    temperature = float(
                        M1000Telnet.telnet_get_command(OIDRead('READ TEMPERATURE')['temperature' + str(temp)]))
                    if temperature < 9 or temperature > 40:
                        self.print_console(f"{temperature_text} cable not installed/ faulty", "RED")
                        RESULT_TEMP = False
                        RESULT.append(RESULT_TEMP)
                        self.print_console(f"{temperature_text} : {temperature}")
                    else:
                        temperature_list = []
                        for i in range(1, 5):
                            temperature = M1000Telnet.telnet_get_command(
                                OIDRead('READ TEMPERATURE')['temperature' + str(temp)])
                            temperature_list.append(temperature)
                        # self.print_console(f"{temperature_list}")
                        temperature_minimum = float(min(temperature_list))
                        temperature_maximum = float(max(temperature_list))
                        if abs(temperature_maximum - temperature_minimum) < 2:
                            RESULT_TEMP = True
                            self.print_console(f"{temperature_text} CABLE OK")
                        else:
                            RESULT_TEMP = False
                            self.print_console(f"{temperature_text} CABLE FAULTY", "RED")
                        RESULT.append(RESULT_TEMP)
            self.print_console("TEMPERATURE MEASUREMENT TEST FINISHED...")
            return CALCULATE_RESULT(RESULT)

        elif self.mcm_type == 2:
            for temp in range(1, 4):
                if temp == 1:
                    temperature_text = "BATTERY TEMPERATURE"
                elif temp == 2:
                    temperature_text = "ROOM TEMPERATURE 1"
                elif temp == 3:
                    temperature_text = "ROOM TEMPERATURE 2"
                temperature_state = ConfigRead("DUT CONFIGURATION")['temperature' + str(temp)]
                if temperature_state == "DISABLE":
                    self.print_console(f"{temperature_text} sensor not applicable")
                    RESULT_TEMP = True
                    RESULT.append(RESULT_TEMP)
                else:
                    temperature = float(
                        self.M2000.MCM_GET_COMMAND(M2000OIDRead('READ TEMPERATURE')['temperature' + str(temp)]))
                    if temperature < 9 or temperature > 40:
                        self.print_console(f"{temperature_text} cable not installed/ faulty", "RED")
                        RESULT_TEMP = False
                        RESULT.append(RESULT_TEMP)
                        self.print_console(f"{temperature_text} : {temperature}")
                    else:
                        temperature_list = []
                        for i in range(1, 5):
                            temperature = self.M2000.MCM_GET_COMMAND(
                                M2000OIDRead('READ TEMPERATURE')['temperature' + str(temp)])
                            temperature_list.append(temperature)
                        # self.print_console(f"{temperature_list}")
                        temperature_minimum = float(min(temperature_list))
                        temperature_maximum = float(max(temperature_list))
                        if abs(temperature_maximum - temperature_minimum) < 2:
                            RESULT_TEMP = True
                            self.print_console(f"{temperature_text} CABLE OK")
                        else:
                            RESULT_TEMP = False
                            self.print_console(f"{temperature_text} CABLE FAULTY", "RED")
                        RESULT.append(RESULT_TEMP)
            self.print_console("TEMPERATURE MEASUREMENT TEST FINISHED...")
            return CALCULATE_RESULT(RESULT)

    def OP_PFC_CHECK(self):

        """
        TEST BLOCK OF OUTPUT PFC

        DEFINES AND TEST OUTPUT PFC(S) OR LVD(S) OF THE RACK SYSTEM

        :return: STATUS OF THE FUNCTION BLOCK IN BOOLEAN FORM (TRUE OR FALSE)
        """

        RESULT = []
        RESULT_1 = []
        RESULT_2 = []
        self.print_console("OP_PFC_CHECK TEST STARTED...")
        pfcio_card_state = ConfigRead("DUT CONFIGURATION")['pfc io card']
        dcif_op_card_state = ConfigRead("DUT CONFIGURATION")['dcif op card']
        dcif_type_number = int(ConfigRead('DUT CONFIGURATION')['dcif card type number'])
        if dcif_type_number == 1 or dcif_type_number == 2:
            if self.mcm_type == 1:
                M1000Telnet.telnet_set_command(OIDRead('SYSTEM COMMANDS')['ate test'], "TEST_M1000_ATE")

            for op_pfc in range(1, 3):
                set_dut_pfc = pow(2, op_pfc + 4)
                if self.mcm_type == 1:
                    M1000Telnet.telnet_set_command(OIDRead('DCIF 2 OP PFC')['pfc'], set_dut_pfc)
                elif self.mcm_type == 2:
                    self.M2000.MCM_SET_COMMAND(M2000OIDRead('DCIF 2 OP PFC')['pfc'], set_dut_pfc)
                if dcif_op_card_state == "PRESENT":
                    set_dcif_pfc = pow(2, op_pfc - 1)
                    if self.mcm_type == 1:
                        M1000Telnet.telnet_set_command(OIDRead('DCIF 8 OP PFC')['pfc'], set_dcif_pfc)
                    elif self.mcm_type == 2:
                        self.M2000.MCM_SET_COMMAND(M2000OIDRead('DCIF 8 OP PFC')['pfc'], set_dcif_pfc)
                time.sleep(2)
                print(f"Checking for pfc {op_pfc}")
                for op_pfc_check in range(1, 3):
                    jig_pfc = (2 * op_pfc_check) - 1

                    if op_pfc == op_pfc_check:
                        print("same PFC")
                        if self.pfc.read_pfc(card_id=self.contact.CARD2, pfc_number=jig_pfc) == 0:
                            RESULT_TEMP = True
                            self.print_console(f"LVD PFC {op_pfc_check} NC is OK")
                        else:
                            RESULT_TEMP = False
                            self.print_console(f"LVD OP PFC {op_pfc} NC SLOT IS FAULTY", 'RED')
                        RESULT_1.append(RESULT_TEMP)
                        if self.pfc.read_pfc(self.contact.CARD2, pfc_number=jig_pfc + 1) == 1:
                            RESULT_TEMP = True
                            self.print_console(f"LVD PFC {op_pfc_check} NC IS OK")
                        else:
                            RESULT_TEMP = False
                            self.print_console(f"LVD OP PFC {op_pfc} NC SLOT IS FAULTY", 'RED')
                        RESULT_1.append(RESULT_TEMP)
                    else:
                        print("Different PFC")
                        if self.pfc.read_pfc(self.contact.CARD2, jig_pfc) == 1:
                            RESULT_TEMP = True
                        else:
                            RESULT_TEMP = False
                            self.print_console(f"LVD OP PFC {op_pfc_check} NC SLOT IS SHORT WITH OP PFC {op_pfc}",
                                               "RED")
                        RESULT_1.append(RESULT_TEMP)
                        if self.pfc.read_pfc(self.contact.CARD2, jig_pfc + 1) == 0:
                            RESULT_TEMP = True
                        else:
                            RESULT_TEMP = False
                            self.print_console(f"LVD OP PFC {op_pfc_check} NC SLOT IS SHORT WITH OP PFC {op_pfc}",
                                               "RED")
                        RESULT_1.append(RESULT_TEMP)
                if self.mcm_type == 1:
                    M1000Telnet.telnet_set_command(OIDRead('DCIF 2 OP PFC')['pfc'], 0)
                    M1000Telnet.telnet_set_command(OIDRead('DCIF 2 OP PFC')['pfc'], 0)
                elif self.mcm_type == 2:
                    self.M2000.MCM_SET_COMMAND(M2000OIDRead('DCIF 2 OP PFC')['pfc'], 0)
                    self.M2000.MCM_SET_COMMAND(M2000OIDRead('DCIF 2 OP PFC')['pfc'], 0)

            RESULT.append(CALCULATE_RESULT(RESULT_1))

            if dcif_op_card_state == "PRESENT":
                for op_pfc in range(1, 9):
                    if op_pfc < 3:
                        set_dut_pfc = pow(2, op_pfc + 4)
                        if self.mcm_type == 1:
                            M1000Telnet.telnet_set_command(OIDRead('DCIF 2 OP PFC')['pfc'], set_dut_pfc)
                        elif self.mcm_type == 2:
                            self.M2000.MCM_SET_COMMAND(M2000OIDRead('DCIF 2 OP PFC')['pfc'], set_dut_pfc)
                    set_dcif_pfc = pow(2, op_pfc - 1)
                    if self.mcm_type == 1:
                        M1000Telnet.telnet_set_command(OIDRead('DCIF 8 OP PFC')['pfc'], set_dcif_pfc)
                    elif self.mcm_type == 2:
                        self.M2000.MCM_SET_COMMAND(M2000OIDRead('DCIF 8 OP PFC')['pfc'], set_dcif_pfc)
                    time.sleep(2)
                    for op_pfc_check in range(1, 9):
                        jig_pfc_no = (2 * op_pfc_check) - 1
                        if op_pfc == op_pfc_check:
                            if self.pfc.read_pfc(self.contact.CARD2, jig_pfc_no) == 0:
                                RESULT_TEMP = True
                                self.print_console(f"DCIF OP PFC {op_pfc} NC SLOT IS OK")
                            else:
                                RESULT_TEMP = False
                                self.print_console(f"DCIF OP PFC {op_pfc} NC SLOT IS FAULTY", "RED")
                            RESULT_2.append(RESULT_TEMP)
                            if self.pfc.read_pfc(self.contact.CARD2, jig_pfc_no + 1) == 1:
                                RESULT_TEMP = True
                                self.print_console(f"DCIF OP PFC {op_pfc} NO SLOT IS OK")
                            else:
                                RESULT_TEMP = False
                                self.print_console(f"DCIF OP PFC {op_pfc} NO SLOT IS FAULTY", "RED")
                            RESULT_2.append(RESULT_TEMP)
                        else:
                            if self.pfc.read_pfc(self.contact.CARD2, jig_pfc_no) == 1:
                                RESULT_TEMP = True
                                # self.print_console(f"DCIF OP PFC {op_pfc} NC SLOT IS S")
                            else:
                                RESULT_TEMP = False
                                self.print_console(f"DCIF OP PFC {op_pfc} NC SLOT IS SHORT WITH OP PFC", "RED")
                            RESULT_2.append(RESULT_TEMP)
                            if self.pfc.read_pfc(self.contact.CARD2, jig_pfc_no + 1) == 0:
                                RESULT_TEMP = True
                                self.print_console(f"DCIF OP PFC {op_pfc} NO SLOT IS OK")
                            else:
                                RESULT_TEMP = False
                                self.print_console(f"DCIF OP PFC {op_pfc} NO SLOT IS SHORT WITH OP PFC", "RED")
                            RESULT_2.append(RESULT_TEMP)
                    if self.mcm_type == 1:
                        M1000Telnet.telnet_set_command(OIDRead('DCIF 8 OP PFC')['pfc'], 0)
                        if op_pfc < 3:
                            M1000Telnet.telnet_set_command(OIDRead('DCIF 2 OP PFC')['pfc'], 0)
                    elif self.mcm_type == 2:
                        self.M2000.MCM_SET_COMMAND(M2000OIDRead('DCIF 8 OP PFC')['pfc'], 0)
                        if op_pfc < 3:
                            self.M2000.MCM_SET_COMMAND(M2000OIDRead('DCIF 2 OP PFC')['pfc'], 0)
                RESULT.append(CALCULATE_RESULT(RESULT_2))
            else:
                self.print_console("DCIF 8 OP PFC CARD NOT APPLICABLE")
                RESULT_TEMP = True
                RESULT_2.append(RESULT_TEMP)
                RESULT.append(CALCULATE_RESULT(RESULT_2))
            self.print_console("OP_PFC_CHECK TEST FINISHED...")
            return CALCULATE_RESULT(RESULT)

        else:
            self.print_console("DCIF 8 OP PFC CARD TEST NOT APPLICABLE")
            RESULT_TEMP = True
            RESULT.append(RESULT_TEMP)
        self.print_console("OP_PFC_CHECK TEST FINISHED...")
        return CALCULATE_RESULT(RESULT)


    def IP_PFC_CHECK(self):
        """
        TEST BLOCK OF INPUT PFC

        DEFINES, TEST INPUT PFC(S) OR LVD(S) OF THE RACK SYSTEM

        :return: STATUS OF THE FUNCTION BLOCK IN BOOLEAN FORM (TRUE OR FALSE)
        """

        global RESULT_TEMP
        self.print_console("IP_PFC_CHECK TEST STARTED...")
        RESULT = []

        if self.mcm_type == 1:
            M1000Telnet.telnet_set_command(OIDRead('SYSTEM COMMANDS')['ate test'],"TEST_M1000_ATE")

        for i in range(1,9):
            self.pfc.pfc_stop(0, self.contact.CARD2)
        time.sleep(2)

        pfcio_card_state = ConfigRead('DUT CONFIGURATION')['pfc io card']
        dcif_ip_card_state = ConfigRead('DUT CONFIGURATION')['dcif ip card']
        dcif_type_number = int(ConfigRead('DUT CONFIGURATION')['dcif card type number'])

        if dcif_type_number == 1 or dcif_type_number == 2:
            if dcif_ip_card_state == "PRESENT":
                ip_pfc_count = 8
            else:
                ip_pfc_count = 2

            for i in range(1, ip_pfc_count + 1):
                if self.mcm_type == 1:
                    M1000Telnet.telnet_set_command(OIDRead('DCIF 8 IP PFC')['invert pfc']+str(i), 0)
                else:
                    MCM_SET_COMMAND(self.mcm, M2000OIDRead('DCIF 8 IP PFC')['invert pfc'] + str(i), 0)

            time.sleep(5)

            if self.mcm_type == 1:
                if int(M1000Telnet.telnet_get_command(OIDRead('DCIF 8 IP PFC')['pfc'])) == 0:
                    RESULT_TEMP = True
                else:
                    RESULT_TEMP = False
                    self.print_console("IP PFC CARD/ CABLE IS FAULTY...", "RED")
                    return RESULT_TEMP
            elif self.mcm_type == 2:
                if int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('DCIF 8 IP PFC')['pfc'])) == 0:
                    RESULT_TEMP = True
                else:
                    RESULT_TEMP = False
                    self.print_console("IP PFC CARD/ CABLE IS FAULTY...", "RED")
                    return RESULT_TEMP

            RESULT.append(RESULT_TEMP)

            pfc_contact_list = [PFC_control_done.PFC1, PFC_control_done.PFC2, PFC_control_done.PFC3, PFC_control_done.PFC4, PFC_control_done.PFC5, PFC_control_done.PFC6, PFC_control_done.PFC7, PFC_control_done.PFC8,
                                PFC_control_done.PFC9, PFC_control_done.PFC10, PFC_control_done.PFC11, PFC_control_done.PFC12, PFC_control_done.PFC13, PFC_control_done.PFC14, PFC_control_done.PFC15, PFC_control_done.PFC16, ]

            for ip_pfc in range(1, ip_pfc_count + 1):
                self.pfc.pfc_set(0, self.contact.CARD2, [pfc_contact_list[ip_pfc]])
                time.sleep(1)
                ip_pfc_state = pow(2, ip_pfc_count-1)
                state = 0
                if self.mcm_type == 1:
                    state = int(M1000Telnet.telnet_get_command(OIDRead('DCIF 8 IP PFC')['pfc']))
                elif self.mcm_type == 2:
                    state = int(self.M2000.MCM_GET_COMMAND(M2000OIDRead('DCIF 8 IP PFC')['pfc']))
                if state == ip_pfc_state:
                    RESULT_TEMP = True
                    self.print_console(f"IP PFC {ip_pfc} is OK")
                else:
                    RESULT_TEMP = False
                    self.print_console(f"IP PFC {ip_pfc} is faulty", "RED")
                RESULT.append(RESULT_TEMP)
                self.pfc.pfc_set((0, self.contact.CARD2, [pfc_contact_list[ip_pfc]]))

            self.prompt.TimerPrompt("Remove PFC JIG connector and Insert IP PFC system alarm connector")

        ac_phase_type = ConfigRead("DUT CONFIGURATION")['ac phases type']

        if ac_phase_type == "SINGLE PHASE":
            self.prompt.Message("REMOVE PHASE SPD")
            if int(self.MCM_READ_COMMAND('ALARM', 'spu fail')) == 1:
                RESULT_TEMP = True
                self.print_console("SPU ALARM FOR PHASE OK")
            else:
                RESULT_TEMP = False
                self.print_console("SPU ALARM FOR PHASE FAIL", 'RED')
            RESULT.append(RESULT_TEMP)

            self.prompt.Message("INSERT BACK PHASE SPD. REMOVE NEUTRAL SPD")

            if int(self.MCM_READ_COMMAND('ALARM', 'spu fail')) == 1:
                RESULT_TEMP = True
                self.print_console("SPU ALARM FOR NEUTRAL OK")
            else:
                RESULT_TEMP = False
                self.print_console("SPU ALARM FOR NEUTRAL FAIL", 'RED')
            RESULT.append(RESULT_TEMP)

        else:
            self.prompt.Message(prompt="REMOVE R PHASE SPD")
            time.sleep(2)
            if int(self.MCM_READ_COMMAND('ALARM', 'spu fail')) == 1:
                RESULT_TEMP = True
                self.print_console("SPU ALARM FOR R PHASE OK")
            else:
                RESULT_TEMP = False
                self.print_console("SPU ALARM FOR R PHASE FAIL", 'RED')
            RESULT.append(RESULT_TEMP)
            self.prompt.Message(prompt="INSERT BACK R PHASE SPD. REMOVE Y PHASE SPD")
            time.sleep(2)
            if int(self.MCM_READ_COMMAND('ALARM', 'spu fail')) == 1:
                RESULT_TEMP = True
                self.print_console("SPU ALARM FOR Y PHASE OK")
            else:
                RESULT_TEMP = False
                self.print_console("SPU ALARM FOR Y PHASE FAIL", 'RED')
            RESULT.append(RESULT_TEMP)
            self.prompt.Message(prompt="INSERT BACK Y PHASE SPD. REMOVE B PHASE SPD")
            time.sleep(2)
            if int(self.MCM_READ_COMMAND('ALARM', 'spu fail')) == 1:
                RESULT_TEMP = True
                self.print_console("SPU ALARM FOR B PHASE OK")
            else:
                RESULT_TEMP = False
                self.print_console("SPU ALARM FOR B PHASE FAIL", 'RED')
            RESULT.append(RESULT_TEMP)
            self.prompt.Message(prompt="INSERT BACK B PHASE SPD. REMOVE NEUTRAL PHASE SPD")
            time.sleep(2)
            if int(self.MCM_READ_COMMAND('ALARM', 'spu fail')) == 1:
                RESULT_TEMP = True
                self.print_console("SPU ALARM FOR NEUTRAL PHASE OK")
            else:
                RESULT_TEMP = False
                self.print_console("SPU ALARM FOR NEUTRAL PHASE FAIL", 'RED')
            RESULT.append(RESULT_TEMP)
        alarm = True
        while alarm:
            self.prompt.Message(prompt="INSERT BACK ALL SPD(S)")
            time.sleep(2)
            if int(self.MCM_READ_COMMAND('ALARM', 'spu fail')) == 0:
                alarm = False
        self.print_console("DOOR OPEN ALARM TEST STARTED...")

        user_state = self.prompt.User_prompt("DO YOU WANT TO TEST DOOR ALARM. PRESS ENTER TO PROCEED!")

        if user_state:
            read_restore_time = int(self.MCM_READ_COMMAND('DOOR SETTING', 'door open restore time'))
            self.MCM_WRITE_COMMAND('DOOR SETTING', 'door open restore time', 2)
            ip_pfc_state = True
            while ip_pfc_state:
                if not ip_pfc_state:
                    self.prompt.Message(prompt=f"ip_pfc_state {ip_pfc_state}")
                else:
                    self.prompt.Message(prompt="CLEAR DOOR OPEN ALARM, IF PRESENT. PRESS ENTER KEY TO PROCEED")
                    ip_pfc_state = False
                    self.prompt.Message(prompt="OPEN THE DOOR. PRESS ENTER KEY TO PROCEED")
                    self.prompt.TimerPrompt("WAIT FOR 6 SECONDS", 7)

                    if int(self.MCM_READ_COMMAND('ALARM', 'door open alarm')) == 1:
                        RESULT_TEMP_DOOR_TRIP = True
                        self.print_console("DOOR OPEN ALARM TESTED OK")
                    else:
                        RESULT_TEMP_DOOR_TRIP = False
                        self.print_console("DOOR OPEN ALARM TEST FAIL", 'RED')
                self.MCM_WRITE_COMMAND('DOOR SETTING', 'door open restore time', read_restore_time)
        else:
            print("door open alarm not tested")
            RESULT_TEMP_DOOR_TRIP = True
            self.print_console("DOOR OPEN TEST BYPASSED")
        RESULT.append(RESULT_TEMP_DOOR_TRIP)

        self.print_console("DOOR ALARM TEST FINISHED...")

        self.print_console("SMOKE ALARM TEST STARTED...")

        user_state = self.prompt.User_prompt("DO YOU WANT TO TEST SMOKE ALARM. PRESS ENTER TO PROCEED!")

        if user_state:
            ip_pfc_state = True
            while ip_pfc_state:
                if not ip_pfc_state:
                    self.prompt.Message(prompt=f"ip_pfc_state {ip_pfc_state}")
                else:
                    # self.prompt.Message(prompt="CLEAR DOOR OPEN ALARM, IF PRESENT. PRESS ENTER KEY TO PROCEED")
                    ip_pfc_state = False
                    self.prompt.Message(prompt="OPEN THE DOOR. PRESS ENTER KEY TO PROCEED")
                    self.prompt.TimerPrompt("WAIT FOR 6 SECONDS", 7)

                    if int(self.MCM_READ_COMMAND('ALARM', 'smoke alarm')) == 1:
                        RESULT_TEMP_DOOR_TRIP = True
                        self.print_console("SMOKE ALARM TESTED OK")
                    else:
                        RESULT_TEMP_DOOR_TRIP = False
                        self.print_console("SMOKE ALARM TEST FAIL", 'RED')
        else:
            print("smoke alarm not tested")
            RESULT_TEMP_DOOR_TRIP = True
            self.print_console("SMOKE ALARM TEST BYPASSED")
        RESULT.append(RESULT_TEMP_DOOR_TRIP)
        self.print_console("SMOKE ALARM TEST FINISHED...")

        self.print_console("POWER POINT/ AVIATION ALARM TEST STARTED...")

        user_state = self.prompt.User_prompt("DO YOU WANT TO TEST POWER POINT/ AVIATION. PRESS ENTER TO PROCEED!")

        if user_state:
            power_point = self.prompt.User_prompt("IS POWER POINT/ AVIATION CONTINUITY IS OKAY?")
            if power_point:
                RESULT_P_TEMP = True
                self.print_console("POWER POINT/ AVIATION TEST OK")
            else:
                RESULT_P_TEMP = False
                self.print_console("POWER POINT/ AVIATION TEST FAILED", 'RED')
        else:
            print("POWERPOINT NOT alarm not tested")
            RESULT_P_TEMP = True
            self.print_console("POWER POINT/ AVIATION TEST BYPASSED")
        RESULT.append(RESULT_P_TEMP)
        self.print_console("POWER POINT/ AVIATION TEST FINISHED...")


        self.print_console("FAN TEST STARTED...")

        user_state = self.prompt.User_prompt("DO YOU WANT TO TEST FAN FUNCTIONALITY. PRESS ENTER TO PROCEED!")

        if user_state:
            power_point = self.prompt.User_prompt("INCREASE TEMPERATURE OF TEMPERATURE SENSOR, IS FAN RUNNING?")
            if power_point:
                RESULT_P_TEMP = True
                self.print_console("FAN TEST TEST OK")
            else:
                RESULT_P_TEMP = False
                self.print_console("FAN TEST TEST FAILED", 'RED')
        else:
            print("FAN TEST not tested")
            RESULT_P_TEMP = True
            self.print_console("FAN FUNCTIONALITY TEST BYPASSED")
        RESULT.append(RESULT_P_TEMP)
        self.print_console("FAN TEST TEST FINISHED...")
        self.print_console("IP_PFC_CHECK TEST FINISHED...")
        return CALCULATE_RESULT(RESULT)


    def DC_VOLTAGE_MEASUREMENT(self):
        """
        TEST BLOCK OF DC VOLTAGE MEASUREMENT

        DEFINES, TEST DC VOLTAGES FOR THE RACK SYSTEM

        :return: STATUS OF THE FUNCTION BLOCK IN BOOLEAN FORM (TRUE OR FALSE)
        """
        pass


    def CALIBRATE_DC_VOLTAGE(self):

        DCIF_CARD_TYPE = ConfigRead("DUT CONFIGURATION")['dcif card type']

        self.pfc.pfc_set(0, self.pfc.CARD2, [PFC_control_done.PFC12])

        if self.mcm_type == 1:
            self.MCM_WRITE_COMMAND('SYSTEM COMMANDS', 'ate test', 'TEST_M1000_ATE')

        test_sub_id = 0

        RESULT = []

        self.print_console("CALIBRATE DC VOLTAGE TEST STARTED...")

        self.MCM_WRITE_COMMAND('CALIBRATE DC VOLTAGE', 'channel1 deadband', 50)

        self.dcload.DC_LOAD_SET_CURRENT_CC(5)

        self.smrcan.SMR_BATTERY_SET_VOLTAGE(53.5)

        battery_fuse_count = int(ConfigRead("DUT CONFIGURATION")['no. of battery fuses'])

        self.pfc.pfc_set(0, self.pfc.CARD2, [PFC_control_done.PFC8])

        DC_VOLTAGE_CALIBRATION_TOLERANCE = float(CalibrateSetting("GENERAL FACTORS")['dc voltage tolerance'])

        if battery_fuse_count == 1:
            self.pfc.pfc_set(0, self.pfc.CARD2, [PFC_control_done.PFC11])
        elif battery_fuse_count == 2:
            self.pfc.pfc_set(0, self.pfc.CARD2, [PFC_control_done.PFC11, PFC_control_done.PFC13])
        elif battery_fuse_count == 3:
            self.pfc.pfc_set(0, self.pfc.CARD2, [PFC_control_done.PFC11, PFC_control_done.PFC15, PFC_control_done.PFC13])

        self.MCM_WRITE_COMMAND("CALIBRATE DC VOLTAGE", 'channel1 gain', 0)

        time.sleep(1)

        self.dcload.DC_LOAD_SET_CURRENT_CC(20,"BATT")

        for i in range(0,6):

            self.print_console("RESETTING VOLTAGE GAIN AND DEADBAND")
            self.MCM_WRITE_COMMAND('CALIBRATE DC VOLTAGE', f'channel{i+1} deadband', 50)
            time.sleep(1)
            self.print_console(f"CHANNEL {i+1} VOLTAGE DEADBAND: {self.MCM_READ_COMMAND('CALIBRATE DC VOLTAGE',f'channel{i+1} deadband')}")
            self.MCM_WRITE_COMMAND("CALIBRATE DC VOLTAGE", f"channel{i+1} gain", 0)
            time.sleep(1)
            self.print_console(f"CHANNEL {i+1} VOLTAGE GAIN: {self.MCM_READ_COMMAND('CALIBRATE DC VOLTAGE', f'channel{i+1} gain')}")
        if DCIF_CARD_TYPE != "SHUNT SMALL":
            actual_voltage = float(self.dcload.DC_LOAD_READ_OUTPUT_VOLTAGE())
            for i in range(1, battery_fuse_count+1):
                self.MCM_WRITE_COMMAND("CALIBRATE DC VOLTAGE", f"batt{i+1}", actual_voltage)
            self.MCM_WRITE_COMMAND("CALIBRATE DC VOLTAGE", 'bus', actual_voltage)
            time.sleep(3)

        self.print_console("VERIFY VOLTAGE CALIBRATION")

        self.smrcan.SMR_BATTERY_SET_VOLTAGE(48)
        time.sleep(3)

        for i in range(1, battery_fuse_count+1):
            DUTT_BATT_VOLT = float(self.MCM_READ_COMMAND("DC READ VOLTAGE", f'batt{i}'))

            actual_voltage = AVG_METER_VOLTAGE(self, "BATT")
            actual_voltage = round(actual_voltage, 2)

            if abs(DUTT_BATT_VOLT - actual_voltage) < DC_VOLTAGE_CALIBRATION_TOLERANCE:
                RESULT_TEMP = True
            else:
                RESULT_TEMP = False

            time.sleep(3)

            if RESULT_TEMP:
                self.print_console(f'BATTERY {i} VOLTAGE: {DUTT_BATT_VOLT}')
                self.print_console(f'METER VOLTAGE: {actual_voltage}')
                self.print_console(f"BATTERY {i} VOLTAGE CALIBRATION OK")
            else:
                self.print_console(f'BATTERY {i} VOLTAGE: {DUTT_BATT_VOLT}', "RED")
                self.print_console(f'METER VOLTAGE: {actual_voltage}', "RED")
                self.print_console(f"BATTERY {i} VOLTAGE CALIBRATION FAIL", "RED")
            RESULT.append(RESULT_TEMP)

        DUT_BUS_VOLTAGE = float(self.MCM_READ_COMMAND("DC READ VOLTAGE")['bus'])
        actual_voltage = round(float(READ_DC_VOLTAGE("BATT")), 2)

        if abs(DUT_BUS_VOLTAGE - actual_voltage) < DC_VOLTAGE_CALIBRATION_TOLERANCE:
            RESULT_TEMP = True
        else:
            RESULT_TEMP = False

        time.sleep(1)

        if RESULT_TEMP:
            self.print_console(f'BUS VOLTAGE: {DUT_BUS_VOLTAGE}')
            self.print_console(f'METER VOLTAGE: {actual_voltage}')
            self.print_console(f"BUS VOLTAGE CALIBRATION OK")
        else:
            self.print_console(f'BUS VOLTAGE: {DUT_BUS_VOLTAGE}', "RED")
            self.print_console(f'METER VOLTAGE: {actual_voltage}', "RED")
            self.print_console(f"BUS VOLTAGE CALIBRATION FAIL", "RED")
        RESULT.append(RESULT_TEMP)


        self.smrcan.SMR_BATTERY_SET_VOLTAGE(56)
        time.sleep(3)

        for i in range(1, battery_fuse_count + 1):
            DUTT_BATT_VOLT = float(self.MCM_READ_COMMAND("DC READ VOLTAGE", f'batt{i}'))

            actual_voltage = AVG_METER_VOLTAGE(self, "BATT")
            actual_voltage = round(actual_voltage, 2)

            if abs(DUTT_BATT_VOLT - actual_voltage) < DC_VOLTAGE_CALIBRATION_TOLERANCE:
                RESULT_TEMP = True
            else:
                RESULT_TEMP = False

            time.sleep(3)

            if RESULT_TEMP:
                self.print_console(f'BATTERY {i} VOLTAGE: {DUTT_BATT_VOLT}')
                self.print_console(f'METER VOLTAGE: {actual_voltage}')
                self.print_console(f"BATTERY {i} VOLTAGE CALIBRATION OK")
            else:
                self.print_console(f'BATTERY {i} VOLTAGE: {DUTT_BATT_VOLT}', "RED")
                self.print_console(f'METER VOLTAGE: {actual_voltage}', "RED")
                self.print_console(f"BATTERY {i} VOLTAGE CALIBRATION FAIL", "RED")
            RESULT.append(RESULT_TEMP)

        DUT_BUS_VOLTAGE = float(self.MCM_READ_COMMAND("DC READ VOLTAGE")['bus'])
        actual_voltage = round(float(READ_DC_VOLTAGE("BATT")), 2)

        if abs(DUT_BUS_VOLTAGE - actual_voltage) < DC_VOLTAGE_CALIBRATION_TOLERANCE:
            RESULT_TEMP = True
        else:
            RESULT_TEMP = False

        time.sleep(1)

        if RESULT_TEMP:
            self.print_console(f'BUS VOLTAGE: {DUT_BUS_VOLTAGE}')
            self.print_console(f'METER VOLTAGE: {actual_voltage}')
            self.print_console(f"BUS VOLTAGE CALIBRATION OK")
        else:
            self.print_console(f'BUS VOLTAGE: {DUT_BUS_VOLTAGE}', "RED")
            self.print_console(f'METER VOLTAGE: {actual_voltage}', "RED")
            self.print_console(f"BUS VOLTAGE CALIBRATION FAIL", "RED")
        RESULT.append(RESULT_TEMP)

        return CALCULATE_RESULT(RESULT)


    def DC_CURRENT_MEASUREMENT_BATT_DISCHARGE(self):
        global RESULT_TEMP_MCB_TRIP
        if self.mcm_type == 1:
            self.MCM_WRITE_COMMAND("SYSTEM COMMANDS", 'ate test', 'TEST_M1000_ATE')

        test_sub_id = 0

        self.print_console("DC CURRENT MEASUREMENT BATT DISCHARGE TEST STARTED...")

        batt_fuse_count = int(ConfigRead('DUT CONFIGURATION')['no. of battery fuses'])
        batt_lvd_count = int(ConfigRead('DUT CONFIGURATION')['no. of battery lvd'])
        load_lvd_count = int(ConfigRead('DUT CONFIGURATION')['no. of load lvd'])
        load_current_count = int(ConfigRead('DUT CONFIGURATION')['no. of load current'])
        load_current_sensor_state = ConfigRead('DUT CONFIGURATION')['load current sensor']
        DC_CURRENT_FACTOR_PERCENTAGE = float(CalibrateSetting('GENERAL FACTORS')['dc current check factor percentage'])
        DC_CURRENT_TOLERANCE_PERCENTAGE = float(CalibrateSetting('GENERAL FACTORS')['dc current check tolerance percentage'])
        DCIF_CARD_TYPE = ConfigRead('DUT CONFIGURATION')['dcif card type']

        if DCIF_CARD_TYPE == "HALL EFFECT":
            CURRENT_SENSOR_VALUE = int(ConfigRead("DUT CONFIGURATION")['channel1 hall effect value'])
        else:
            CURRENT_SENSOR_VALUE = int(ConfigRead("DUT CONFIGURATION")['channel1 shunt value'])

        LOAD_SET_CURRENT = int(CURRENT_SENSOR_VALUE*(float(DC_CURRENT_FACTOR_PERCENTAGE)/100))
        LOAD_CURRENT_OFFSET = int(CURRENT_SENSOR_VALUE*(float(DC_CURRENT_TOLERANCE_PERCENTAGE)/100))

        RESULT = []
        self.pfc.pfc_set(0, self.contact.CARD2, [PFC_control_done.PFC12])
        SET_INDI_BATTERY_PATH(1)  ## NEED TO MODIFY PFC PART CODE
        self.pfc.pfc_set(0, self.contact.CARD2, [PFC_control_done.PFC12])
        self.pfc.pfc_set(0, self.contact.CARD2, [PFC_control_done.PFC3])

        if load_lvd_count == 1:
            self.pfc.pfc_set(0, self.contact.CARD2, [PFC_control_done.PFC1])
        else:
            self.pfc.pfc_set(0, self.contact.CARD2, [PFC_control_done.PFC1])

        # self.pfc.pfc_set(0, self.contact.CARD2, [PFC_control_done.PFC2,PFC_control_done.PFC4,PFC_control_done.PFC6])

        self.dcload.DC_LOAD_SET_CURRENT_CC(LOAD_SET_CURRENT,"LOAD")

        for i in range(1,load_lvd_count+1):
            self.pfc.pfc_set(0, self.contact.CARD2, )


        for count in range(1, batt_lvd_count+1):
            self.print_console(f"CHECKING BATTERY {count} DISCHARGE CURRENT")
            SET_INDI_BATTERY_PATH(count)
            time.sleep(1)

            for count_temp in range(1, batt_lvd_count+1):
                if count == count_temp or batt_lvd_count < 2:
                    actual_current = float(READ_DC_VOLTAGE("LOAD"))
                    if actual_current > (LOAD_SET_CURRENT - LOAD_CURRENT_OFFSET):
                        actual_current = -1 * actual_current
                        self.print_console(f"METER CURRENT {actual_current}")
                        DUT_BATT_CURRENT = float(self.MCM_READ_COMMAND("DC READ CURRENT")[f'batt{count_temp}'])
                        self.print_console(f'DUT BATTERY CURRENT: {DUT_BATT_CURRENT}')
                        if abs(actual_current - DUT_BATT_CURRENT) < LOAD_CURRENT_OFFSET:
                            self.print_console(f"BATTERY {count} CURRENT SENSOR/CABLE IS OK")
                            RESULT.append(True)
                        else:
                            self.print_console(f"BATTERY {count} CURRENT SENSOR/CABLE IS FAULTY", 'RED')
                            RESULT.append(False)

                    else:
                        actual_voltage = float(READ_DC_VOLTAGE("LOAD"))
                        self.print_console(f'METER VOLTAGE: {actual_voltage}')
                        dut_batt_volt = float(self.MCM_READ_COMMAND("DC READ VOLTAGE", f'batt{count_temp}'))
                        self.print_console(f"DUT BATT VOLTAGE: {dut_batt_volt}")
                        if abs(actual_voltage-dut_batt_volt) < 10:
                            self.print_console("LOAD LVD CONTACTOR IS FAULTY", 'RED')
                        else:
                            self.print_console(f"BATTERY {count_temp} LVD CONTACTOR IS FAULT", 'RED')
                        RESULT.append(False)
                elif count != count_temp and batt_lvd_count > 1:
                    DUT_BATT_CURRENT = float(self.MCM_READ_COMMAND("DC READ CURRENT", f'batt{count_temp}'))
                    if DUT_BATT_CURRENT < -5:
                        RESULT_TEMP = False
                    else:
                        RESULT_TEMP = True
                    RESULT.append(RESULT_TEMP)
            load_current_sum = 0
            if load_current_count < 2:
                DUT_load_current = float(self.MCM_READ_COMMAND('DC READ CURRENT', f'load{1}'))
                load_current_sum += DUT_load_current
                self.print_console(f"DUT LOAD CURRENT{DUT_load_current}")
                if load_current_sensor_state == 'ENABLE':
                    actual_current = float(READ_DC_CURRENT("LOAD"))
                    if actual_current > (LOAD_SET_CURRENT - LOAD_CURRENT_OFFSET):
                        # RESULT_TEMP = COMPARE(actual_current, load_current_sum, LOAD_CURRENT_OFFSET)
                        if abs(actual_current-load_current_sum) < LOAD_CURRENT_OFFSET:
                            self.print_console(self, "LOAD CURRENT SENSOR 1 is OK")
                            RESULT.append(True)
                        else:
                            self.print_console(self, "LOAD CURRENT SENSOR 1 is FAULTY", "RED")
                            RESULT.append(False)
                    else:
                        actual_voltage = float(READ_DC_VOLTAGE("LOAD"))
                        self.print_console(f"actual voltage: {actual_current}")
                        DUT_batt_volt = float(self.MCM_READ_COMMAND('DC READ VOLTAGE', f'batt{count_temp}'))
                        if abs(actual_voltage-DUT_batt_volt) > 5:
                            self.print_console("Load LVD contactor is faulty", "RED")
                            RESULT_TEMP = False
                        else:
                            self.print_console("Battery " + str(count_temp) + " LVD contactor is faulty", "RED")
                            RESULT_TEMP = False
                        RESULT.append(RESULT_TEMP)
                        self.print_console(str(RESULT))
                else:
                    self.print_console("Load CURRENT SENSOR NOT AVAILABLE")
                    RESULT_TEMP = True
                    RESULT.append(RESULT_TEMP)

            else:
                for i in range(1, load_current_count + 1):  ##CODE TO BE ADDED FOR INDIVIDUAL LOAD PATH CURRENT CHECK
                    SET_INDI_LOAD_PATH(i)
                    time.sleep(4)
                    DUT_load_current = float(self.MCM_READ_COMMAND('DC READ CURRENT', 'load' + str(i)))
                    actual_current = float(READ_DC_CURRENT("LOAD"))
                    self.print_console("DUT LOAD CURRENT " + str(i) + ": " + str(DUT_load_current))
                    self.print_console("actual_current" + str(actual_current))
                    self.print_console("LOAD_CURRENT_OFFSET: " + str(LOAD_CURRENT_OFFSET))
                    if load_current_sensor_state == 'ENABLE':
                        if actual_current > (LOAD_SET_CURRENT - LOAD_CURRENT_OFFSET):
                            # RESULT_TEMP = COMPARE(actual_current, DUT_load_current, LOAD_CURRENT_OFFSET)
                            if abs(actual_current-DUT_load_current) > LOAD_CURRENT_OFFSET:
                                self.print_console("LOAD CURRENT SENSOR " + str(i) + " is FAULTY", "RED")
                                RESULT.append(False)
                            else:
                                RESULT.append(True)
                                self.print_console("LOAD CURRENT SENSOR " + str(i) + " is OK")


                        else:
                            # PRINT_CONSOLE(self,"CHECKING ELSE CONDITION")
                            actual_voltage = float(READ_DC_VOLTAGE("LOAD"))
                            self.print_console("actual voltage: " + str(actual_voltage))
                            DUT_batt_volt = float(self.MCM_READ_COMMAND('DC READ VOLTAGE', 'batt' + str(count_temp)))
                            if abs(actual_voltage - DUT_batt_volt) < 5:
                                self.print_console("Load " + str(i) + " LVD contactor is faulty", "RED")
                                RESULT_TEMP = False
                            else:
                                self.print_console("Battery " + str(count_temp) + " LVD contactor is faulty", "RED")
                                RESULT_TEMP = False
                            RESULT.append(RESULT_TEMP)
                            self.print_console(str(RESULT))
                    # load_current_sum+=DUT_load_current

                    else:
                        self.print_console("Load CURRENT SENSOR NOT AVAILABLE")
                        RESULT_TEMP = True
                        RESULT.append(RESULT_TEMP)

                    self.print_console(f"load_current_sum: {load_current_sum}")
                    self.print_console(f"Load CURRENT {i} : {DUT_load_current}")
            actual_current = float(READ_DC_CURRENT("LOAD"))
            self.print_console(f"METER CURRENT {actual_current}")

        if load_lvd_count > 1:
            self.prompt.Message(prompt="SWITCH ON SYSTEM PRIORITY LOAD MCBs FOR ALL OPERATORS")
        ## this is for critical load
        if load_lvd_count != 0 and load_current_sensor_state == 'ENABLE':
            self.pfc.pfc_set(0, self.contact.CARD2, 'PL LOAD', 1)
            load_current_sum = 0
            SET_LOAD_ISOLATE(self, load_current_count, 1)
            for i in range(1, load_current_count + 1):
                self.pfc.pfc_set(0, self.contact.CARD2, 'LOAD' + str(i), 0)
            time.sleep(3)
            for i in range(1, load_current_count + 1):
                DUT_load_current = float(self.MCM_READ_COMMAND('DC READ CURRENT', 'load' + str(i)))
                load_current_sum += DUT_load_current
            actual_current = float(READ_DC_CURRENT("LOAD"))

            self.print_console("load_current_sum: " + str(load_current_sum))
            self.print_console("actual_current" + str(actual_current))
            self.print_console("LOAD_CURRENT_OFFSET: " + str(LOAD_CURRENT_OFFSET))
            if actual_current > (LOAD_SET_CURRENT - LOAD_CURRENT_OFFSET):
                if abs(actual_current-load_current_sum) > LOAD_CURRENT_OFFSET:
                    self.print_console("PL LOAD NOT OK", "RED")
                    RESULT.append(False)
                else:
                    self.print_console("PL LOAD OK")
                    RESULT.append(True)
                    # raw_input("check")


            else:
                actual_voltage = float(READ_DC_VOLTAGE("LOAD"))
                self.print_console("actual voltage: " + str(actual_voltage))
                DUT_batt_volt = float(self.MCM_READ_COMMAND('DC READ VOLTAGE', 'batt' + str(count_temp)))
                if abs(actual_voltage - DUT_batt_volt) < 5:
                    self.print_console("Load LVD contactor is faulty", "RED")
                    RESULT_TEMP = False
                else:
                    self.print_console("Battery " + str(count_temp) + " LVD contactor is faulty", "RED")
                    RESULT_TEMP = False
                RESULT.append(RESULT_TEMP)
                self.print_console(str(RESULT))
        SET_LOAD_ISOLATE(self, load_current_count, 0)
        for i in range(1, load_current_count + 1):
            self.pfc.pfc_set(0, self.contact.CARD2, 'LOAD' + str(i), 1)

        self.print_console("DC_CURRENT_MEASUREMENT_BATT_DISCHARGE TEST FINISHED...")

        user_state = self.prompt.User_prompt("DO YOU WANT TO TEST LOAD FUSE FAIL/DC MCCB TRIP ALARM.PRESS ENTER TO PROCEED!")
        if user_state:
            print("Testing Load MCB TRIP alarm")
            self.print_console("LOAD FUSE FAIL/DC MCB TRIP ALARM TEST STARTED...")
            ip_pfc_state = True
            while ip_pfc_state:
                if int(self.MCM_READ_COMMAND('DCIF 8 IP PFC', 'pfc')) != 0:
                    self.prompt.Message(prompt="CLEAR IP PFC ALARM BEFORE STARTING TEST")
                else:
                    ip_pfc_state = False
                    self.prompt.Message(prompt="SWITCH OFF ALL LOAD PL/NPL MCB(s).PRESS ENTER KEY TO PROCEED!")
                    self.print_console("WAITING FOR 5 SECONDS! ")
                    time.sleep(5)
                    if int(self.MCM_READ_COMMAND('ALARM', 'dccb trip')) == 1:
                        RESULT_TEMP_MCB_TRIP = True
                        self.print_console("DCCB TRIP ALARM TESTED OK ")
                    else:
                        RESULT_TEMP_MCB_TRIP = False
                        self.print_console("DCCB TRIP ALARM TEST FAIL ", "RED")

            self.prompt.Message(prompt="SWITCH 'ON' ALL LOAD PL/NPL MCB(s).PRESS ENTER KEY TO PROCEED!")
            self.print_console("LOAD FUSE FAIL/DC MCB TRIP ALARM TEST FINISHED...")

        else:
            print("Load MCB TRIP alarm not tested")
            RESULT_TEMP_MCB_TRIP = True
            self.print_console("DCCB TRIP TEST BYPASSED")

        RESULT.append(RESULT_TEMP_MCB_TRIP)
        self.pfc.pfc_set(0, self.contact.CARD2, 'PL LOAD', 0)
        # SET_JIG_PFC_OP(self.can, 'PL LOAD', 0)

        # id = self.sql.SQL_SELECT_3_QUERY('td_id', 'test_detail_results', 'td_test_item',
        #                                  'DC_CURRENT_MEASUREMENT_BATT_DISCHARGE', 'td_readby', 'DCCB TRIP', 'td_mt_id',
        #                                  self.test_id)
        # print
        # id
        # if id != 0:
        #     print
        #     "update row"
        #     self.sql.SQL_TEST_ITEM_RUN_DETAIL_UPDATE_QUERY(RESULT_TEMP_MCB_TRIP, id)
        # else:
        #     print
        #     "insert row"
        #     test_sub_id += 1
        #     self.sql.SQL_TEST_ITEM_RUN_DETAIL_RESULTS_INSERT_QUERY(self.test_id,
        #                                                            "'DC_CURRENT_MEASUREMENT_BATT_DISCHARGE'",
        #                                                            "'DCCB TRIP'", test_sub_id, "''", "''",
        #                                                            RESULT_TEMP_MCB_TRIP)

        return CALCULATE_RESULT(RESULT)


    def SMR_REGISTRATION(self):

        pass


    def CHECK_DEVICES(self):
        self.print_console("CHECK DEVICES TEST STARTED....")
        self.HEALTH_CHECK_SMR_BATTERY()
        self.HEALTH_CHECK_DC_LOAD()
        ATE_LOAD_COUNT = int(SettingRead("SETTING")['ate load count'])
        if ATE_LOAD_COUNT != 1:
            self.HEALTH_CHECK_BATTERY_LOAD()
        self.DC_LOAD_SET_CURRENT_CC(type=LOAD)
        self.DC_LOAD_SET_CURRENT_CC(type=BATT)
        self.print_console("CHECK DEVICES TEST FINISHED")

    def ATS_INITIALIZE(self):
        self.print_console("ATS INITIALIZING....")
        self.INITIAL_LOAD(type=LOAD)
        self.INITIAL_LOAD(type=BATT)
        self.print_console("ATS INITIALIZED....")


    def CLEAR_JIG(self):
        self.print_console('CLEARING JIG....')
        self.M2000SET_PFC(pfc=1, status=1, alarm_index=1)  # Clearing AC Contactors
        # dc load output off
        self.M2000.SET_PFC(pfc=1, status=1, alarm_index=1)  # Clearing other PFCs
        time.sleep(1)
        self.print_console("JIG CLEARED....")

    def MCM_READ_COMMAND(self, command='',section=""):
        if self.mcm_type == 1:
            # OIDRead('ALARM')['spu fail']
            return M1000Telnet.telnet_get_command(OIDRead(command)[section])
        elif self.mcm_type == 2:
            # M2000OIDRead('ALARM')['spu fail']
            return self.M2000.MCM_GET_COMMAND(M2000OIDRead(command)[section])

    def MCM_WRITE_COMMAND(self, command='', section='', value=''):
        if self.mcm_type == 1:
            M1000Telnet.telnet_set_command(OIDRead(command)[section], value)
        elif self.mcm_type == 2:
            self.M2000.MCM_SET_COMMAND(M2000OIDRead(command)[section], value)


def CALCULATE_RESULT(RESULT):
    for RESULT_TEMP in RESULT:
        if RESULT_TEMP == False:
            return False
    return True


def AVG_METER_VOLTAGE(self, load_type):
    sum = 0
    for i in range(0, 5):
        actual_voltage = float(CommandSetDcLoadUsb.DC_LOAD_READ_OUTPUT_VOLTAGE(self, load_type))
        sum += actual_voltage

    return float(sum) / 5


def SET_INDI_BATTERY_PATH(self, battery_number):
    batt_fuse_count = int(ConfigRead('DUT CONFIGURATION')['no. of battery fuses'])
    # PRINT_CONSOLE(self,"batt fuse: "+str(batt_fuse_count))
    for count in range(1, batt_fuse_count + 1):
        if count == battery_number:
            SET_JIG_PFC_OP(self.can, 'BATT' + str(count), 1)

    for count in range(1, batt_fuse_count + 1):
        if count != battery_number:
            SET_JIG_PFC_OP(self.can, 'BATT' + str(count), 0)


def READ_DC_VOLTAGE(load_type='LOAD'):
    try:

        DATA = CommandSetDcLoadUsb.DC_LOAD_READ_OUTPUT_VOLTAGE(load_type)
        test_data = float(DATA)

    except:
        PRINT_CONSOLE(self, 'ELECTRONIC DC LOAD (' + str(load_type) + ') PATH RESPONDING GARBAGE VOLTAGE VALUES!',
                      WARNING)
        PRINT_CONSOLE(self, 'VALUE IS: ' + str(DATA), WARNING)
        DATA = 999992
        ERROR_PROMPT(self, 'ELECTRONIC DC LOAD (' + str(load_type) + ') PATH RESPONDING GARBAGE VALUES!')
        pass

    return DATA


def SET_LOAD_ISOLATE(self, load_lvd_count, state):
    #PRINT_CONSOLE(self,"set load isolate")
    for i in range(1, load_lvd_count+1):
        self.MCM_WRITE_COMMAND('LOAD ISOLATE', 'load'+str(i), state)


def READ_DC_CURRENT(load_type='LOAD'):
    try:
        DATA = CommandSetDcLoadUsb.DC_LOAD_READ_OUTPUT_CURRENT(DC_Load, load_type)
        test_data = float(DATA)

    except:
        Ui_Test.print_console(Ui_Test, 'ELECTRONIC DC LOAD (' + str(load_type) + ') PATH RESPONDING GARBAGE CURRENT VALUES!', "RED")
        Ui_Test.print_console(Ui_Test, 'VALUE IS: ' + str(DATA), WARNING)
        DATA = 999991
        Prompt.Message(title="ERROR!", prompt='ELECTRONIC DC LOAD (' + str(load_type) + ') PATH RESPONDING GARBAGE VALUES!')
        pass

    return DATA



if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Test()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
