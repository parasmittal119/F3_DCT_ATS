'''Default Data START'''
alarmIndex = '''typedef enum
{
		ALM_NONE =0,
            ALM_PFCIN_DOOROPEN =1,
            ALM_PFCIN_FIRESMOKE =2,
            ALM_PFCIN_SPUFAIL =3,
            ALM_PFCIN_DGON_SENSE =4,
            ALM_PFCIN_USERALM5 =5,
            ALM_PFCIN_USERALM6 =6,
            ALM_PFCIN_USERALM7 =7,
            ALM_PFCIN_USERALM8 =8,
            ALM_PFCIN_USERALM9 =9,
            ALM_PFCIN_USERALM10 =10,
            ALM_PFCIN_USERALM11 =11,
            ALM_PFCIN_USERALM12=12,
            ALM_PFCIN_USERALM13=13,
            ALM_PFCIN_USERALM14 =14,
            ALM_PFCIN_USERALM15 =15,
            ALM_PFCIN_USERALM16 =16,
            ALM_PFCIN_USERALM17 =17,
            ALM_PFCIN_USERALM18 =18,
            ALM_PFCIN_USERALM19 =19,
            ALM_PFCIN_USERALM20 =20,
            ALM_PFCIN_USERALM21 =21,
            ALM_PFCIN_USERALM22 =22,
            ALM_PFCIN_USERALM23 =23,
            ALM_PFCIN_USERALM24 =24,
            ALM_PFCIN_USERALM25 =25,
            ALM_PFCIN_USERALM26 =26,
            ALM_PFCIN_USERALM27 =27,
            ALM_PFCIN_USERALM28 =28,
            ALM_PFCIN_USERALM29 =29,
            ALM_PFCIN_USERALM30 =30,
            ALM_PFCIN_USERALM31 =31,
            ALM_PFCIN_USERALM32 =32,
            ALM_PFCIN_USERALM33=33,
            ALM_PFCIN_USERALM34=34,
            ALM_PFCIN_USERALM35=35,
            ALM_PFCIN_USERALM36=36,
            ALM_PFCIN_USERALM37=37,
            ALM_PFCIN_USERALM38=38,
            ALM_PFCIN_USERALM39=39,
            ALM_PFCIN_USERALM40=40,
            ALM_PFCIN_USERALM41=41,
            ALM_PFCIN_USERALM42=42,
            ALM_PFCIN_USERALM43=43,
            ALM_PFCIN_USERALM44=44,
            ALM_PFCIN_USERALM45=45,
            ALM_PFCIN_USERALM46=46,
            ALM_PFCIN_USERALM47=47,
            ALM_PFCIN_USERALM48=48,
            ALM_PFCIN_USERALM49=49,
            ALM_PFCIN_USERALM50=50,
            ALM_PFCIN_USERALM51=51,
            ALM_PFCIN_USERALM52=52,
            ALM_PFCIN_USERALM53=53,
            ALM_PFCIN_USERALM54=54,
            ALM_PFCIN_USERALM55=55,
            ALM_PFCIN_USERALM56=56,
            ALM_PFCIN_USERALM57=57,
            ALM_PFCIN_USERALM58=58,
            ALM_PFCIN_USERALM59=59,
            ALM_PFCIN_USERALM60=60,
            ALM_PFCIN_USERALM61=61,
            ALM_PFCIN_USERALM62=62,
            ALM_PFCIN_USERALM63=63,
            ALM_PFCIN_USERALM64=64,
            ALM_PLC1=65,
            ALM_PLC2=66,
            ALM_PLC3=67,
            ALM_PLC4=68,
            ALM_PLC5=69,
            ALM_PLC6=70,
            ALM_PLC7=71,
            ALM_PLC8=72,
            ALM_PLC9=73,
            ALM_PLC10=74,
            ALM_PLC11=75,
            ALM_PLC12=76,
            ALM_PLC13=77,
            ALM_PLC14=78,
            ALM_PLC15=79,
            ALM_PLC16=80,
            ALM_AC_ACFAIL=81,
            ALM_AC_RPHASEFAIL =82,
            ALM_AC_YPHASEFAIL =83,
            ALM_AC_BPHASEFAIL =84,
            ALM_AC_ACHIGHWARNING=85,
            ALM_AC_ACLOWWARNING =86,
            ALM_AC_RPHASELOWWARNING=87,
            ALM_AC_RPHASEHIGHWARNING =88,
            ALM_AC_YPHASELOWWARNING=89,
            ALM_AC_YPHASEHIGHWARNING =90,
            ALM_AC_BPHASELOWWARNING=91,
            ALM_AC_BPHASEHIGHWARNING =92,
            ALM_AC_NEUTRALFAIL =93,
            ALM_AC_EARTHFAIL =94,
            ALM_AC_NEUTRALEARTHFAULT =95,
            ALM_AC_HVLVPROCMODE =96,
            ALM_AC_DGSENSE =97,
            ALM_RECT_RECTFAIL =98,
            ALM_RECT_MULTIPLERECFAIL =99,
            ALM_RECT_ALLRECTFAIL=100,
            ALM_RECT_RECTCOMMFAIL=101,
            ALM_RECT_ALLRECTCOMMFAIL =102,
            ALM_RECT_TEMPHIGH =103,
            ALM_RECT_OVERVOLTAGE=104,
            ALM_RECT_FANFAIL =105,
            ALM_RECT_ALLRECTCURRLIMIT =106,
            ALM_RECT_PROTFREQABNORMAL =107,
            ALM_RECT_PROTFAILSAFE=108,
            ALM_RECT_INDVRECTALARMS=109,
            ALM_RECT_INDVRECTCOMMFAIL =110,
            ALM_RECT_2PHOPERATIONMODE =111,
            ALM_RECT_IPFREQABNORMAL =112,
            ALM_RECT_PROTACABNORMAL=113,
            ALM_RECT_STATUS_ECOMODE =114,
            ALM_DC_SYSTEMOVERLOAD=130,
            ALM_DC_VOLTAGEHIGH =131,
            ALM_DC_VOLTAGELOW =132,
            ALM_DC_LLVD1DISCONNECT=133,
            ALM_DC_LLVD2DISCONNECT=134,
            ALM_DC_LLVD3DISCONNECT=135,
            ALM_DC_LLVD4DISCONNECT=136,
            ALM_BAT_BLVDDISCONNECT=137,
            ALM_BAT_BANKDISCHARGE=138,
            ALM_BAT_ACONBATTDISCHARGE =139,
            ALM_BAT_TEMPCOMPCABLEFAIL =140,
            ALM_BAT_BATTTEMPERATURELOW =141,
            ALM_BAT_BATTTEMPERATUREHIGH =142,
            ALM_BAT_BATT1ISOLATED=143,
            ALM_BAT_BATT2ISOLATED=144,
            ALM_BAT_BATT3ISOLATED=145,
            ALM_BAT_BATT4ISOLATED=146,
            ALM_BAT_BATT5ISOLATED=147,
            ALM_BAT_BATT1REVERSE=148,
            ALM_BAT_BATT2REVERSE=149,
            ALM_BAT_BATT3REVERSE=150,
            ALM_BAT_BATT4REVERSE=151,
            ALM_BAT_BATT5REVERSE=152,
            ALM_BAT_BATT1FUSEFAIL=153,
            ALM_BAT_BATT2FUSEFAIL=154,
            ALM_BAT_BATT3FUSEFAIL=155,
            ALM_BAT_BATT4FUSEFAIL=156,
            ALM_BAT_BATT5FUSEFAIL=157,
             ALM_DG_FAILTOSTART=158,
            ALM_BAT_NOBATT1=159,
            ALM_BAT_NOBATT2=160,
            ALM_BAT_NOBATT3=161,
            ALM_BAT_NOBATT4=162,
            ALM_BAT_NOBATT5=163,
            ALM_BAT_OVERCHARGED=164,
            ALM_BAT_BATT1CONTFAIL=165,
            ALM_BAT_BATT2CONTFAIL=166,
            ALM_BAT_BATT3CONTFAIL=167,
            ALM_BAT_BATT4CONTFAIL=168,
            ALM_BAT_BATT5CONTFAIL=169,
            ALM_BAT_ALLFUSEFAIL=170,
            ALM_BAT_NOBATTCONNECTED=171,
            ALM_BAT_BATT1DISCHARGE=172,
            ALM_BAT_BATT2DISCHARGE=173,
            ALM_BAT_BATT3DISCHARGE=174,
            ALM_BAT_BATT4DISCHARGE=175,
            ALM_BAT_BATT5DISCHARGE=176,
            ALM_CAB_RACKTEMP1LOW=177,
            ALM_CAB_RACKTEMP2LOW=178,
            ALM_CAB_RACKTEMP1HIGH=179,
            ALM_CAB_RACKTEMP2HIGH=180,
            ALM_CAB_RACKTEMP1CABLEFAIL=181,
            ALM_CAB_RACKTEMP2CABLEFAIL=182,
            ALM_CAB_RACKFAN1FAIL=183,
            ALM_CAB_RACKFAN2FAIL=184,
            ALM_CAB_RACKFAN3FAIL=185,
            ALM_CAB_RACKFAN4FAIL=186,
            ALM_CAB_RACKFAN5FAIL=187,
            ALM_CAB_RACKFAN6FAIL=188,
            ALM_CAB_RACKFAN7FAIL=189,
            ALM_CAB_RACKFAN8FAIL=190,
            ALM_CAB_RACKFANFAIL=191,
            ALM_BAT_BATT1MIDCELLFAIL=192,
            ALM_BAT_BATT2MIDCELLFAIL=193,
            ALM_BAT_BATT3MIDCELLFAIL=194,
            ALM_BAT_BATT4MIDCELLFAIL=195,
            ALM_BAT_BATT5MIDCELLFAIL=196,
            ALM_BAT_BATT6MIDCELLFAIL=197,
            ALM_BAT_BATT7MIDCELLFAIL=198,
            ALM_BAT_BATT8MIDCELLFAIL=199,
            ALM_BAT_BATT9MIDCELLFAIL=200,
            ALM_BAT_BATT10MIDCELLFAIL=201,
            ALM_BAT_BATT1QP1FAIL=202,
            ALM_BAT_BATT2QP1FAIL=203,
            ALM_BAT_BATT3QP1FAIL=204,
            ALM_BAT_BATT4QP1FAIL=205,
            ALM_BAT_BATT5QP1FAIL=206,
            ALM_BAT_BATT1QP2FAIL=207,
            ALM_BAT_BATT1QP3FAIL=208,
            ALM_BAT_BATT1QP4FAIL=209,
            ALM_BAT_BATT2QP2FAIL=210,
            ALM_BAT_BATT2QP3FAIL=211,
            ALM_BAT_BATT2QP4FAIL=212,
            ALM_BAT_BATT3QP2FAIL=213,
            ALM_BAT_BATT3QP3FAIL=214,
            ALM_BAT_BATT3QP4FAIL=215,
            ALM_BAT_BATT4QP2FAIL=216,
            ALM_BAT_BATT4QP3FAIL=217,
            ALM_BAT_BATT4QP4FAIL=218,
            ALM_BAT_BATT5QP2FAIL=219,
            ALM_BAT_BATT5QP3FAIL=220,
            ALM_BAT_BATT5QP4FAIL=221,
            ALM_COMM_HVLVCOMMFAIL=222,
            ALM_COMM_DCIFCOMMFAIL=223,
            ALM_COMM_ACIFFAIL =224,
            ALM_COMM_8PFC1COMMFAIL=225,
            ALM_COMM_8PFC2COMMFAIL=226,
            ALM_COMM_8PFC3COMMFAIL=227,
            ALM_COMM_8PFC4COMMFAIL=228,
            ALM_COMM_16PFC1COMMFAIL=229,
            ALM_COMM_16PFC2COMMFAIL=230,
            ALM_COMM_BMSCOMMFAIL=231,
            ALM_COMM_EXTDCEMCOMMFAIL=232,
            ALM_COMM_MODEMCOMMFAIL=233,
            ALM_COMM_FUELSENSORCOMMFAIL=234,
            ALM_BATT_UNDERCHARGEVOLTAGE=235, //ALM_COMM_SOLARHVLVCOMMFAIL
            ALM_COMM_SOLARCHARGERCOMMFAIL=236, //reserved for future use
            ALM_COMM_CANCOMMFAIL=237,
            ALM_COMM_LIIONBATTCOMMFAIL=238,
            ALM_COMM_RILACEMCOMMFAIL=239,
            ALM_COMM_RILDGCOMMFAIL=240,
            ALM_COMM_CBMSCOMMFAIL =241,
            ALM_COMM_DCIF2COMMFAIL=242,
            ALM_COMM_DCIF3COMMFAIL=243,
            ALM_COMM_DCIF4COMMFAIL=244,
            ALM_INT_MEDIAFAIL =245,
            ALM_INT_MEDIAFULL =246,
            ALM_INT_SETTINGSEEPROMFAIL =247,
            ALM_INT_LOGSEEPROMFAIL=248,
            ALM_INT_RTCFAIL=249,
            ALM_INT_SPIFLASHFAIL =250,
            ALM_SOLARCOMMFAIL=251,
            ALM_SOLARCHARGERFAIL=252,
            ALM_LOWSOLARCURRENT=253,
            ALM_SOLAR_RECT_INDVRECTALARMS=254,
            ALM_INT_POWERONRESET=255,
            ALM_SOLAR_MULTIPLEFAIL=256, //ALM_PV_CHARGERFAIL
            ALM_COMM_FANCCCOMMFAIL=257,         // Increase END_INT_ALARMS_CONFIG_GROUP if new system alarms are added
            ALM_BMS_BANKOVERVOLTAGE =270,
            ALM_BMS_ANYMODULEUNDERVOLTAGEPROT =271,
            ALM_BMS_BANKLVL1LOWVOLTAGE =272,
            ALM_BMS_BANKLVL2LOWVOLTAGE =273,
            ALM_BMS_BANKHIGHTEMPERATURE =274,
            ALM_BMS_BANKLOWTEMPERATURE =275,
            ALM_BMS_ANYMODULECOMMFAIL =276,
            ALM_BMS_ANYMODULECURRENTHIGH =277,
            ALM_BMS_SOCLEVEL1LOW =278,
            ALM_BMS_SYSTEMFAIL =279,
            ALM_BMS_MASTERCBMSFAIL =280,
            ALM_BMS_CELLOVERTEMPERATURELVL1 =281,
            ALM_BMS_CELLOVERCHARGELVL1 =282,
            ALM_BMS_CELLOVERCHARGELVL2 =283,
            ALM_BMS_CELLUNDERVOLTAGE =284,
            ALM_BMS_LOWSTATEOFCHARGE =285,
            ALM_BMS_MOSFETHIGHTEMPERATURE =286,
            ALM_BMS_HEATERFAILURE =287,
            ALM_BMS_LOWSTATEOFHEALTH =288,
            ALM_BMS_CELLUNBALANCED =289,
            ALM_BMS_MOSFETTEMPOUTOFRANGE =290,
            ALM_BMS_ANYMODULESOCBELOWLEVEL1 =291,
            ALM_BMS_CELLUNDERVOLTAGEWARN =292,
            ALM_BMS_MODULE0CELLOVERVOLTAGEPROT =293,
            ALM_BMS_MODULE0CELLUNDERVOLTAGEPROT =294,
            ALM_BMS_MODULE0CELLUNBALANCED =295,
            ALM_BMS_MODULE0CELLUNDERVOLTAGEWARNING =296,
            ALM_BMS_MODULE0CELLOVERVOLTAGEWARNING =297,
            ALM_BMS_MODULE0CHARGEOVERTEMPPROTECTION =298,
            ALM_BMS_MODULE0DISCHARGEOVERTEMPPROTECTION =299,
            ALM_BMS_MODULE0UNDERTEMPPROTECTION =300,
            ALM_BMS_MODULE0CHARGEOVERCURRENTWARNING =301,
            ALM_BMS_MODULE0DISCHARGEOVERCURRENTWARNING =302,
            ALM_BMS_MODULE0LOWSOCWARNING =303,
            ALM_BMS_MODULE0OVERCURRENTPROTECTION =304,
            ALM_BMS_MODULE0OVERVOLTAGEPROTECTION =305,
            ALM_BMS_MODULE0ISOLATED =306,
            ALM_BMS_MODULE0COMMFAIL =307,
            ALM_BMS_MODULE0EMERGENCYALARM =308,
            ALM_BMS_MODULE0CELLTEMPOUTOFRANGE =309,
            ALM_BMS_MODULE0HIGHBATTERYSUPPLY =310,
            ALM_BMS_MODULE0MOSFETOVERTEMPERATURE =311,
            ALM_BMS_MODULE0AUTOTESTFAIL =312,
            ALM_BMS_MODULE0DEEPDISCHARGE =313,
            ALM_BMS_MODULE0FUSEBLOWN =314,
            ALM_BMS_MODULE1CELLOVERVOLTAGEPROT =315,
            ALM_BMS_MODULE1CELLUNDERVOLTAGEPROT =316,
            ALM_BMS_MODULE1CELLUNBALANCED =317,
            ALM_BMS_MODULE1CELLUNDERVOLTAGEWARNING =318,
            ALM_BMS_MODULE1CELLOVERVOLTAGEWARNING =319,
            ALM_BMS_MODULE1CHARGEOVERTEMPPROTECTION =320,
            ALM_BMS_MODULE1DISCHARGEOVERTEMPPROTECTION =321,
            ALM_BMS_MODULE1UNDERTEMPPROTECTION =322,
            ALM_BMS_MODULE1CHARGEOVERCURRENTWARNING =323,
            ALM_BMS_MODULE1DISCHARGEOVERCURRENTWARNING =324,
            ALM_BMS_MODULE1LOWSOCWARNING =325,
            ALM_BMS_MODULE1OVERCURRENTPROTECTION =326,
            ALM_BMS_MODULE1OVERVOLTAGEPROTECTION =327,
            ALM_BMS_MODULE1ISOLATED =328,
            ALM_BMS_MODULE1COMMFAIL =329,
            ALM_BMS_MODULE1EMERGENCYALARM =330,
            ALM_BMS_MODULE1CELLTEMPOUTOFRANGE =331,
            ALM_BMS_MODULE1HIGHBATTERYSUPPLY =332,
            ALM_BMS_MODULE1MOSFETOVERTEMPERATURE =333,
            ALM_BMS_MODULE1AUTOTESTFAIL =334,
            ALM_BMS_MODULE1DEEPDISCHARGE =335,
            ALM_BMS_MODULE1FUSEBLOWN =336,
            ALM_BMS_MODULE2CELLOVERVOLTAGEPROT =337,
            ALM_BMS_MODULE2CELLUNDERVOLTAGEPROT =338,
            ALM_BMS_MODULE2CELLUNBALANCED =339,
            ALM_BMS_MODULE2CELLUNDERVOLTAGEWARNING =340,
            ALM_BMS_MODULE2CELLOVERVOLTAGEWARNING =341,
            ALM_BMS_MODULE2CHARGEOVERTEMPPROTECTION =342,
            ALM_BMS_MODULE2DISCHARGEOVERTEMPPROTECTION =343,
            ALM_BMS_MODULE2UNDERTEMPPROTECTION =344,
            ALM_BMS_MODULE2CHARGEOVERCURRENTWARNING =345,
            ALM_BMS_MODULE2DISCHARGEOVERCURRENTWARNING =346,
            ALM_BMS_MODULE2LOWSOCWARNING =347,
            ALM_BMS_MODULE2OVERCURRENTPROTECTION =348,
            ALM_BMS_MODULE2OVERVOLTAGEPROTECTION =349,
            ALM_BMS_MODULE2ISOLATED =350,
            ALM_BMS_MODULE2COMMFAIL =351,
            ALM_BMS_MODULE2EMERGENCYALARM =352,
            ALM_BMS_MODULE2CELLTEMPOUTOFRANGE =353,
            ALM_BMS_MODULE2HIGHBATTERYSUPPLY =354,
            ALM_BMS_MODULE2MOSFETOVERTEMPERATURE =355,
            ALM_BMS_MODULE2AUTOTESTFAIL =356,
            ALM_BMS_MODULE2DEEPDISCHARGE =357,
            ALM_BMS_MODULE2FUSEBLOWN =358,
            ALM_BMS_MODULE3CELLOVERVOLTAGEPROT =359,
            ALM_BMS_MODULE3CELLUNDERVOLTAGEPROT =360,
            ALM_BMS_MODULE3CELLUNBALANCED =361,
            ALM_BMS_MODULE3CELLUNDERVOLTAGEWARNING =362,
            ALM_BMS_MODULE3CELLOVERVOLTAGEWARNING =363,
            ALM_BMS_MODULE3CHARGEOVERTEMPPROTECTION =364,
            ALM_BMS_MODULE3DISCHARGEOVERTEMPPROTECTION =365,
            ALM_BMS_MODULE3UNDERTEMPPROTECTION =366,
            ALM_BMS_MODULE3CHARGEOVERCURRENTWARNING =367,
            ALM_BMS_MODULE3DISCHARGEOVERCURRENTWARNING =368,
            ALM_BMS_MODULE3LOWSOCWARNING =369,
            ALM_BMS_MODULE3OVERCURRENTPROTECTION =370,
            ALM_BMS_MODULE3OVERVOLTAGEPROTECTION =371,
            ALM_BMS_MODULE3ISOLATED =372,
            ALM_BMS_MODULE3COMMFAIL =373,
            ALM_BMS_MODULE3EMERGENCYALARM =374,
            ALM_BMS_MODULE3CELLTEMPOUTOFRANGE =375,
            ALM_BMS_MODULE3HIGHBATTERYSUPPLY =376,
            ALM_BMS_MODULE3MOSFETOVERTEMPERATURE =377,
            ALM_BMS_MODULE3AUTOTESTFAIL =378,
            ALM_BMS_MODULE3DEEPDISCHARGE =379,
            ALM_BMS_MODULE3FUSEBLOWN =380,
            ALM_BMS_MODULE4CELLOVERVOLTAGEPROT=381,
            ALM_BMS_MODULE4CELLUNDERVOLTAGEPROT=382,
            ALM_BMS_MODULE4CELLUNBALANCED=383,
            ALM_BMS_MODULE4CELLUNDERVOLTAGEWARNING=384,
            ALM_BMS_MODULE4CELLOVERVOLTAGEWARNING=385,
            ALM_BMS_MODULE4CHARGEOVERTEMPPROTECTION=386,
            ALM_BMS_MODULE4DISCHARGEOVERTEMPPROTECTION=387,
            ALM_BMS_MODULE4UNDERTEMPPROTECTION=388,
            ALM_BMS_MODULE4CHARGEOVERCURRENTWARNING=389,
            ALM_BMS_MODULE4DISCHARGEOVERCURRENTWARNING=390,
            ALM_BMS_MODULE4LOWSOCWARNING=391,
            ALM_BMS_MODULE4OVERCURRENTPROTECTION=392,
            ALM_BMS_MODULE4OVERVOLTAGEPROTECTION=393,
            ALM_BMS_MODULE4ISOLATED=394,
            ALM_BMS_MODULE4COMMFAIL=395,
            ALM_BMS_MODULE4EMERGENCYALARM=396,
            ALM_BMS_MODULE4CELLTEMPOUTOFRANGE=397,
            ALM_BMS_MODULE4HIGHBATTERYSUPPLY=398,
            ALM_BMS_MODULE4MOSFETOVERTEMPERATURE=399,
            ALM_BMS_MODULE4AUTOTESTFAIL=400,
            ALM_BMS_MODULE4DEEPDISCHARGE=401,
            ALM_BMS_MODULE4FUSEBLOWN=402,
            ALM_BMS_MODULE5CELLOVERVOLTAGEPROT=403,
            ALM_BMS_MODULE5CELLUNDERVOLTAGEPROT=404,
            ALM_BMS_MODULE5CELLUNBALANCED=405,
            ALM_BMS_MODULE5CELLUNDERVOLTAGEWARNING=406,
            ALM_BMS_MODULE5CELLOVERVOLTAGEWARNING=407,
            ALM_BMS_MODULE5CHARGEOVERTEMPPROTECTION=408,
            ALM_BMS_MODULE5DISCHARGEOVERTEMPPROTECTION=409,
            ALM_BMS_MODULE5UNDERTEMPPROTECTION=410,
            ALM_BMS_MODULE5CHARGEOVERCURRENTWARNING=411,
            ALM_BMS_MODULE5DISCHARGEOVERCURRENTWARNING=412,
            ALM_BMS_MODULE5LOWSOCWARNING=413,
            ALM_BMS_MODULE5OVERCURRENTPROTECTION=414,
            ALM_BMS_MODULE5OVERVOLTAGEPROTECTION=415,
            ALM_BMS_MODULE5ISOLATED=416,
            ALM_BMS_MODULE5COMMFAIL=417,
            ALM_BMS_MODULE5EMERGENCYALARM=418,
            ALM_BMS_MODULE5CELLTEMPOUTOFRANGE=419,
            ALM_BMS_MODULE5HIGHBATTERYSUPPLY=420,
            ALM_BMS_MODULE5MOSFETOVERTEMPERATURE=421,
            ALM_BMS_MODULE5AUTOTESTFAIL=422,
            ALM_BMS_MODULE5DEEPDISCHARGE=423,
            ALM_BMS_MODULE5FUSEBLOWN=424,
            ALM_BMS_MODULE6CELLOVERVOLTAGEPROT=425,
            ALM_BMS_MODULE6CELLUNDERVOLTAGEPROT=426,
            ALM_BMS_MODULE6CELLUNBALANCED=427,
            ALM_BMS_MODULE6CELLUNDERVOLTAGEWARNING=428,
            ALM_BMS_MODULE6CELLOVERVOLTAGEWARNING=429,
            ALM_BMS_MODULE6CHARGEOVERTEMPPROTECTION=430,
            ALM_BMS_MODULE6DISCHARGEOVERTEMPPROTECTION=431,
            ALM_BMS_MODULE6UNDERTEMPPROTECTION=432,
            ALM_BMS_MODULE6CHARGEOVERCURRENTWARNING=433,
            ALM_BMS_MODULE6DISCHARGEOVERCURRENTWARNING=434,
            ALM_BMS_MODULE6LOWSOCWARNING=435,
            ALM_BMS_MODULE6OVERCURRENTPROTECTION=436,
            ALM_BMS_MODULE6OVERVOLTAGEPROTECTION=437,
            ALM_BMS_MODULE6ISOLATED=438,
            ALM_BMS_MODULE6COMMFAIL=439,
            ALM_BMS_MODULE6EMERGENCYALARM=440,
            ALM_BMS_MODULE6CELLTEMPOUTOFRANGE=441,
            ALM_BMS_MODULE6HIGHBATTERYSUPPLY=442,
            ALM_BMS_MODULE6MOSFETOVERTEMPERATURE=443,
            ALM_BMS_MODULE6AUTOTESTFAIL=444,
            ALM_BMS_MODULE6DEEPDISCHARGE=445,
            ALM_BMS_MODULE6FUSEBLOWN=446,
            ALM_BMS_MODULE7CELLOVERVOLTAGEPROT=447,
            ALM_BMS_MODULE7CELLUNDERVOLTAGEPROT=448,
            ALM_BMS_MODULE7CELLUNBALANCED=449,
            ALM_BMS_MODULE7CELLUNDERVOLTAGEWARNING=450,
            ALM_BMS_MODULE7CELLOVERVOLTAGEWARNING=451,
            ALM_BMS_MODULE7CHARGEOVERTEMPPROTECTION=452,
            ALM_BMS_MODULE7DISCHARGEOVERTEMPPROTECTION=453,
            ALM_BMS_MODULE7UNDERTEMPPROTECTION=454,
            ALM_BMS_MODULE7CHARGEOVERCURRENTWARNING=455,
            ALM_BMS_MODULE7DISCHARGEOVERCURRENTWARNING=456,
            ALM_BMS_MODULE7LOWSOCWARNING=457,
            ALM_BMS_MODULE7OVERCURRENTPROTECTION=458,
            ALM_BMS_MODULE7OVERVOLTAGEPROTECTION=459,
            ALM_BMS_MODULE7ISOLATED=460,
            ALM_BMS_MODULE7COMMFAIL=461,
            ALM_BMS_MODULE7EMERGENCYALARM=462,
            ALM_BMS_MODULE7CELLTEMPOUTOFRANGE=463,
            ALM_BMS_MODULE7HIGHBATTERYSUPPLY=464,
            ALM_BMS_MODULE7MOSFETOVERTEMPERATURE=465,
            ALM_BMS_MODULE7AUTOTESTFAIL=466,
            ALM_BMS_MODULE7DEEPDISCHARGE=467,
            ALM_BMS_MODULE7FUSEBLOWN=468,
            ALM_BMS_MODULE8CELLOVERVOLTAGEPROT=469,
            ALM_BMS_MODULE8CELLUNDERVOLTAGEPROT=470,
            ALM_BMS_MODULE8CELLUNBALANCED=471,
            ALM_BMS_MODULE8CELLUNDERVOLTAGEWARNING=472,
            ALM_BMS_MODULE8CELLOVERVOLTAGEWARNING=473,
            ALM_BMS_MODULE8CHARGEOVERTEMPPROTECTION=474,
            ALM_BMS_MODULE8DISCHARGEOVERTEMPPROTECTION=475,
            ALM_BMS_MODULE8UNDERTEMPPROTECTION=476,
            ALM_BMS_MODULE8CHARGEOVERCURRENTWARNING=477,
            ALM_BMS_MODULE8DISCHARGEOVERCURRENTWARNING=478,
            ALM_BMS_MODULE8LOWSOCWARNING=479,
            ALM_BMS_MODULE8OVERCURRENTPROTECTION=480,
            ALM_BMS_MODULE8OVERVOLTAGEPROTECTION=481,
            ALM_BMS_MODULE8ISOLATED=482,
            ALM_BMS_MODULE8COMMFAIL=483,
            ALM_BMS_MODULE8EMERGENCYALARM=484,
            ALM_BMS_MODULE8CELLTEMPOUTOFRANGE=485,
            ALM_BMS_MODULE8HIGHBATTERYSUPPLY=486,
            ALM_BMS_MODULE8MOSFETOVERTEMPERATURE=487,
            ALM_BMS_MODULE8AUTOTESTFAIL=488,
            ALM_BMS_MODULE8DEEPDISCHARGE=489,
            ALM_BMS_MODULE8FUSEBLOWN=490,
            ALM_BMS_MODULE9CELLOVERVOLTAGEPROT=491,
            ALM_BMS_MODULE9CELLUNDERVOLTAGEPROT=492,
            ALM_BMS_MODULE9CELLUNBALANCED=493,
            ALM_BMS_MODULE9CELLUNDERVOLTAGEWARNING=494,
            ALM_BMS_MODULE9CELLOVERVOLTAGEWARNING=495,
            ALM_BMS_MODULE9CHARGEOVERTEMPPROTECTION=496,
            ALM_BMS_MODULE9DISCHARGEOVERTEMPPROTECTION=497,
            ALM_BMS_MODULE9UNDERTEMPPROTECTION=498,
            ALM_BMS_MODULE9CHARGEOVERCURRENTWARNING=499,
            ALM_BMS_MODULE9DISCHARGEOVERCURRENTWARNING=500,
            ALM_BMS_MODULE9LOWSOCWARNING=501,
            ALM_BMS_MODULE9OVERCURRENTPROTECTION=502,
            ALM_BMS_MODULE9OVERVOLTAGEPROTECTION=503,
            ALM_BMS_MODULE9ISOLATED=504,
            ALM_BMS_MODULE9COMMFAIL=505,
            ALM_BMS_MODULE9EMERGENCYALARM=506,
            ALM_BMS_MODULE9CELLTEMPOUTOFRANGE=507,
            ALM_BMS_MODULE9HIGHBATTERYSUPPLY=508,
            ALM_BMS_MODULE9MOSFETOVERTEMPERATURE=509,
            ALM_BMS_MODULE9AUTOTESTFAIL=510,
            ALM_BMS_MODULE9DEEPDISCHARGE=511,
            ALM_BMS_MODULE9FUSEBLOWN=512,
            ALM_BMS_MODULE10CELLOVERVOLTAGEPROT=513,
            ALM_BMS_MODULE10CELLUNDERVOLTAGEPROT=514,
            ALM_BMS_MODULE10CELLUNBALANCED=515,
            ALM_BMS_MODULE10CELLUNDERVOLTAGEWARNING=516,
            ALM_BMS_MODULE10CELLOVERVOLTAGEWARNING=517,
            ALM_BMS_MODULE10CHARGEOVERTEMPPROTECTION=518,
            ALM_BMS_MODULE10DISCHARGEOVERTEMPPROTECTION=519,
            ALM_BMS_MODULE10UNDERTEMPPROTECTION=520,
            ALM_BMS_MODULE10CHARGEOVERCURRENTWARNING=521,
            ALM_BMS_MODULE10DISCHARGEOVERCURRENTWARNING=522,
            ALM_BMS_MODULE10LOWSOCWARNING=523,
            ALM_BMS_MODULE10OVERCURRENTPROTECTION=524,
            ALM_BMS_MODULE10OVERVOLTAGEPROTECTION=525,
            ALM_BMS_MODULE10ISOLATED=526,
            ALM_BMS_MODULE10COMMFAIL=527,
            ALM_BMS_MODULE10EMERGENCYALARM=528,
            ALM_BMS_MODULE10CELLTEMPOUTOFRANGE=529,
            ALM_BMS_MODULE10HIGHBATTERYSUPPLY=530,
            ALM_BMS_MODULE10MOSFETOVERTEMPERATURE=531,
            ALM_BMS_MODULE10AUTOTESTFAIL=532,
            ALM_BMS_MODULE10DEEPDISCHARGE=533,
            ALM_BMS_MODULE10FUSEBLOWN=534,
            ALM_BMS_MODULE11CELLOVERVOLTAGEPROT=535,
            ALM_BMS_MODULE11CELLUNDERVOLTAGEPROT=536,
            ALM_BMS_MODULE11CELLUNBALANCED=537,
            ALM_BMS_MODULE11CELLUNDERVOLTAGEWARNING=538,
            ALM_BMS_MODULE11CELLOVERVOLTAGEWARNING=539,
            ALM_BMS_MODULE11CHARGEOVERTEMPPROTECTION=540,
            ALM_BMS_MODULE11DISCHARGEOVERTEMPPROTECTION=541,
            ALM_BMS_MODULE11UNDERTEMPPROTECTION=542,
            ALM_BMS_MODULE11CHARGEOVERCURRENTWARNING=543,
            ALM_BMS_MODULE11DISCHARGEOVERCURRENTWARNING=544,
            ALM_BMS_MODULE11LOWSOCWARNING=545,
            ALM_BMS_MODULE11OVERCURRENTPROTECTION=546,
            ALM_BMS_MODULE11OVERVOLTAGEPROTECTION=547,
            ALM_BMS_MODULE11ISOLATED=548,
            ALM_BMS_MODULE11COMMFAIL=549,
            ALM_BMS_MODULE11EMERGENCYALARM=550,
            ALM_BMS_MODULE11CELLTEMPOUTOFRANGE=551,
            ALM_BMS_MODULE11HIGHBATTERYSUPPLY=552,
            ALM_BMS_MODULE11MOSFETOVERTEMPERATURE=553,
            ALM_BMS_MODULE11AUTOTESTFAIL=554,
            ALM_BMS_MODULE11DEEPDISCHARGE=555,
            ALM_BMS_MODULE11FUSEBLOWN=556,
            ALM_BMS_MODULE12CELLOVERVOLTAGEPROT=557,
            ALM_BMS_MODULE12CELLUNDERVOLTAGEPROT=558,
            ALM_BMS_MODULE12CELLUNBALANCED=559,
            ALM_BMS_MODULE12CELLUNDERVOLTAGEWARNING=560,
            ALM_BMS_MODULE12CELLOVERVOLTAGEWARNING=561,
            ALM_BMS_MODULE12CHARGEOVERTEMPPROTECTION=562,
            ALM_BMS_MODULE12DISCHARGEOVERTEMPPROTECTION=563,
            ALM_BMS_MODULE12UNDERTEMPPROTECTION=564,
            ALM_BMS_MODULE12CHARGEOVERCURRENTWARNING=565,
            ALM_BMS_MODULE12DISCHARGEOVERCURRENTWARNING=566,
            ALM_BMS_MODULE12LOWSOCWARNING=567,
            ALM_BMS_MODULE12OVERCURRENTPROTECTION=568,
            ALM_BMS_MODULE12OVERVOLTAGEPROTECTION=569,
            ALM_BMS_MODULE12ISOLATED=570,
            ALM_BMS_MODULE12COMMFAIL=571,
            ALM_BMS_MODULE12EMERGENCYALARM=572,
            ALM_BMS_MODULE12CELLTEMPOUTOFRANGE=573,
            ALM_BMS_MODULE12HIGHBATTERYSUPPLY=574,
            ALM_BMS_MODULE12MOSFETOVERTEMPERATURE=575,
            ALM_BMS_MODULE12AUTOTESTFAIL=576,
            ALM_BMS_MODULE12DEEPDISCHARGE=577,
            ALM_BMS_MODULE12FUSEBLOWN=578,
            ALM_BMS_MODULE13CELLOVERVOLTAGEPROT=579,
            ALM_BMS_MODULE13CELLUNDERVOLTAGEPROT=580,
            ALM_BMS_MODULE13CELLUNBALANCED=581,
            ALM_BMS_MODULE13CELLUNDERVOLTAGEWARNING=582,
            ALM_BMS_MODULE13CELLOVERVOLTAGEWARNING=583,
            ALM_BMS_MODULE13CHARGEOVERTEMPPROTECTION=584,
            ALM_BMS_MODULE13DISCHARGEOVERTEMPPROTECTION=585,
            ALM_BMS_MODULE13UNDERTEMPPROTECTION=586,
            ALM_BMS_MODULE13CHARGEOVERCURRENTWARNING=587,
            ALM_BMS_MODULE13DISCHARGEOVERCURRENTWARNING=588,
            ALM_BMS_MODULE13LOWSOCWARNING=589,
            ALM_BMS_MODULE13OVERCURRENTPROTECTION=590,
            ALM_BMS_MODULE13OVERVOLTAGEPROTECTION=591,
            ALM_BMS_MODULE13ISOLATED=592,
            ALM_BMS_MODULE13COMMFAIL=593,
            ALM_BMS_MODULE13EMERGENCYALARM=594,
            ALM_BMS_MODULE13CELLTEMPOUTOFRANGE=595,
            ALM_BMS_MODULE13HIGHBATTERYSUPPLY=596,
            ALM_BMS_MODULE13MOSFETOVERTEMPERATURE=597,
            ALM_BMS_MODULE13AUTOTESTFAIL=598,
            ALM_BMS_MODULE13DEEPDISCHARGE=599,
            ALM_BMS_MODULE13FUSEBLOWN=600,
            ALM_BMS_MODULE14CELLOVERVOLTAGEPROT=601,
            ALM_BMS_MODULE14CELLUNDERVOLTAGEPROT=602,
            ALM_BMS_MODULE14CELLUNBALANCED=603,
            ALM_BMS_MODULE14CELLUNDERVOLTAGEWARNING=604,
            ALM_BMS_MODULE14CELLOVERVOLTAGEWARNING=605,
            ALM_BMS_MODULE14CHARGEOVERTEMPPROTECTION=606,
            ALM_BMS_MODULE14DISCHARGEOVERTEMPPROTECTION=607,
            ALM_BMS_MODULE14UNDERTEMPPROTECTION=608,
            ALM_BMS_MODULE14CHARGEOVERCURRENTWARNING=609,
            ALM_BMS_MODULE14DISCHARGEOVERCURRENTWARNING=610,
            ALM_BMS_MODULE14LOWSOCWARNING=611,
            ALM_BMS_MODULE14OVERCURRENTPROTECTION=612,
            ALM_BMS_MODULE14OVERVOLTAGEPROTECTION=613,
            ALM_BMS_MODULE14ISOLATED=614,
            ALM_BMS_MODULE14COMMFAIL=615,
            ALM_BMS_MODULE14EMERGENCYALARM=616,
            ALM_BMS_MODULE14CELLTEMPOUTOFRANGE=617,
            ALM_BMS_MODULE14HIGHBATTERYSUPPLY=618,
            ALM_BMS_MODULE14MOSFETOVERTEMPERATURE=619,
            ALM_BMS_MODULE14AUTOTESTFAIL=620,
            ALM_BMS_MODULE14DEEPDISCHARGE=621,
            ALM_BMS_MODULE14FUSEBLOWN=622,
            ALM_BMS_MODULE15CELLOVERVOLTAGEPROT=623,
            ALM_BMS_MODULE15CELLUNDERVOLTAGEPROT=624,
            ALM_BMS_MODULE15CELLUNBALANCED=625,
            ALM_BMS_MODULE15CELLUNDERVOLTAGEWARNING=626,
            ALM_BMS_MODULE15CELLOVERVOLTAGEWARNING=627,
            ALM_BMS_MODULE15CHARGEOVERTEMPPROTECTION=628,
            ALM_BMS_MODULE15DISCHARGEOVERTEMPPROTECTION=629,
            ALM_BMS_MODULE15UNDERTEMPPROTECTION=630,
            ALM_BMS_MODULE15CHARGEOVERCURRENTWARNING=631,
            ALM_BMS_MODULE15DISCHARGEOVERCURRENTWARNING=632,
            ALM_BMS_MODULE15LOWSOCWARNING=633,
            ALM_BMS_MODULE15OVERCURRENTPROTECTION=634,
            ALM_BMS_MODULE15OVERVOLTAGEPROTECTION=635,
            ALM_BMS_MODULE15ISOLATED=636,
            ALM_BMS_MODULE15COMMFAIL=637,
            ALM_BMS_MODULE15EMERGENCYALARM=638,
            ALM_BMS_MODULE15CELLTEMPOUTOFRANGE=639,
            ALM_BMS_MODULE15HIGHBATTERYSUPPLY=640,
            ALM_BMS_MODULE15MOSFETOVERTEMPERATURE=641,
            ALM_BMS_MODULE15AUTOTESTFAIL=642,
            ALM_BMS_MODULE15DEEPDISCHARGE=643,
            ALM_BMS_MODULE15FUSEBLOWN=644,
            ALM_BMS_MODULE16CELLOVERVOLTAGEPROT=645,
            ALM_BMS_MODULE16CELLUNDERVOLTAGEPROT=646,
            ALM_BMS_MODULE16CELLUNBALANCED=647,
            ALM_BMS_MODULE16CELLUNDERVOLTAGEWARNING=648,
            ALM_BMS_MODULE16CELLOVERVOLTAGEWARNING=649,
            ALM_BMS_MODULE16CHARGEOVERTEMPPROTECTION=650,
            ALM_BMS_MODULE16DISCHARGEOVERTEMPPROTECTION=651,
            ALM_BMS_MODULE16UNDERTEMPPROTECTION=652,
            ALM_BMS_MODULE16CHARGEOVERCURRENTWARNING=653,
            ALM_BMS_MODULE16DISCHARGEOVERCURRENTWARNING=654,
            ALM_BMS_MODULE16LOWSOCWARNING=655,
            ALM_BMS_MODULE16OVERCURRENTPROTECTION=656,
            ALM_BMS_MODULE16OVERVOLTAGEPROTECTION=657,
            ALM_BMS_MODULE16ISOLATED=658,
            ALM_BMS_MODULE16COMMFAIL=659,
            ALM_BMS_MODULE16EMERGENCYALARM=660,
            ALM_BMS_MODULE16CELLTEMPOUTOFRANGE=661,
            ALM_BMS_MODULE16HIGHBATTERYSUPPLY=662,
            ALM_BMS_MODULE16MOSFETOVERTEMPERATURE=663,
            ALM_BMS_MODULE16AUTOTESTFAIL=664,
            ALM_BMS_MODULE16DEEPDISCHARGE=665,
            ALM_BMS_MODULE16FUSEBLOWN=666,
            ALM_RILDG_DOOROPEN =700,
            ALM_RILDG_SMOKEFIRE =701,
            ALM_RILDG_LLOP =702,
            ALM_RILDG_HCT =703,
            ALM_RILDG_DGCONTON =704,
            ALM_RILDG_VBELTFAIL =705,
            ALM_RILDG_HALFFUEL =706,
            ALM_RILDG_LOWFUEL =707,
            ALM_RILDG_EMERGENCY =708,
            ALM_RILDG_AUTOMANUAL =709,
            ALM_RILDG_EXT1 =710,
            ALM_RILDG_EXT2 =711,
            ALM_RILDG_LOWWATERLEVEL =712,
            ALM_RILDG_MAINSCONTIN =713,
            ALM_RILDG_OVERLOAD =714,
            ALM_RILDG_MAINSFAIL =715,
            ALM_RILDG_DGFAILTOSTART =716,
            ALM_RILDG_OVERSPEED =717,
            ALM_RILDG_UNDERSPEED =718,
            ALM_RILDG_DGON =719,
            ALM_RILDG_REMOTESTART =720,
            ALM_RILDG_CANOPYTEMPHIGH =721,
            ALM_RILDG_ALTERNATORFAULT =722,
            ALM_RILDG_MAINSCHARGERFAIL =723,
            ALM_RILDG_OUTPUT1 =724,
            ALM_RILDG_OUTPUT2 =725,
            ALM_RILDG_OUTPUT3 =726,
            ALM_RILDG_OUTPUT4 =727,
            ALM_RILDG_OUTPUT5 =728,
            ALM_RILDG_OUTPUT6 =729,
            ALM_RILDG_OUTPUT7 =730,
            ALM_RILDG_OUTPUT8 =731,
            ALM_RILDG_DGCONTACTORRELAY =732,
            ALM_RILDG_MAINSCONTACTORRELAY =733,
            ALM_LAST_ALARM =798,
            STATUS_FLOATMODE=980,
            STATUS_CHARGEMODE=981,
            STATUS_MANUALCHARGE=982,
            STATUS_EQUALISATIONMODE=983,
            STATUS_EXTENDEDCHARGE=984,
            STATUS_BATTERYTEST=985,
            STATUS_FLOATBCL=986,
            STATUS_CHARGEBCL=987,
            STATUS_BATTBANKDISCHARGE=988,
            STATUS_ECOMODE=989,
            STATUS_LOADONSOLAR=990,
            STATUS_LIIONMODE=991,
            BLOCK_ALM=999,
            END_ALARM=1000


}ALARM_INDEX_T;
'''
calibrate = '''[GENERAL FACTORS]
dc current check factor percentage = 10
dc current check tolerance percentage = 2.0
dc voltage calibration tolerance = 0.43

[HALL EFFECT]
adc multiplier = 10
number of bits = 3972
factor = 0.93
negative current low = 50
negative current cal = YES
current low = 5
current high = 95
verify current low = 10
verify current mid = 50
verify current high = 95
deadband = 30
current tolerance = 2.0
batt charge compensation = 2.0
batt discharge compensation = 1.2

[SHUNT]
adc multiplier = 10
number of bits = 3972
factor = 0.93
deadband percentage = 1
current tolerance percentage = 2.0
batt charge compensation = 2.0
batt discharge compensation = 1.2
negative current cal = YES
negative current low upto 50 = 40
negative current low upto 100 = 85
negative current low upto 200 = 85
negative current low upto 400 = 85
negative current low upto 600 = 85
negative current low upto 800 = 85
negative current low upto 1000 = 85
negative current low upto 1200 = 85
negative current low upto 2100 = 85
current low upto 50 = 5
current low upto 100 = 5
current low upto 200 = 5
current low upto 400 = 10
current low upto 600 = 10
current low upto 800 = 10
current low upto 1000 = 15
current low upto 1200 = 15
current low upto 2100 = 25
current high upto 50 = 45
current high upto 100 = 95
current high upto 200 = 95
current high upto 400 = 95
current high upto 600 = 95
current high upto 800 = 95
current high upto 1000 = 95
current high upto 1200 = 95
current high upto 2100 = 95
verify current low upto 50 = 10
verify current low upto 100 = 10
verify current low upto 200 = 10
verify current low upto 400 = 10
verify current low upto 600 = 10
verify current low upto 800 = 10
verify current low upto 1000 = 10
verify current low upto 1200 = 10
verify current low upto 2100 = 10
verify current mid upto 50 = 25
verify current mid upto 100 = 50
verify current mid upto 200 = 50
verify current mid upto 400 = 50
verify current mid upto 600 = 50
verify current mid upto 800 = 50
verify current mid upto 1000 = 50
verify current mid upto 1200 = 50
verify current mid upto 2100 = 50
verify current high upto 50 = 40
verify current high upto 100 = 70
verify current high upto 200 = 70
verify current high upto 400 = 70
verify current high upto 600 = 110
verify current high upto 800 = 110
verify current high upto 1000 = 110
verify current high upto 1200 = 110
verify current high upto 2100 = 110
'''
config = '''[DUT CONFIGURATION]
ac phases type = THREE PHASE
no. of battery fuses = 2
no. of battery lvd = 1
no. of load lvd = 1
no. of load current = 1
load current sensor = ENABLE
dcif card = PRESENT
dcif card type number = 3
channel1 shunt value = 400
channel1 shunt mv value = 50
channel2 shunt value = 400
channel2 shunt mv value = 50
dcif card type = SHUNT SMALL
hvlv card = 8888888888
dcif ip card = 8888888888
dcif op card = 8888888888
temperature1 = DISABLE
temperature2 = PRESENT
temperature3 = DISABLE
pfc io card = DISABLE
smr count = 5
smr type = 4KWS
battery type = LION
lion module count = 15
battery capacity = 100
bcl factor = 24
ac ip voltage source = ACIF 
ac ip current source = ACIF 
lower port baudrate = 19200
upper port baudrate = 19200
modbus comm = 0
lithium ion comm = 1
acem comm = 2
dg amf comm = 2
solar hvlv comm = 2
ext dcem comm = 0
bnms comm = 0

'''
default = '''[DEFAULT SETTING]
smr count = 7
system overload = 400
battery ah = 500
max smr count = 10
comm smr count = 100

[DEFAULT SETTING STATE]
smr count = YES
system overload = YES
battery ah = YES
max smr count = YES
comm smr count = YES

'''
filetime = '''[TIME]
time = dtd21012016163031

'''
oid = '''[MAINS SETTING]
mains low fail set=TAB.5003.0
mains low fail restore=TAB.5005.0
mains high fail set=TAB.5002.0
mains high fail restore=TAB.5004.0
mains low set=TAB.1428.0
mains low restore=TAB.1429.0
mains high set=TAB.1426.0
mains high restore=TAB.1427.0

[BATTERY SETTING]
float voltage=TAB.2001.0
charge voltage=TAB.2002.0
lion charge voltage=TAB.1069.0
battery lvd set=TAB.1413.0
battery lvd restore=TAB.1414.0
load1 lvd set=TAB.1407.0
load1 lvd restore=TAB.1408.0
load2 lvd set=TAB.1409.0
load2 lvd restore=TAB.140A.0
load3 lvd set=TAB.140B.0
load3 lvd restore=TAB.140C.0
load4 lvd set=TAB.140D.0
load4 lvd restore=TAB.140E.0
dc voltage low set=TAB.1405.0
dc voltage low restore=TAB.1406.0

[DOOR SETTING]
door open set time=TAB.45.0
door open restore time=TAB.46.0

[MAINS READ VOLTAGE]
r phase=TAB.1453.0
y phase=TAB.1454.0
b phase=TAB.1455.0

[MAINS READ CURRENT]
r phase=TAB.1464.0
y phase=TAB.1468.0
b phase=TAB.1447.0

[DG READ VOLTAGE]
r phase=TAB.4456.0
y phase=TAB.4459.0
b phase=TAB.445C.0

[DG READ CURRENT]
r phase=TAB.4457.0
y phase=TAB.445A.0
b phase=TAB.445D.0

[DC READ VOLTAGE]
batt1=TAB.1446.1
batt2=TAB.1446.2
batt3=TAB.1446.3
batt4=TAB.1446.4
bus=TAB.1450.0
dc source=TAB.146D.0

[DC READ CURRENT]
batt1=TAB.1442.1
batt2=TAB.1442.2
batt3=TAB.1442.3
batt4=TAB.1442.4
load1=TAB.144C.1
load2=TAB.144C.2
load3=TAB.144C.3
load4=TAB.144C.4


[READ TEMPERATURE]
temperature1=TAB.1881.0
temperature2=TAB.303B.0
temperature3=TAB.303C.0

[ACIF DATA]
acif alarm register1=TAB.5810.0
acif alarm register12=TAB.5811.0
grid pf r phase=TAB.4493.1
grid pf y phase=TAB.4493.2
grid pf b phase=TAB.4493.3
grid kwh=TAB.4024.0
grid runhr=TAB.3416.0
ACIF SOFT VER=TAB.
dg pf r phase=TAB.4494.1
dg pf y phase=TAB.4494.2
dg pf b phase=TAB.4494.3
dg kwh=TAB.4025.0
dg runhr=TAB.3417.0

[MODEM]
signal strength=TAB.9052.0

[DG]
manual mode=TAB.4473.0
dg alarm byte=TAB.4492.0
dg alarm byte2=TAB.4497.0
dg emergency set=TAB.40C.1BE
battery voltage=TAB.4480.0
battery current=TAB.4481.0

[ALARM]
spu fail=TAB.280.58
batt fuse fail pfc=TAB.280.65
dccb trip=TAB.280.59
system alarm=TAB.280.A6
controller fail=TAB.280.A7
system overload=TAB.280.A8
dc over voltage=TAB.280.A9
dc voltage low=TAB.280.AA
llvd-1 disconnect=TAB.280.AB
llvd-2 disconnect=TAB.280.AC
llvd-3 disconnect=TAB.280.AD
llvd-4 disconnect=TAB.280.AE
battery lvd=TAB.280.AF
tempcomp cbl fail=TAB.280.B0
temp-1 low=TAB.280.B1
temp-2 low=TAB.280.B2
temp-1 high=TAB.280.B3
temp-2 high=TAB.280.B4
fan-1 fail=TAB.280.B5
fan-2 fail=TAB.280.B6
fan-3 fail=TAB.280.B7
fan-4 fail=TAB.280.B8

fan fail=TAB.401.6E

power fan fail=TAB.280.6F
battery  fan fail=TAB.280.70

mbd=TAB.280.BA
spi flash fail=TAB.280.C0
rtc fail=TAB.280.C1
eeprom1 fail=TAB.280.C2
eeprom2 fail=TAB.280.C3
media fail=TAB.280.C4
media full=TAB.280.C5
batt temp high=TAB.280.C6
batt temp low=TAB.280.C7
batt1 cntr. fail=TAB.280.DC
batt2 cntr. fail=TAB.280.DD
batt3 cntr. fail=TAB.280.DE
batt4 cntr. fail=TAB.280.DF
batt5 cntr. fail=TAB.280.E0
batt1 not present=TAB.280.E1
batt2 not present=TAB.280.E2
batt3 not present=TAB.280.E3
batt4 not present=TAB.280.E4
batt5 not present=TAB.280.E5
batt1 isolated=TAB.280.E6
batt2 isolated=TAB.280.E7
batt3 isolated=TAB.280.E8
batt4 isolated=TAB.280.E9
batt5 isolated=TAB.280.EA
batt1 reverse=TAB.280.EB
batt2 reverse=TAB.280.EC
batt3 reverse=TAB.280.ED
batt4 reverse=TAB.280.EE
batt5 reverse=TAB.280.EF
batt bank dischg=TAB.280.F0
batt1 bank dischg=TAB.280.F1
batt2 bank dischg=TAB.280.F2
batt3 bank dischg=TAB.280.F3
batt4 bank dischg=TAB.280.F4
batt5 bank dischg=TAB.280.F5
batt1 mid cell v=TAB.280.F6
batt2 mid cell v=TAB.280.F7
batt3 mid cell v=TAB.280.F8
batt4 mid cell v=TAB.280.F9
batt1 fuse fail=TAB.280.FA
batt2 fuse fail=TAB.280.FB
batt3 fuse fail=TAB.280.FC
batt4 fuse fail=TAB.280.FD
batt5 fuse fail=TAB.280.FE
batt fuse fail=TAB.280.FF
batt over charged=TAB.280.100
battery test=TAB.280.101
extd charge mode=TAB.280.102
equalization mode=TAB.280.103
manual charge=TAB.280.104
r phase low=TAB.280.12F
r phase high=TAB.280.130
y phase low=TAB.280.131
y phase high=TAB.280.132
b phase low=TAB.280.133
b phase high=TAB.280.134
mains warning=TAB.280.135
mains fail=TAB.280.136
r phase fail=TAB.280.137
y phase fail=TAB.280.138
b phase fail=TAB.280.139
phase fail=TAB.280.13A
mains high=TAB.280.13B
mains low=TAB.280.13C
neu earth fail=TAB.280.13D
neutral fault=TAB.280.13E
ne fail=TAB.280.13F
earth fault=TAB.280.140
dummy1=TAB.280.141
dummy2=TAB.280.142
dummy3=TAB.280.143
line fail=TAB.280.144
rec proc mode(fs)=TAB.280.145
rec comm fail=TAB.280.146
rec fail=TAB.280.147
multiple rec fail=TAB.280.148
actual rec fail=TAB.280.149
all rec fail=TAB.280.14A
indiv. rec fail=TAB.280.14B
indiv. rec commf=TAB.280.14C
rec temp. high=TAB.280.14D
all rec comm fail=TAB.280.14E
rec proc mode(ip)=TAB.280.14F
rec overvoltage=TAB.280.150
rec fanfail=TAB.280.151
all rec currlimit=TAB.280.152
rec 2ph op mode=TAB.280.153
ip freq abn=TAB.280.154
rec proc mode(fa)=TAB.280.155
s-chg comm fail=TAB.280.156
s-chg fail=TAB.280.157
multi s-chg fail=TAB.280.158
s actual recfail=TAB.280.159
all schg fail=TAB.280.15A
indiv schg fail=TAB.280.15B
indiv schg commf=TAB.280.15C
s-hvlv comm fail=TAB.280.15D
all s-hvlv fail=TAB.280.15E
solar system fail=TAB.280.15F
ip procmode(hvlv)=TAB.280.163
controller boot=TAB.280.164
can comm fail=TAB.280.165
hvlv comm fail=TAB.280.166
s-hvlv comm fail2=TAB.280.167
dcif comm fail=TAB.280.168
bms comm fail=TAB.280.169
cbms comm fail=TAB.280.16A
pfc1 comm fail=TAB.280.16B
pfc2 comm fail=TAB.280.16C
modem comm fail=TAB.280.16D
e-dcem comm fail=TAB.280.16E
acif comm fail=TAB.280.16F
dgbc comm fail=TAB.280.170
fs comm fail=TAB.280.171
camera comm fail=TAB.280.172
lcu comm fail=TAB.280.173
llvd disconnect=TAB.280.177
battery isolated=TAB.280.178
batt midcell fail=TAB.280.179
batt not present=TAB.280.17A
battery reverse=TAB.280.17B
batt cntr fail=TAB.280.17C
rec int alarms=TAB.280.17F
rec proc mode=TAB.280.180
battery fuse fail=TAB.280.181
media alarm=TAB.280.182
lvd rmt cmd=TAB.280.186
lvd time cmd=TAB.280.187
dg contactor on=TAB.280.5E
eb contactor on=TAB.280.5D
door open alarm=TAB.280.56

chiller door open alarm=TAB.280.66
battery door open alarm=TAB.280.6E


smoke alarm=TAB.280.57

[STATUS]
float mode=TAB.280.2BD
charge mode=TAB.280.2BE
manual charge=TAB.280.2BF
equalization mode=TAB.280.2C0
extended charge=TAB.280.2C1
battery test mode=TAB.280.2C2
float bcl=TAB.280.2C3
charge bcl=TAB.280.2C4
batt bank dischg=TAB.280.2C5
eco mode=TAB.280.2C6
load on solar=TAB.280.2C7

[SYSTEM CONFIG]
ac phases type=TAB.1012.0
no. of battery fuses=TAB.1418.0
no. of battery lvd=TAB.1416.0
no. of load lvd=TAB.141A.0
no. of load current=TAB.1417.0
load current sensor=TAB.102E.0
dcif card type=TAB.1093.0
hvlv card=TAB.1027.0
dcif card=TAB.103D.0
dcif ip card=TAB.108A.0
dcif op card=TAB.108B.0
pfc io card=TAB.1095.0
acif card=TAB.1099.0
dgbc card=TAB.109A.0
smr count=TAB.2004.0
system overload=TAB.1401.0
smr type=TAB.1098.0
ac ip voltage source=TAB.101B.0
ac ip current source=TAB.142B.0
dg phase type=TAB.4460.0
ipms power logic=TAB.4010.0
modem type=TAB.1059.0
site id=TAB.10.0
dc source=TAB.1473.0

fan fail sense=TAB.301A.0
lcu present=TAB.1060.0
ac1 present= TAB.1064.0
ac2 present= TAB.1062.0
aviation lamp configuration= TAB.1062.0

temperature1=TAB.1084.0
temperature2=TAB.1056.0
temperature3=TAB.1057.0

batt1 hall effect value=TAB.1443.1
batt2 hall effect value=TAB.1443.2
batt3 hall effect value=TAB.1443.3
batt1 shunt value=TAB.1445.1
batt2 shunt value=TAB.1445.2
batt3 shunt value=TAB.1445.3
batt1 shunt mv value=TAB.1444.1
batt2 shunt mv value=TAB.1444.2
batt3 shunt mv value=TAB.1444.3


load1 hall effect value=TAB.144D.1
load2 hall effect value=TAB.144D.2
load3 hall effect value=TAB.144D.3
load4 hall effect value=TAB.144D.4
load1 shunt value=TAB.144F.1
load2 shunt value=TAB.144F.2
load3 shunt value=TAB.144F.3
load4 shunt value=TAB.144F.4
load1 shunt mv value=TAB.144E.1
load2 shunt mv value=TAB.144E.2
load3 shunt mv value=TAB.144E.3
load4 shunt mv value=TAB.144E.4

eco mode=TAB.102A.0
vrla battery capacity=TAB.1802.0
lion battery capacity=TAB.1807.0
vrla bcl factor=TAB.1805.0
lion bcl factor=TAB.180A.0
lion module count=TAB.1833.0
battery type=TAB.184F.0



[CALIBRATE DC VOLTAGE]
batt1=TAB.3811.0
batt2=TAB.3812.0
batt3=TAB.3813.0
bus=TAB.3820.0
channel1 deadband=TAB.540D.1
channel2 deadband=TAB.540D.2
channel3 deadband=TAB.540D.3
channel4 deadband=TAB.540D.4
channel5 deadband=TAB.540D.5
channel6 deadband=TAB.540D.6
channel7 deadband=TAB.540D.7
channel1 gain=TAB.5410.1
channel2 gain=TAB.5410.2
channel3 gain=TAB.5410.3
channel4 gain=TAB.5410.4
channel5 gain=TAB.5410.5
channel6 gain=TAB.5410.6
channel7 gain=TAB.5410.7


[CALIBRATE CURRENT]
channel1=TAB.541C.1
channel2=TAB.541C.2
channel3=TAB.541C.3
channel4=TAB.541C.4
channel5=TAB.541C.5
channel6=TAB.541C.6
channel7=TAB.541C.7

channel1 deadband=TAB.5406.1
channel2 deadband=TAB.5406.2
channel3 deadband=TAB.5406.3
channel4 deadband=TAB.5406.4
channel5 deadband=TAB.5406.5
channel6 deadband=TAB.5406.6
channel7 deadband=TAB.5406.7
channel1 gain=TAB.5408.1
channel2 gain=TAB.5408.2
channel3 gain=TAB.5408.3
channel4 gain=TAB.5408.4
channel5 gain=TAB.5408.5
channel6 gain=TAB.5408.6
channel7 gain=TAB.5408.7
channel1 offset=TAB.540B.1
channel2 offset=TAB.540B.2
channel3 offset=TAB.540B.3
channel4 offset=TAB.540B.4
channel5 offset=TAB.540B.5
channel6 offset=TAB.540B.6
channel7 offset=TAB.540B.7


[CALIBRATE CURRENT DCIO]
channel1=TAB.144C.1
channel2=TAB.144C.2
channel3=TAB.144C.3
channel4=TAB.144C.4
channel5=TAB.1442.1
channel6=TAB.1442.2
channel7=TAB.1442.3

channel1 deadband=TAB.5406.1
channel2 deadband=TAB.5406.2
channel3 deadband=TAB.5406.3
channel4 deadband=TAB.5424.1
channel5 deadband=TAB.5424.2
channel6 deadband=TAB.5424.3
channel7 deadband=TAB.5424.4

channel1 gain=TAB.5408.1
channel2 gain=TAB.5408.2
channel3 gain=TAB.5408.3
channel4 gain=TAB.5427.1
channel5 gain=TAB.5427.2
channel6 gain=TAB.5427.3
channel7 gain=TAB.5427.4

channel1 offset=TAB.540B.1
channel2 offset=TAB.540B.2
channel3 offset=TAB.540B.3
channel4 offset=TAB.542A.1
channel5 offset=TAB.542A.2
channel6 offset=TAB.542A.3
channel7 offset=TAB.542A.4



[BATTERY ISOLATE]
batt1=TAB.1856.0
batt2=TAB.1857.0
batt3=TAB.1858.0


[LOAD ISOLATE]
load1=TAB.53.1
load2=TAB.53.2
load3=TAB.53.3
load4=TAB.53.4
load5=TAB.53.5

[SMR COMMANDS]
deregister all smr=TAB.1420.0
smr1 status=TAB.1461.1
smr2 status=TAB.1461.2
smr3 status=TAB.1461.3
smr4 status=TAB.1461.4
smr5 status=TAB.1461.5
smr6 status=TAB.1461.6
smr7 status=TAB.1461.7
smr8 status=TAB.1461.8
smr9 status=TAB.1461.9
smr10 status=TAB.1461.A
smr11 status=TAB.1461.B
smr12 status=TAB.1461.C
smr13 status=TAB.1461.D
smr14 status=TAB.1461.E
smr15 status=TAB.1461.F
smr16 status=TAB.1461.10
smr17 status=TAB.1461.11
smr18 status=TAB.1461.12
smr19 status=TAB.1461.13
smr20 status=TAB.1461.14
smr21 status=TAB.1461.15
smr22 status=TAB.1461.16
smr23 status=TAB.1461.17
smr24 status=TAB.1461.18
smr25 status=TAB.1461.19
smr26 status=TAB.1461.1A
smr27 status=TAB.1461.1B
smr28 status=TAB.1461.1C
smr29 status=TAB.1461.1D
smr30 status=TAB.1461.1E
smr1 id=TAB.2009.1
smr2 id=TAB.2009.2
smr3 id=TAB.2009.3
smr4 id=TAB.2009.4
smr5 id=TAB.2009.5
smr6 id=TAB.2009.6
smr7 id=TAB.2009.7
smr8 id=TAB.2009.8
smr9 id=TAB.2009.9
smr10 id=TAB.2009.A
smr11 id=TAB.2009.B
smr12 id=TAB.2009.C
smr13 id=TAB.2009.D
smr14 id=TAB.2009.E
smr15 id=TAB.2009.F
smr16 id=TAB.2009.10
smr17 id=TAB.2009.11
smr18 id=TAB.2009.12
smr19 id=TAB.2009.13
smr20 id=TAB.2009.14
smr21 id=TAB.2009.15
smr22 id=TAB.2009.16
smr23 id=TAB.2009.17
smr24 id=TAB.2009.18
smr25 id=TAB.2009.19
smr26 id=TAB.2009.1A
smr27 id=TAB.2009.1B
smr28 id=TAB.2009.1C
smr29 id=TAB.2009.1D
smr30 id=TAB.2009.1E
smr1 current=TAB.145B.1
smr2 current=TAB.145B.2
smr3 current=TAB.145B.3
smr4 current=TAB.145B.4
smr5 current=TAB.145B.5
smr6 current=TAB.145B.6
smr7 current=TAB.145B.7
smr8 current=TAB.145B.8
smr9 current=TAB.145B.9
smr10 current=TAB.145B.A
smr11 current=TAB.145B.B
smr12 current=TAB.145B.C
smr13 current=TAB.145B.D
smr14 current=TAB.145B.E
smr15 current=TAB.145B.F
smr16 current=TAB.145B.10
smr17 current=TAB.145B.11
smr18 current=TAB.145B.12
smr19 current=TAB.145B.13
smr20 current=TAB.145B.14
smr21 current=TAB.145B.15
smr22 current=TAB.145B.16
smr23 current=TAB.145B.17
smr24 current=TAB.145B.18
smr25 current=TAB.145B.19
smr26 current=TAB.145B.1A
smr27 current=TAB.145B.1B
smr28 current=TAB.145B.1C
smr29 current=TAB.145B.1D
smr30 current=TAB.145B.1E
smr1 voltage=TAB.145C.1
smr2 voltage=TAB.145C.2
smr3 voltage=TAB.145C.3
smr4 voltage=TAB.145C.4
smr5 voltage=TAB.145C.5
smr6 voltage=TAB.145C.6
smr7 voltage=TAB.145C.7
smr8 voltage=TAB.145C.8
smr9 voltage=TAB.145C.9
smr10 voltage=TAB.145C.A
smr11 voltage=TAB.145C.B
smr12 voltage=TAB.145C.C
smr13 voltage=TAB.145C.D
smr14 voltage=TAB.145C.E
smr15 voltage=TAB.145C.F
smr16 voltage=TAB.145C.10
smr17 voltage=TAB.145C.11
smr18 voltage=TAB.145C.12
smr19 voltage=TAB.145C.13
smr20 voltage=TAB.145C.14
smr21 voltage=TAB.145C.15
smr22 voltage=TAB.145C.16
smr23 voltage=TAB.145C.17
smr24 voltage=TAB.145C.18
smr25 voltage=TAB.145C.19
smr26 voltage=TAB.145C.1A
smr27 voltage=TAB.145C.1B
smr28 voltage=TAB.145C.1C
smr29 voltage=TAB.145C.1D
smr30 voltage=TAB.145C.1E

[ALARM MASK]
battery lvd=TAB.040C.AF

[LED]
led=TAB.50.0

[BUZZER]
buzzer=TAB.51.0

[DCIF 8 OP PFC]
pfc=TAB.55.0
[DCIF 8 IP PFC]
pfc=TAB.5420.0
invert pfc=TAB.0412.

[DCIF 2 OP PFC]
pfc=TAB.54.0

[RS 485]
lower port baudrate=TAB.393.0
upper port baudrate=TAB.391.0
modbus comm=TAB.39C.8
lithium ion comm=TAB.39C.B
acem comm=TAB.39C.C
dg amf comm=TAB.39C.D
solar hvlv comm=TAB.39C.7
ext dcem comm=TAB.39C.6
bnms comm=TAB.39C.3
lcu comm=TAB.39C.9
fuel sensor comm=TAB.39C.4

[SYSTEM COMMANDS]
factory restore=TAB.31.0
setting restore=TAB.30.0
system reset=TAB.32.0
system initialize=TAB.35.0
ate test=TAB.5A.0
site id=TAB.10.0
serial number=TAB.A000.1
part number=TAB.A005.1
config file version=TAB.109F.0
m1000 mac id=TAB.9017.0
software version=TAB.39E.0
bootloader version=TAB.39F.0
system serial number=TAB.36.0
system part number=TAB.37.0
rtc date time=TAB.127.0

[GENERAL DATA]
total batt current=TAB.1466.0
total load current=TAB.1467.0

[AVIATION LAMP]
on hour=TAB.3045.0
on min=TAB.3046.0
off hour=TAB.3047.0
off min=TAB.3048.0
aviation lamp state=TAB.446D.0

[M1000 VER REV]
m1000=TAB.39E.0
bootloader=TAB.39F.0
hvlv=TAB.109B.0
acif=TAB.109C.0
dcif=TAB.109D.0
config=TAB.109F.0
pfcio 1=TAB.10A1.0
pfcio 2=TAB.10A2.0
dgbc=TAB.10A3.0

[M2000 VER REV]
m1000=TAB.39E.0
bootloader=TAB.39F.0
hvlv=TAB.109B.0
acif=TAB.109C.0
dcif=TAB.109D.0
config=TAB.109F.0
pfcio 1=TAB.10A1.0
pfcio 2=TAB.10A2.0
dgbc=TAB.10A3.0

[VER REV]
m1000=TAB.39E.0
bootloader=TAB.39F.0
hvlv=TAB.109B.0
acif=TAB.109C.0
dcif=TAB.109D.0
config=TAB.109F.0
pfcio 1=TAB.10A1.0
pfcio 2=TAB.10A2.0
dgbc=TAB.10A3.0

'''
orderedtelnet = '''C:\Python27\python.exe "C:/Users/amarjot.singh/Desktop/MCM M2000/F3 ats software/src/Read telnet.py"
[MAINS SETTING]
    main_low_fail_set=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS SETTING')['mains low fail set']))

    main_low_fail_restore=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS SETTING')['mains low fail restore']))

    main_high_fail_set=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS SETTING')['mains high fail set']))

    main_high_fail_restore=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS SETTING')['mains high fail restore']))

[BATTERY SETTING]
            charge_voltage_telnet=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['charge voltage']))

            charge_voltage_telnet=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['charge voltage']))

    float_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['float voltage']))

    charge_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['charge voltage']))

    battery_lvd_set=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['battery lvd set']))

    battery_lvd_restore=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['battery lvd restore']))

        load_lvd_set=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['load1 lvd set']))

        load_lvd_restore=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['load1 lvd restore']))

    dc_v_low_set=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['dc voltage low set']))

    dc_v_low_restore=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['dc voltage low restore']))

    dc_v_low_set=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['dc voltage low set']))

    dc_v_low_restore=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['dc voltage low restore']))

[DOOR SETTING]
        read_restore_time=int(TELNET_GET_COMMAND(self.telnet,OIDRead('DOOR SETTING')['door open restore time']))

[MAINS READ VOLTAGE]
#         voltage_r_phase=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['r phase']))

        voltage_r_phase=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['r phase']))

            voltage_phase=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')[phase.lower()]))

                        r_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['r phase']))

                        y_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['y phase']))

                        b_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['b phase']))

                r_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['r phase']))

                y_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['y phase']))

                b_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['b phase']))

[MAINS READ CURRENT]
                        r_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['r phase']))

                        y_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['y phase']))

                        b_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['b phase']))

                r_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['r phase']))

                y_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['y phase']))

                b_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['b phase']))

[DG READ VOLTAGE]
                    r_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ VOLTAGE')['r phase']))

                    r_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ VOLTAGE')['r phase']))

                    y_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ VOLTAGE')['y phase']))

                    b_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ VOLTAGE')['b phase']))

[DG READ CURRENT]
                    r_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ CURRENT')['r phase']))

                    r_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ CURRENT')['r phase']))

                    y_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ CURRENT')['y phase']))

                    b_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ CURRENT')['b phase']))

[DC READ VOLTAGE]
        value=TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(temp_count)])

                DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

        DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

            DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

        DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

        DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(i)]))

    DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

        DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(i)]))

    DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

            DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus'])) 

                DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt1']))  

                DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt1'])) 

            INDI_DUT_BATT_VOLTAGE=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(batt_number)]))

        DUT_BUS_VOLTAGE=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

#         INDI_DUT_BATT_VOLTAGE=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')[BATT+str(count_temp)]))

#     INDI_DUT_BATT_VOLTAGE=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

                    DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                    DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                        DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

            DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                    DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

#                 DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

        DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

        dc_source_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['dc source']))

            DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

            dc_source_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['dc source']))

            DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

            dc_source_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['dc source']))

[DC READ CURRENT]
        DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

            DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

            DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(count_temp)]))

                DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(count_temp)]))

                DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(count_temp)]))

                    DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(count_temp)]))

                    DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

                DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

            DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(1)]))

                DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(i)]))

            DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(i)]))

                    DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

                DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

#             DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(1)]))

#                 DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(i)]))

[READ TEMPERATURE]
            temperature=float(TELNET_GET_COMMAND(self.telnet,OIDRead('READ TEMPERATURE')['temperature'+str(temp)]))

                    temperature=TELNET_GET_COMMAND(self.telnet,OIDRead('READ TEMPERATURE')['temperature'+str(temp)])

[GENERAL DATA]
[ACIF DATA]
initial_eb_kwh_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['grid kwh']))

initial_dg_kwh_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg kwh']))

initial_dg_runhr_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg runhr']))

initial_eb_runhr_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['grid runhr']))

                    r_phase_pf=(float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg pf r phase'])))/100

                    r_phase_pf=(float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg pf r phase'])))/100

                    y_phase_pf=(float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg pf y phase'])))/100

                    b_phase_pf=(float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg pf b phase'])))/100

                #initial_dg_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg kwh']))

                #final_dg_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg kwh']))

                #initial_eb_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['grid kwh']))

            #initial_eb_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['grid kwh']))

#             final_eb_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['grid kwh']))

[MODEM]
            signal_strength_recieved=TELNET_GET_COMMAND(self.telnet,OIDRead('MODEM')['signal strength'])

[DG]
        alarm_byte=int(TELNET_GET_COMMAND(self.telnet,OIDRead('DG')['dg alarm byte']))

        alarm_byte=int(TELNET_GET_COMMAND(self.telnet,OIDRead('DG')['dg alarm byte2']))

                dg_battery_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG')['battery voltage']))

                dg_battery_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG')['battery current']))

[ALARM]
[STATUS]
[SYSTEM CONFIG]
site_id=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['site id'])

phase_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['ac phases type']))

dg_phase_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dg phase type'])) ## added for IPMS

battery_fuses_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['no. of battery fuses']))

battery_lvd_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['no. of battery lvd']))

load_lvd_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['no. of load lvd']))

load_current_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['no. of load current']))

load_current_sensor_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load current sensor']))

dcif_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dcif card']))

dcif_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dcif card type']))

load_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load'+str(count)+' hall effect value']))

batt_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['batt'+str(count-load_current_count)+' hall effect value']))

load_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load'+str(count)+' shunt value']))

load_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load'+str(count)+' shunt mv value']))

            batt_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['batt'+str(count-load_current_count)+' shunt value']))

            batt_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['batt'+str(count-load_current_count)+' shunt mv value']))

            load_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load'+str(count)+' shunt value']))

            load_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load'+str(count)+' shunt mv value']))

            batt_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['batt'+str(count-load_current_count)+' shunt value']))

            batt_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['batt'+str(count-load_current_count)+' shunt mv value']))

    hvlv_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['hvlv card']))

    acif_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['acif card'])) ## added for IPMS

    dgbc_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dgbc card'])) ## added for IPMS

    dcif_ip_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dcif ip card']))

    dcif_op_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dcif op card']))

    batt_temperature_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['temperature1']))

    room_temperature1_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['temperature2']))

    room_temperature2_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['temperature3']))

    pfc_io_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['pfc io card']))

    smr_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count']))

    smr_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr type']))

    battery_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['battery type']))

        battery_capacity=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla battery capacity']))

        bcl_factor=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla bcl factor']))

        battery_capacity=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion battery capacity']))

        bcl_factor=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion bcl factor']))

        module_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion module count']))

    ac_ip_voltage_source=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['ac ip voltage source']))

    ac_ip_current_source=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['ac ip current source']))

    ipms_power_logic_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['ipms power logic'])) ## added for IPMS

        config_smr_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count']))

        config_smr_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count']))

            config_smr_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count']))

    modem_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['modem type']))

    config_smr_count=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count'])

    site_id=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['site id'])

    load_lvd_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['no. of load lvd']))

    smr_count=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count'])

        battery_capacity_vrla=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla battery capacity']))

        bcl_factor_vrla=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla bcl factor']))

        battery_capacity=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion battery capacity']))

        module_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion module count']))

        bcl_factor=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion bcl factor']))

        battery_capacity_vrla=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla battery capacity']))

        bcl_factor_vrla=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla bcl factor']))

    lcu_present_flag=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lcu present']))

    AC1_present_flag=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['ac1 present']))

    AC2_present_flag = int(TELNET_GET_COMMAND(self.telnet, OIDRead('SYSTEM CONFIG')['ac2 present']))

    #aviation_lamp_flag=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['aviation lamp configuration']))##This oid is 0 if False , otherwise it is a number.

    #fan_fail_sense=int(TELNET_GET_COMMAND(self.telnet, OIDRead('SYSTEM CONFIG')['fan fail sense']))

[CALIBRATE DC VOLTAGE]
        PRINT_CONSOLE(self,"CHANNEL "+str(i+1)+"VOLTAGE DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE DC VOLTAGE')['channel'+str(i+1)+' deadband'])))

        PRINT_CONSOLE(self,"CHANNEL "+str(i+1)+"VOLTAGE GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE DC VOLTAGE')['channel'+str(i+1)+' gain'])))

[CALIBRATE CURRENT]
            PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' gain'])))

            PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' offset'])))

            #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' deadband'])))

            if (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' gain'])!='0') or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' offset'])!='0'):# or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' deadband'])!='0'):

                PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' gain'])))

                PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' offset'])))

                #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' deadband'])))

    if (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])!='0') or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])!='0'):# or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!='0'):

        PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

        PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

        #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

    DUT_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

    DUT_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

        if (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain']))!=GAIN_OFFSET) or (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset']))!=ZERO_OFFSET) or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!=str(DEADBAND)):

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

    DUT__VERIFY_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

    DUT__VERIFY_READ_CURRENT_MID=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

    DUT__VERIFY_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

    if (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])!='0') or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])!='0'):# or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!='0'):

        PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

        PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

        #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

    DUT_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

    DUT_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

        if (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain']))!=GAIN_OFFSET) or (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset']))!=ZERO_OFFSET) or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!=str(DEADBAND)):

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

    DUT__VERIFY_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

    DUT__VERIFY_READ_CURRENT_MID=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

    DUT__VERIFY_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

#     if (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])!='0') or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])!='0'):# or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!='0'):

#         PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

#         PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

#         #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

#     DUT_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

#     DUT_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

        #if (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain']))!=GAIN_OFFSET) or (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset']))!=ZERO_OFFSET) or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!=str(DEADBAND)):

            if TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!=str(DEADBAND):

    #PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

    #PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))  

#     DUT__VERIFY_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

#     DUT__VERIFY_READ_CURRENT_MID=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

        DUT__VERIFY_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

            if (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])!='0') or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])!='0'):# or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!='0'):

                PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

                PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

                #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

[CALIBRATE CURRENT DCIO]
            if TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT DCIO')['channel'+str(channel_number)+' deadband'])!=str(DEADBAND):

        DUT__VERIFY_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT DCIO')['channel'+str(channel_number)]))

[BATTERY ISOLATE]
[LOAD ISOLATE]
[SMR COMMANDS]
            INDI_SMR_CURRENT=float(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(smr_number)+' current']))

        if TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(count)+' id'])!='':

            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

[ALARM MASK]
[LED]
[BUZZER]
[DCIF 8 OP PFC]
[DCIF 2 OP PFC]
[RS 485]
    lower_port_baudrate=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['lower port baudrate']))

    upper_port_baudrate=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['upper port baudrate']))

    modbus_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['modbus comm']))

    lithium_ion_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['lithium ion comm']))

    acem_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['acem comm']))

    dg_amf_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['dg amf comm']))

    solar_hvlv_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['solar hvlv comm']))

    ext_dcem_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['ext dcem comm']))

    bnms_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['bnms comm']))

    lcu_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['lcu comm'])) ## added for IPMS

    fuel_sensor_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['fuel sensor comm'])) ## added for IPMS

[SYSTEM COMMANDS]
get_config_version_revision=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM COMMANDS')['config file version'])

date_time=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM COMMANDS')['rtc date time'])

    m1000_mac_id=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM COMMANDS')['m1000 mac id'])

    m1000_serial_number=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM COMMANDS')['serial number'])

[RS 485]
    lower_port_baudrate=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['lower port baudrate']))

    upper_port_baudrate=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['upper port baudrate']))

    modbus_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['modbus comm']))

    lithium_ion_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['lithium ion comm']))

    acem_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['acem comm']))

    dg_amf_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['dg amf comm']))

    solar_hvlv_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['solar hvlv comm']))

    ext_dcem_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['ext dcem comm']))

    bnms_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['bnms comm']))

    lcu_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['lcu comm'])) ## added for IPMS

    fuel_sensor_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['fuel sensor comm'])) ## added for IPMS

[GENERAL DATA]
[AVIATION LAMP]
[VER REV]
current_config_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['config'])

current_acif_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['acif'])

current_dcif_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['dcif'])

current_dgbc_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['dgbc'])

current_m1000_software_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['m1000'])

current_bootloader_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['bootloader'])

current_pfcio1_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['pfcio 1'])


Process finished with exit code 0
'''
pfcjig = '''[PFC 1 PFC]
p_load = PFC 1
r_phase = PFC 2
n_p_load_1 = PFC 3
y_phase = PFC 4
n_p_load_2 = PFC 5
b_phase = PFC 6
n_p_load_3 = PFC 7
bus = PFC 8
n_p_load_4 = PFC 9
load_mains = PFC 10
battery_1 = PFC 11
battery_mains = PFC 12
battery_2 = PFC 13
add_on_1 = PFC 14
battery_3 = PFC 15
add_on_2 = PFC 16

[PFC 1 STATE]
p_load = YES
r_phase = YES
n_p_load_1 = YES
y_phase = YES
n_p_load_2 = YES
b_phase = YES
n_p_load_3 = YES
bus = YES
n_p_load_4 = YES
load_mains = YES
battery_1 = YES
battery_mains = YES
battery_2 = YES
add_on_1 = YES
battery_3 = YES
add_on_2 = YES

[PFC 2 PFC]
pfc 1 = PFC 1
pfc 2 = PFC 2
pfc 3 = PFC 3
pfc 4 = PFC 4
pfc 5 = PFC 5
pfc 6 = PFC 6
pfc 7 = PFC 7
pfc 8 = PFC 8
pfc 9 = PFC 9
pfc 10 = PFC 10
pfc 11 = PFC 11
pfc 12 = PFC 12
pfc 13 = PFC 13
pfc 14 = PFC 14
pfc 15 = PFC 15
pfc 16 = PFC 16

[PFC 2 STATE]
pfc 1 = YES
pfc 2 = YES
pfc 3 = YES
pfc 4 = YES
pfc 5 = YES
pfc 6 = YES
pfc 7 = YES
pfc 8 = YES
pfc 9 = YES
pfc 10 = YES
pfc 11 = YES
pfc 12 = YES
pfc 13 = YES
pfc 14 = YES
pfc 15 = YES
pfc 16 = YES
'''
profile = '''[USERNAME]
paras = SUPERMASTER
deepak = SUPERMASTER
paras_mittal = MASTER
p = USER

[PASSWORDS]
paras = 321@exicom
paras_mittal = 321@mocixe
deepak = deepak1
p = p

[COMMISSION]
serial = sample
'''
RequiredParameter = '''TAB.1027.0'''
setting = '''
[SETTING]
m1000_ip address = 172.16.66.50
m1000_user = engg1
m1000_password = 8M$Ex#engg
m2000_ip address = 172.16.66.50
m2000_user = engg1
m2000_password = 8M$Ex#engg
db user = root
db password = 321@mocixe
can device name = ixxat
can device id = HW443335
can device bitrate = 250K
rs485 lower port = COM12
rs485 upper port = COM11
modbus comm port = COM10
modbus comm baudrate = 9600
modbus comm port 2 = COM15
modbus comm baudrate 2 = 9600
ac source comm type = GPIB
ac source gpib id = GPIB1::30::INSTR
ac source usb id = USB0::0x0A69::0x0844::616120000192
ate load count = 1
ate load comm type = GPIB
dc load gpib id = GPIB0::30::INSTR
battery load gpib id = GPIB0::30::INSTR
dc load usb id = USB0::0x0A69::0x0879::63210AH00072::INSTR
battery load usb id = USB0::0x0A69::0x0879::63210AH00072::INSTR
2d matrix code = 24
power meter usb id = USB0::0x0A69::0x086C::662040000475
cro port = None
cro baudrate = None

[SETTING STATE]
m1000_ip address = YES
m1000_user = YES
m1000_password = YES
m2000_ip address = YES
m2000_user = YES
m2000_password = YES
db user = YES
db password = YES
can device name = YES
can device id = YES
can device bitrate = YES
rs485 lower port = YES
rs485 upper port = YES
modbus comm port = YES
modbus comm baudrate = YES
modbus comm port 2 = YES
modbus comm baudrate 2 = YES
ac source comm type = YES
ac source gpib id = YES
ac source usb id = YES
ate load count = YES
ate load comm type = YES
dc load gpib id = YES
battery load gpib id = YES
dc load usb id = YES
battery load usb id = YES
2d matrix code = NO
power meter usb id = YES
cro port = YES
cro baudrate = YES

[STATION]
id = 5

[TEST ID]
count = 0

[MULTIPLY]
factor=1

'''
smrdetail = '''[SMR DETAIL PARAMETERS]
smr status=TAB.1461.
smr id=TAB.2009.
smr op current=TAB.145B.
smr op voltage=TAB.145C.
smr current limit=TAB.147B.
smr pfc temp=TAB.147C.
smr amb temp=TAB.147D.
smr dcdc temp=TAB.147E.
smr vr=TAB.A071.
smr ip voltage=TAB.145D.
smr ip current=TAB.145E.
smr ip frequency=TAB.145F.
smr dc state=TAB.1459.
smr status=TAB.1461.

'''
systemversion = '''[HE517636]
config=53.01
dgbc=29.10.00
acif=27.10.01
dcif=00.15.01
m1000=22.17.02
bootloader=22.14.02
pfcio 1=25.10.00

[RACK TYPE]
HE518341=HE518341
HE517949=HE517949
HE518017=HE518017
HE518003=HE518003
HE517656=HE517656
HE517693=HE517693
HE518900=HE518900
HE518361=HE518361
HE518323=HE518323

[MCM TYPE]
HE518341=M2000
HE517728=M2000
HE517949=M1000
HE518017=M1000
HE518003=M1000
HE517656=M1000
HE517693=M1000
HE518900=M1000
HE518361=M2000
HE518323=M2000

[HE518323 VER]
config=17.01
m1000=73.00
bootloader=34.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.14.07
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE517728 VER]
config=52.04
m1000=22.15.19
bootloader=22.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.14.07
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE517949 VER]
config=121.01
m1000=22.15.19
bootloader=22.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.16.03
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE518017 VER]
config=131.03
m1000=22.17.09
bootloader=22.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.16.03
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE518003 VER]
config=129.02
m1000=22.17.09
bootloader=22.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.16.03
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE517656 VER]
config=37.02
m1000=22.10.22
bootloader=22.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.15.01
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE517963 VER]
config=125.00
m1000=22.17.09
bootloader=22.14.03
hvlv=00.00.00
acif=27.10.02
dcif=24.16.03
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE517964 VER]
config=124.00
m1000=22.17.09
bootloader=22.14.03
hvlv=00.00.00
acif=27.10.02
dcif=24.16.03
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE517651 VER]
config=39.00
m1000=22.10.22
bootloader=22.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.15.01
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE517773 VER]
config=87.00
m1000=22.10.22
bootloader=22.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.15.01
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE517652 VER]
config=38.02
m1000=22.10.22
bootloader=22.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.15.01
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE517654 VER]
config=42.02
m1000=22.10.22
bootloader=22.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.15.01
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00


[HE518361 VER]
config=00.00
m1000=34.16.04
bootloader=34.14.03
hvlv=00.00.00
acif=00.00.00
dcif=24.15.01
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00

[HE518900 VER]
config=50.00
m1000=22.10.22
bootloader=22.14.03
hvlv=27.11.01
acif=00.00.00
dcif=24.16.03
pfcio 1=00.00.00
pfcio 2=00.00.00
dgbc=00.00.00'''
telnetgetcommand = '''current_config_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['config'])
current_acif_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['acif'])
current_dcif_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['dcif'])
current_dgbc_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['dgbc'])
current_m1000_software_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['m1000'])
current_bootloader_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['bootloader'])
current_pfcio1_version=TELNET_GET_COMMAND(self.telnet,OIDRead('VER REV')['pfcio 1'])
get_config_version_revision=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM COMMANDS')['config file version'])
date_time=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM COMMANDS')['rtc date time'])
site_id=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['site id'])
initial_eb_kwh_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['grid kwh']))
initial_dg_kwh_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg kwh']))
initial_dg_runhr_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg runhr']))
initial_eb_runhr_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['grid runhr']))
phase_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['ac phases type']))
dg_phase_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dg phase type'])) ## added for IPMS
battery_fuses_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['no. of battery fuses']))
battery_lvd_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['no. of battery lvd']))
load_lvd_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['no. of load lvd']))
load_current_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['no. of load current']))
load_current_sensor_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load current sensor']))
dcif_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dcif card']))
dcif_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dcif card type']))
load_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load'+str(count)+' hall effect value']))
batt_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['batt'+str(count-load_current_count)+' hall effect value']))
load_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load'+str(count)+' shunt value']))
load_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load'+str(count)+' shunt mv value']))

            batt_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['batt'+str(count-load_current_count)+' shunt value']))

            batt_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['batt'+str(count-load_current_count)+' shunt mv value']))

            load_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load'+str(count)+' shunt value']))

            load_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['load'+str(count)+' shunt mv value']))

            batt_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['batt'+str(count-load_current_count)+' shunt value']))

            batt_hall_effect_value=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['batt'+str(count-load_current_count)+' shunt mv value']))

    hvlv_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['hvlv card']))

    acif_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['acif card'])) ## added for IPMS

    dgbc_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dgbc card'])) ## added for IPMS

    dcif_ip_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dcif ip card']))

    dcif_op_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['dcif op card']))

    batt_temperature_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['temperature1']))

    room_temperature1_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['temperature2']))

    room_temperature2_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['temperature3']))

    pfc_io_card_state=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['pfc io card']))

    smr_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count']))

    smr_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr type']))

    battery_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['battery type']))

        battery_capacity=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla battery capacity']))

        bcl_factor=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla bcl factor']))

        battery_capacity=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion battery capacity']))

        bcl_factor=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion bcl factor']))

        module_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion module count']))

    ac_ip_voltage_source=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['ac ip voltage source']))

    ac_ip_current_source=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['ac ip current source']))

    ipms_power_logic_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['ipms power logic'])) ## added for IPMS

    lower_port_baudrate=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['lower port baudrate']))

    upper_port_baudrate=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['upper port baudrate']))

    modbus_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['modbus comm']))

    lithium_ion_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['lithium ion comm']))

    acem_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['acem comm']))

    dg_amf_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['dg amf comm']))

    solar_hvlv_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['solar hvlv comm']))

    ext_dcem_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['ext dcem comm']))

    bnms_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['bnms comm']))

    lcu_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['lcu comm'])) ## added for IPMS

    fuel_sensor_comm_port=int(TELNET_GET_COMMAND(self.telnet,OIDRead('RS 485')['fuel sensor comm'])) ## added for IPMS

        value=TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(temp_count)])

            PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' gain'])))

            PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' offset'])))

            #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' deadband'])))

            if (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' gain'])!='0') or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' offset'])!='0'):# or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' deadband'])!='0'):

                PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' gain'])))

                PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' offset'])))

                #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(i)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(i)+' deadband'])))

                DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

        DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

            DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

        DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

        PRINT_CONSOLE(self,"CHANNEL "+str(i+1)+"VOLTAGE DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE DC VOLTAGE')['channel'+str(i+1)+' deadband'])))

        PRINT_CONSOLE(self,"CHANNEL "+str(i+1)+"VOLTAGE GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE DC VOLTAGE')['channel'+str(i+1)+' gain'])))

        DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(i)]))

    DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

        DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(i)]))

    DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

    if (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])!='0') or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])!='0'):# or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!='0'):

        PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

        PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

        #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

    DUT_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

    DUT_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

        if (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain']))!=GAIN_OFFSET) or (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset']))!=ZERO_OFFSET) or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!=str(DEADBAND)):

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

    DUT__VERIFY_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

    DUT__VERIFY_READ_CURRENT_MID=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

    DUT__VERIFY_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

    if (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])!='0') or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])!='0'):# or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!='0'):

        PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

        PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

        #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

    DUT_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

    DUT_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

        if (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain']))!=GAIN_OFFSET) or (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset']))!=ZERO_OFFSET) or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!=str(DEADBAND)):

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

    DUT__VERIFY_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

    DUT__VERIFY_READ_CURRENT_MID=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

    DUT__VERIFY_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

#     if (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])!='0') or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])!='0'):# or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!='0'):

#         PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

#         PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

#         #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

#     DUT_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

#     DUT_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))

            if TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT DCIO')['channel'+str(channel_number)+' deadband'])!=str(DEADBAND):

        #if (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain']))!=GAIN_OFFSET) or (float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset']))!=ZERO_OFFSET) or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!=str(DEADBAND)):

            if TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!=str(DEADBAND):

    #PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

    #PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

    PRINT_CONSOLE(self,"PROGRAMMED CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))  

#     DUT__VERIFY_READ_CURRENT_LOW=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

#     DUT__VERIFY_READ_CURRENT_MID=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

        DUT__VERIFY_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT DCIO')['channel'+str(channel_number)]))

        DUT__VERIFY_READ_CURRENT_HIGH=float(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)]))/10

            if (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])!='0') or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])!='0'):# or (TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])!='0'):

                PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" GAIN: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' gain'])))

                PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" OFFSET: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' offset'])))

                #PRINT_CONSOLE(self,"CURRENT CHANNEL "+str(channel_number)+" DEADBAND: "+str(TELNET_GET_COMMAND(self.telnet,OIDRead('CALIBRATE CURRENT')['channel'+str(channel_number)+' deadband'])))

        DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

            DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

            DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus'])) 

            DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(count_temp)]))

                DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(count_temp)]))

                DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt1']))  

                DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(count_temp)]))

                    DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(count_temp)]))

                DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt1'])) 

            INDI_SMR_CURRENT=float(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(smr_number)+' current']))

            INDI_DUT_BATT_VOLTAGE=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(batt_number)]))

        DUT_BUS_VOLTAGE=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

#         INDI_DUT_BATT_VOLTAGE=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')[BATT+str(count_temp)]))

#     INDI_DUT_BATT_VOLTAGE=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

                    DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

                    DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

            DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(1)]))

                    DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(i)]))

                        DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

            DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(i)]))

            DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                    DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

                    DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

                DUT_batt_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['batt'+str(count_temp)]))

#             DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(1)]))

#                 DUT_load_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ CURRENT')['load'+str(i)]))

#                 DUT_batt_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['batt'+str(count_temp)]))

        if TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(count)+' id'])!='':

#         common_battery_fuse_alarm=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['batt fuse fail']))

#         batt1_fuse_alarm=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['batt1 fuse fail']))

#         batt2_fuse_alarm=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['batt2 fuse fail']))

#         batt3_fuse_alarm=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['batt3 fuse fail']))

            temperature=float(TELNET_GET_COMMAND(self.telnet,OIDRead('READ TEMPERATURE')['temperature'+str(temp)]))

                    temperature=TELNET_GET_COMMAND(self.telnet,OIDRead('READ TEMPERATURE')['temperature'+str(temp)])

        alarm_hvlv_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['hvlv comm fail']))

        config_smr_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count']))

#         alarm_mains_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['mains fail']))

#         voltage_r_phase=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['r phase']))

            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

        config_smr_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count']))

        alarm_mains_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['mains fail']))

        voltage_r_phase=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['r phase']))

            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

            alarm_phase_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')[phase.lower()+' fail']))

            voltage_phase=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')[phase.lower()]))

            config_smr_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count']))

                smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

    alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['can comm fail']))

        alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['hvlv comm fail']))

        alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['dcif comm fail']))

        alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['pfc1 comm fail']))

        alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['acif comm fail']))

        alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['dgbc comm fail']))

    if int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==0:

        if int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==ip_pfc_state:

        #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

        if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

        #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

        if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

        #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

        if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

        #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

        if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

        #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

        if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

        #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

        if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

    modem_type=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['modem type']))

            charge_voltage_telnet=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['charge voltage']))

            #fuel_sensor_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['fs comm fail']))

                fuel_mm=float(TELNET_GET_COMMAND(self.telnet,'TAB.880D.0'))

                    #lcu_ip_v=float(TELNET_GET_COMMAND(self.telnet,'TAB.4C01.0'))

                #fuel_sensor_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['fs comm fail']))

            charge_voltage_telnet=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['charge voltage']))

                #lcu_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['lcu comm fail']))

                    lcu_op_v=float(TELNET_GET_COMMAND(self.telnet,'TAB.4C01.0'))

                    #lcu_ip_v=float(TELNET_GET_COMMAND(self.telnet,'TAB.4C01.0'))

            signal_strength_recieved=TELNET_GET_COMMAND(self.telnet,OIDRead('MODEM')['signal strength'])

    config_smr_count=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count'])

    site_id=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['site id'])

    float_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['float voltage']))

    charge_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['charge voltage']))

    battery_lvd_set=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['battery lvd set']))

    battery_lvd_restore=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['battery lvd restore']))

    load_lvd_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['no. of load lvd']))

        load_lvd_set=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['load1 lvd set']))

        load_lvd_restore=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['load1 lvd restore']))

    dc_v_low_set=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['dc voltage low set']))

    dc_v_low_restore=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['dc voltage low restore']))

    dc_v_low_set=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['dc voltage low set']))

    dc_v_low_restore=float(TELNET_GET_COMMAND(self.telnet,OIDRead('BATTERY SETTING')['dc voltage low restore']))

    main_low_fail_set=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS SETTING')['mains low fail set']))

    main_low_fail_restore=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS SETTING')['mains low fail restore']))

    main_high_fail_set=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS SETTING')['mains high fail set']))

    main_high_fail_restore=int(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS SETTING')['mains high fail restore']))

    smr_count=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['smr count'])

    m1000_mac_id=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM COMMANDS')['m1000 mac id'])

    m1000_serial_number=TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM COMMANDS')['serial number'])

        battery_capacity_vrla=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla battery capacity']))

        bcl_factor_vrla=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla bcl factor']))

        battery_capacity=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion battery capacity']))

        module_count=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion module count']))

        bcl_factor=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lion bcl factor']))

        battery_capacity_vrla=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla battery capacity']))

        bcl_factor_vrla=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['vrla bcl factor']))

        alarm_byte=int(TELNET_GET_COMMAND(self.telnet,OIDRead('DG')['dg alarm byte']))

        alarm_byte=int(TELNET_GET_COMMAND(self.telnet,OIDRead('DG')['dg alarm byte2']))

        alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['dgbc comm fail']))

    dg_alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['dg contactor on']))

    eb_alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['eb contactor on']))

                dg_battery_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG')['battery voltage']))

                dg_battery_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG')['battery current']))

                alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['dgbc comm fail']))

            alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['dg contactor on']))

                    r_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ VOLTAGE')['r phase']))

                    r_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ CURRENT')['r phase']))

                    r_phase_pf=(float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg pf r phase'])))/100

                    r_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ VOLTAGE')['r phase']))

                    y_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ VOLTAGE')['y phase']))

                    b_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ VOLTAGE')['b phase']))

                    r_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ CURRENT')['r phase']))

                    y_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ CURRENT')['y phase']))

                    b_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DG READ CURRENT')['b phase']))

                    r_phase_pf=(float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg pf r phase'])))/100

                    y_phase_pf=(float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg pf y phase'])))/100

                    b_phase_pf=(float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg pf b phase'])))/100

                #initial_dg_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg kwh']))

                #final_dg_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['dg kwh']))

    lcu_present_flag=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['lcu present']))

    AC1_present_flag=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['ac1 present']))

    AC2_present_flag = int(TELNET_GET_COMMAND(self.telnet, OIDRead('SYSTEM CONFIG')['ac2 present']))

    dg_alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['dg contactor on']))

    eb_alarm_comm_fail=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['eb contactor on']))

                eb_contactor_alarm=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['eb contactor on']))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                        r_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['r phase']))

                        r_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['r phase']))

                eb_contactor_alarm=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['eb contactor on']))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                        y_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['y phase']))

                        y_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['y phase']))

                eb_contactor_alarm=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['eb contactor on']))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                        b_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['b phase']))

                        b_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['b phase']))

                eb_contactor_alarm=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['eb contactor on']))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                #initial_eb_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['grid kwh']))

                eb_contactor_alarm=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['eb contactor on']))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

            #initial_eb_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['grid kwh']))

#             final_eb_reading=float(TELNET_GET_COMMAND(self.telnet,OIDRead('ACIF DATA')['grid kwh']))

                eb_contactor_alarm=int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['eb contactor on']))

                            smr_status=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SMR COMMANDS')['smr'+str(i)+" status"]))

                r_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['r phase']))

                y_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['y phase']))

                b_phase_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ VOLTAGE')['b phase']))

                r_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['r phase']))

                y_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['y phase']))

                b_phase_current=float(TELNET_GET_COMMAND(self.telnet,OIDRead('MAINS READ CURRENT')['b phase']))

        if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==0:

                #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

                #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

                #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

                #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

                #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

                #if (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==96) or (int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))==1):

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['spu fail']))==1:

#             if int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))!=0:

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['dccb trip']))==1:

        read_restore_time=int(TELNET_GET_COMMAND(self.telnet,OIDRead('DOOR SETTING')['door open restore time']))

#             if int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))!=0:

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['door open alarm']))==1:

#             if int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))!=0:

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['smoke alarm']))==1:

    #aviation_lamp_flag=int(TELNET_GET_COMMAND(self.telnet,OIDRead('SYSTEM CONFIG')['aviation lamp configuration']))##This oid is 0 if False , otherwise it is a number.

    #fan_fail_sense=int(TELNET_GET_COMMAND(self.telnet, OIDRead('SYSTEM CONFIG')['fan fail sense']))

            fan_flag=TELNET_GET_COMMAND(self.telnet, OIDRead('ALARM')['power fan fail'])

            if (int(TELNET_GET_COMMAND(self.telnet, OIDRead('ALARM')['power fan fail']))) ==1:

            if (int(TELNET_GET_COMMAND(self.telnet, OIDRead('ALARM')['battery  fan fail']))) == 1:

#             if int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))!=0:

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['batt fuse fail pfc']))==1:

        DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

        dc_source_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['dc source']))

            DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

            dc_source_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['dc source']))

            DUT_bus_volt=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['bus']))

            dc_source_voltage=float(TELNET_GET_COMMAND(self.telnet,OIDRead('DC READ VOLTAGE')['dc source']))

                if int(TELNET_GET_COMMAND(self.telnet,OIDRead('DCIF 8 IP PFC')['pfc']))!=0:

                    if int(TELNET_GET_COMMAND(self.telnet,OIDRead('ALARM')['dccb trip']))==1:'''
testorder = '''1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,'''
todo = '''1. Change the oid file
2. Run test again with changed oid file
3. Right now wrong values are DCIO current calibration, lower and upper ports for RS485
4. PFC logic is not working for all racks, test the logic
5. Check whether default values are being set correctly or not after test completion.
6. Check the values of default set parameters after test completeion.
7. Once go through each test PASS and FAIL criteria.'''
customer_detail = ''''''
'''Default Data END'''

'''CSV DATA START'''
csv_data = [['HE517512', '23', 'BSNL', "M1000"],
            ['HE517346', '23', 'BSNL', "M1000"],
            ['HE517358', '24', 'BSNL', "M1000"],
            ['HE517359', '24', 'BSNL', "M1000"],
            ['HE517360', '24', 'BSNL', "M1000"],
            ['HE517513', '35', 'BSNL', "M1000"],
            ['HE517393', '36', 'BSNL', "M1000"],
            ['HE517392', '36', 'BSNL', "M1000"],
            ['HE517391', '37', 'BSNL', "M1000"],
            ['HE517417', '38', 'BSNL', "M1000"],
            ['HE517420', '40', 'BSNL', "M1000"],
            ['HE517414', '41', 'BSNL', "M1000"],
            ['HE517411', '42', 'BSNL', "M1000"],
            ['HE517410', '43', 'BSNL', "M1000"],
            ['HE517507', '45', 'BSNL', "M1000"],
            ['HE517484', '31', 'PGCIL', "M1000"],
            ['HE517485', '32', 'PGCIL', "M1000"],
            ['HE517486', '33', 'PGCIL', "M1000"],
            ['HE517487', '30', 'PGCIL', "M1000"],
            ['HE517488', '31', 'PGCIL', "M1000"],
            ['HE517489', '34', 'PGCIL', "M1000"],
            ['HE517553', '22.15', 'RELIANCE', "M1000"],
            ['HE517610', '22.15', 'RELIANCE', "M1000"],
            ['HE517963', '125', 'ATC', "M1000"]]
'''CSV DATA END'''

'''FILES DATA AND NAME LIST'''

'''FILES DATA AND NAME LIST'''
